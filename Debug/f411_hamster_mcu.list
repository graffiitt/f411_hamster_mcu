
f411_hamster_mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009410  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080095a8  080095a8  000195a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009750  08009750  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009758  08009758  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009758  08009758  00019758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800975c  0800975c  0001975c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08009760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f38  20000170  080098d0  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020a8  080098d0  000220a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001755b  00000000  00000000  000201e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c4c  00000000  00000000  0003773e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  0003b390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f64  00000000  00000000  0003c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a4af  00000000  00000000  0003d6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a177  00000000  00000000  00057bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092246  00000000  00000000  00071d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057a4  00000000  00000000  00103f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010970c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000170 	.word	0x20000170
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009590 	.word	0x08009590

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000174 	.word	0x20000174
 80001d4:	08009590 	.word	0x08009590

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <execMV>:
 */
#include "cmd_move.h"

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);

void execMV(uint8_t command, uint8_t *data) {
 80004d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004d8:	b087      	sub	sp, #28
 80004da:	af00      	add	r7, sp, #0
 80004dc:	4603      	mov	r3, r0
 80004de:	6039      	str	r1, [r7, #0]
 80004e0:	71fb      	strb	r3, [r7, #7]
 80004e2:	466b      	mov	r3, sp
 80004e4:	461e      	mov	r6, r3

	size_t range = sizeof(data);
 80004e6:	2304      	movs	r3, #4
 80004e8:	617b      	str	r3, [r7, #20]
	uint8_t msg[range + 3];
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	1cd9      	adds	r1, r3, #3
 80004ee:	460b      	mov	r3, r1
 80004f0:	3b01      	subs	r3, #1
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	2300      	movs	r3, #0
 80004f6:	4688      	mov	r8, r1
 80004f8:	4699      	mov	r9, r3
 80004fa:	f04f 0200 	mov.w	r2, #0
 80004fe:	f04f 0300 	mov.w	r3, #0
 8000502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800050a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800050e:	2300      	movs	r3, #0
 8000510:	460c      	mov	r4, r1
 8000512:	461d      	mov	r5, r3
 8000514:	f04f 0200 	mov.w	r2, #0
 8000518:	f04f 0300 	mov.w	r3, #0
 800051c:	00eb      	lsls	r3, r5, #3
 800051e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000522:	00e2      	lsls	r2, r4, #3
 8000524:	1dcb      	adds	r3, r1, #7
 8000526:	08db      	lsrs	r3, r3, #3
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	ebad 0d03 	sub.w	sp, sp, r3
 800052e:	466b      	mov	r3, sp
 8000530:	3300      	adds	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]

	char cmd[3];
	itoa(command, cmd, 10);
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	f107 0108 	add.w	r1, r7, #8
 800053a:	220a      	movs	r2, #10
 800053c:	4618      	mov	r0, r3
 800053e:	f008 fded 	bl	800911c <itoa>

	if (command < 9) {
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b08      	cmp	r3, #8
 8000546:	d808      	bhi.n	800055a <execMV+0x86>
		msg[0] = '0';
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	701a      	strb	r2, [r3, #0]
		msg[1] = '0';
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2230      	movs	r2, #48	; 0x30
 8000552:	705a      	strb	r2, [r3, #1]
		msg[2] = cmd[0];
 8000554:	7a3a      	ldrb	r2, [r7, #8]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	709a      	strb	r2, [r3, #2]
	}
	if (command > 9 && command < 100) {
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b09      	cmp	r3, #9
 800055e:	d90b      	bls.n	8000578 <execMV+0xa4>
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b63      	cmp	r3, #99	; 0x63
 8000564:	d808      	bhi.n	8000578 <execMV+0xa4>
		msg[0] = '0';
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2230      	movs	r2, #48	; 0x30
 800056a:	701a      	strb	r2, [r3, #0]
		msg[1] = cmd[0];
 800056c:	7a3a      	ldrb	r2, [r7, #8]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	705a      	strb	r2, [r3, #1]
		msg[2] = cmd[1];
 8000572:	7a7a      	ldrb	r2, [r7, #9]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	709a      	strb	r2, [r3, #2]
	}
	if (command > 99) {
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	2b63      	cmp	r3, #99	; 0x63
 800057c:	d908      	bls.n	8000590 <execMV+0xbc>
		msg[0] = cmd[0];
 800057e:	7a3a      	ldrb	r2, [r7, #8]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	701a      	strb	r2, [r3, #0]
		msg[1] = cmd[1];
 8000584:	7a7a      	ldrb	r2, [r7, #9]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	705a      	strb	r2, [r3, #1]
		msg[2] = cmd[2];
 800058a:	7aba      	ldrb	r2, [r7, #10]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	709a      	strb	r2, [r3, #2]
	}

	memcpy(msg + 4, data, range);
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3304      	adds	r3, #4
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	6839      	ldr	r1, [r7, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f008 ff9f 	bl	80094dc <memcpy>
 800059e:	46b5      	mov	sp, r6

	//HAL_UART_Transmit(&huart2, pData, Size, 5);
}
 80005a0:	bf00      	nop
 80005a2:	371c      	adds	r7, #28
 80005a4:	46bd      	mov	sp, r7
 80005a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080005ac <transmitUART>:

void transmitUART() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	static uint8_t i = 2;
	static uint8_t rx_buff[] = "MV000000000000000000";

	if (USART2->SR & USART_SR_RXNE) //Проверяем, прило ли чтонибудь в UART
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <transmitUART+0x54>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f003 0320 	and.w	r3, r3, #32
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d01f      	beq.n	80005fc <transmitUART+0x50>
	{
		rx_buff[i] = (uint8_t) USART2->DR;
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <transmitUART+0x54>)
 80005be:	6859      	ldr	r1, [r3, #4]
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <transmitUART+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	b2c9      	uxtb	r1, r1
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <transmitUART+0x5c>)
 80005ca:	5499      	strb	r1, [r3, r2]
		if (rx_buff[i] == ';') {
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <transmitUART+0x58>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <transmitUART+0x5c>)
 80005d4:	5c9b      	ldrb	r3, [r3, r2]
 80005d6:	2b3b      	cmp	r3, #59	; 0x3b
 80005d8:	d10a      	bne.n	80005f0 <transmitUART+0x44>
			CDC_Transmit_FS(rx_buff, (uint16_t) i);
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <transmitUART+0x58>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	4619      	mov	r1, r3
 80005e2:	4809      	ldr	r0, [pc, #36]	; (8000608 <transmitUART+0x5c>)
 80005e4:	f008 f92c 	bl	8008840 <CDC_Transmit_FS>
			i = 2;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <transmitUART+0x58>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	701a      	strb	r2, [r3, #0]
		} else {
			i++;
		}
	}
}
 80005ee:	e005      	b.n	80005fc <transmitUART+0x50>
			i++;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <transmitUART+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <transmitUART+0x58>)
 80005fa:	701a      	strb	r2, [r3, #0]
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40004400 	.word	0x40004400
 8000604:	20000000 	.word	0x20000000
 8000608:	20000004 	.word	0x20000004

0800060c <cmdInit>:
extern CMD_trace cmd[];

uint8_t cmdIO[] = { 'I', 'O' };
uint8_t cmdMV[] = { 'M', 'V'};

void cmdInit() {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

	// IO commands
	initIO();
 8000610:	f000 f866 	bl	80006e0 <initIO>
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <cmdInit+0x28>)
 8000616:	881a      	ldrh	r2, [r3, #0]
	memcpy(cmd[0].cmdIndex, cmdIO, sizeof(cmdIO));
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <cmdInit+0x2c>)
 800061a:	801a      	strh	r2, [r3, #0]
	cmd[0].exec = execIO;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <cmdInit+0x2c>)
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <cmdInit+0x30>)
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <cmdInit+0x34>)
 8000624:	881a      	ldrh	r2, [r3, #0]


	memcpy(cmd[1].cmdIndex, cmdMV, sizeof(cmdMV));
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <cmdInit+0x2c>)
 8000628:	821a      	strh	r2, [r3, #16]
	cmd[1].exec = execMV;
 800062a:	4b03      	ldr	r3, [pc, #12]	; (8000638 <cmdInit+0x2c>)
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <cmdInit+0x38>)
 800062e:	61da      	str	r2, [r3, #28]

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000001c 	.word	0x2000001c
 8000638:	2000031c 	.word	0x2000031c
 800063c:	08000849 	.word	0x08000849
 8000640:	20000020 	.word	0x20000020
 8000644:	080004d5 	.word	0x080004d5

08000648 <recieveData>:

void recieveData(uint8_t *buf, CMD_trace *command) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]

	uint8_t commandBuf[] = { buf[2], buf[3], buf[4] };
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	789b      	ldrb	r3, [r3, #2]
 8000656:	733b      	strb	r3, [r7, #12]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	78db      	ldrb	r3, [r3, #3]
 800065c:	737b      	strb	r3, [r7, #13]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	73bb      	strb	r3, [r7, #14]
	command->command = atoi((char*) commandBuf);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4618      	mov	r0, r3
 800066a:	f008 fd3b 	bl	80090e4 <atoi>
 800066e:	4603      	mov	r3, r0
 8000670:	b2da      	uxtb	r2, r3
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	709a      	strb	r2, [r3, #2]

	uint8_t lenghtBuf[] = { buf[5], buf[6] };
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	795b      	ldrb	r3, [r3, #5]
 800067a:	723b      	strb	r3, [r7, #8]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	799b      	ldrb	r3, [r3, #6]
 8000680:	727b      	strb	r3, [r7, #9]
	command->sizeData = atoi((char*) lenghtBuf);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	4618      	mov	r0, r3
 8000688:	f008 fd2c 	bl	80090e4 <atoi>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	605a      	str	r2, [r3, #4]
	uint8_t *dt = (uint8_t*) malloc(command->sizeData);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f008 fd41 	bl	8009120 <malloc>
 800069e:	4603      	mov	r3, r0
 80006a0:	613b      	str	r3, [r7, #16]


	for (uint8_t i = 0; command->sizeData > i; i++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	75fb      	strb	r3, [r7, #23]
 80006a6:	e00c      	b.n	80006c2 <recieveData+0x7a>
		dt[i] = buf[7 + i];
 80006a8:	7dfb      	ldrb	r3, [r7, #23]
 80006aa:	3307      	adds	r3, #7
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	441a      	add	r2, r3
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	6939      	ldr	r1, [r7, #16]
 80006b6:	440b      	add	r3, r1
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; command->sizeData > i; i++) {
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	3301      	adds	r3, #1
 80006c0:	75fb      	strb	r3, [r7, #23]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685a      	ldr	r2, [r3, #4]
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d8ed      	bhi.n	80006a8 <recieveData+0x60>
	}

	cmd->data = dt;
 80006cc:	4a03      	ldr	r2, [pc, #12]	; (80006dc <recieveData+0x94>)
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	6093      	str	r3, [r2, #8]
}
 80006d2:	bf00      	nop
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000031c 	.word	0x2000031c

080006e0 <initIO>:
extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);

IO_Pin DOpin[8];
IO_Pin DIpin[8];

void initIO() {
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	DOpin[0].port = GPIOB;
 80006e4:	4b54      	ldr	r3, [pc, #336]	; (8000838 <initIO+0x158>)
 80006e6:	4a55      	ldr	r2, [pc, #340]	; (800083c <initIO+0x15c>)
 80006e8:	601a      	str	r2, [r3, #0]
	DOpin[0].pin = GPIO_PIN_0;
 80006ea:	4b53      	ldr	r3, [pc, #332]	; (8000838 <initIO+0x158>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	605a      	str	r2, [r3, #4]
	DOpin[0].state = 0;
 80006f0:	4b51      	ldr	r3, [pc, #324]	; (8000838 <initIO+0x158>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	721a      	strb	r2, [r3, #8]

	DOpin[1].port = GPIOB;
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <initIO+0x158>)
 80006f8:	4a50      	ldr	r2, [pc, #320]	; (800083c <initIO+0x15c>)
 80006fa:	60da      	str	r2, [r3, #12]
	DOpin[1].pin = GPIO_PIN_1;
 80006fc:	4b4e      	ldr	r3, [pc, #312]	; (8000838 <initIO+0x158>)
 80006fe:	2202      	movs	r2, #2
 8000700:	611a      	str	r2, [r3, #16]
	DOpin[1].state = 0;
 8000702:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <initIO+0x158>)
 8000704:	2200      	movs	r2, #0
 8000706:	751a      	strb	r2, [r3, #20]

	DOpin[2].port = GPIOB;
 8000708:	4b4b      	ldr	r3, [pc, #300]	; (8000838 <initIO+0x158>)
 800070a:	4a4c      	ldr	r2, [pc, #304]	; (800083c <initIO+0x15c>)
 800070c:	619a      	str	r2, [r3, #24]
	DOpin[2].pin = GPIO_PIN_2;
 800070e:	4b4a      	ldr	r3, [pc, #296]	; (8000838 <initIO+0x158>)
 8000710:	2204      	movs	r2, #4
 8000712:	61da      	str	r2, [r3, #28]
	DOpin[2].state = 0;
 8000714:	4b48      	ldr	r3, [pc, #288]	; (8000838 <initIO+0x158>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2020 	strb.w	r2, [r3, #32]

	DOpin[3].port = GPIOB;
 800071c:	4b46      	ldr	r3, [pc, #280]	; (8000838 <initIO+0x158>)
 800071e:	4a47      	ldr	r2, [pc, #284]	; (800083c <initIO+0x15c>)
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
	DOpin[3].pin = GPIO_PIN_10;
 8000722:	4b45      	ldr	r3, [pc, #276]	; (8000838 <initIO+0x158>)
 8000724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
	DOpin[3].state = 0;
 800072a:	4b43      	ldr	r3, [pc, #268]	; (8000838 <initIO+0x158>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	DOpin[4].port = GPIOA;
 8000732:	4b41      	ldr	r3, [pc, #260]	; (8000838 <initIO+0x158>)
 8000734:	4a42      	ldr	r2, [pc, #264]	; (8000840 <initIO+0x160>)
 8000736:	631a      	str	r2, [r3, #48]	; 0x30
	DOpin[4].pin = GPIO_PIN_4;
 8000738:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <initIO+0x158>)
 800073a:	2210      	movs	r2, #16
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
	DOpin[4].state = 0;
 800073e:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <initIO+0x158>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DOpin[5].port = GPIOA;
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <initIO+0x158>)
 8000748:	4a3d      	ldr	r2, [pc, #244]	; (8000840 <initIO+0x160>)
 800074a:	63da      	str	r2, [r3, #60]	; 0x3c
	DOpin[5].pin = GPIO_PIN_5;
 800074c:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <initIO+0x158>)
 800074e:	2220      	movs	r2, #32
 8000750:	641a      	str	r2, [r3, #64]	; 0x40
	DOpin[5].state = 0;
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <initIO+0x158>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	DOpin[6].port = GPIOA;
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <initIO+0x158>)
 800075c:	4a38      	ldr	r2, [pc, #224]	; (8000840 <initIO+0x160>)
 800075e:	649a      	str	r2, [r3, #72]	; 0x48
	DOpin[6].pin = GPIO_PIN_6;
 8000760:	4b35      	ldr	r3, [pc, #212]	; (8000838 <initIO+0x158>)
 8000762:	2240      	movs	r2, #64	; 0x40
 8000764:	64da      	str	r2, [r3, #76]	; 0x4c
	DOpin[6].state = 0;
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <initIO+0x158>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	DOpin[7].port = GPIOA;
 800076e:	4b32      	ldr	r3, [pc, #200]	; (8000838 <initIO+0x158>)
 8000770:	4a33      	ldr	r2, [pc, #204]	; (8000840 <initIO+0x160>)
 8000772:	655a      	str	r2, [r3, #84]	; 0x54
	DOpin[7].pin = GPIO_PIN_7;
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <initIO+0x158>)
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	659a      	str	r2, [r3, #88]	; 0x58
	DOpin[7].state = 0;
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <initIO+0x158>)
 800077c:	2200      	movs	r2, #0
 800077e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	DIpin[0].port = GPIOA;
 8000782:	4b30      	ldr	r3, [pc, #192]	; (8000844 <initIO+0x164>)
 8000784:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <initIO+0x160>)
 8000786:	601a      	str	r2, [r3, #0]
	DIpin[0].pin = GPIO_PIN_10;
 8000788:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <initIO+0x164>)
 800078a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800078e:	605a      	str	r2, [r3, #4]
	DIpin[0].state = 0;
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <initIO+0x164>)
 8000792:	2200      	movs	r2, #0
 8000794:	721a      	strb	r2, [r3, #8]

	DIpin[1].port = GPIOA;
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <initIO+0x164>)
 8000798:	4a29      	ldr	r2, [pc, #164]	; (8000840 <initIO+0x160>)
 800079a:	60da      	str	r2, [r3, #12]
	DIpin[1].pin = GPIO_PIN_9;
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <initIO+0x164>)
 800079e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a2:	611a      	str	r2, [r3, #16]
	DIpin[1].state = 0;
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <initIO+0x164>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	751a      	strb	r2, [r3, #20]

	DIpin[2].port = GPIOA;
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <initIO+0x164>)
 80007ac:	4a24      	ldr	r2, [pc, #144]	; (8000840 <initIO+0x160>)
 80007ae:	619a      	str	r2, [r3, #24]
	DIpin[2].pin = GPIO_PIN_8;
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <initIO+0x164>)
 80007b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b6:	61da      	str	r2, [r3, #28]
	DIpin[2].state = 0;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <initIO+0x164>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2020 	strb.w	r2, [r3, #32]

	DIpin[3].port = GPIOB;
 80007c0:	4b20      	ldr	r3, [pc, #128]	; (8000844 <initIO+0x164>)
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <initIO+0x15c>)
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
	DIpin[3].pin = GPIO_PIN_15;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <initIO+0x164>)
 80007c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
	DIpin[3].state = 0;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <initIO+0x164>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	DIpin[4].port = GPIOB;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <initIO+0x164>)
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <initIO+0x15c>)
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
	DIpin[4].pin = GPIO_PIN_14;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <initIO+0x164>)
 80007de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e2:	635a      	str	r2, [r3, #52]	; 0x34
	DIpin[4].state = 0;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <initIO+0x164>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	DIpin[5].port = GPIOB;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <initIO+0x164>)
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <initIO+0x15c>)
 80007f0:	63da      	str	r2, [r3, #60]	; 0x3c
	DIpin[5].pin = GPIO_PIN_13;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <initIO+0x164>)
 80007f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f8:	641a      	str	r2, [r3, #64]	; 0x40
	DIpin[5].state = 0;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <initIO+0x164>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	DIpin[6].port = GPIOB;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <initIO+0x164>)
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <initIO+0x15c>)
 8000806:	649a      	str	r2, [r3, #72]	; 0x48
	DIpin[6].pin = GPIO_PIN_12;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <initIO+0x164>)
 800080a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800080e:	64da      	str	r2, [r3, #76]	; 0x4c
	DIpin[6].state = 0;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <initIO+0x164>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	DIpin[7].port = GPIOA;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <initIO+0x164>)
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <initIO+0x160>)
 800081c:	655a      	str	r2, [r3, #84]	; 0x54
	DIpin[7].pin = GPIO_PIN_1;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <initIO+0x164>)
 8000820:	2202      	movs	r2, #2
 8000822:	659a      	str	r2, [r3, #88]	; 0x58
	DIpin[7].state = 0;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <initIO+0x164>)
 8000826:	2200      	movs	r2, #0
 8000828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	2000018c 	.word	0x2000018c
 800083c:	40020400 	.word	0x40020400
 8000840:	40020000 	.word	0x40020000
 8000844:	200001ec 	.word	0x200001ec

08000848 <execIO>:

void execIO(uint8_t command, uint8_t *data) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]

	uint8_t pin[] = { data[0], data[1] };
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t numPin = atoi((char*) pin);
 8000864:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000868:	4618      	mov	r0, r3
 800086a:	f008 fc3b 	bl	80090e4 <atoi>
 800086e:	4603      	mov	r3, r0
 8000870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	switch (command) {
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b0b      	cmp	r3, #11
 8000878:	d053      	beq.n	8000922 <execIO+0xda>
 800087a:	2b0b      	cmp	r3, #11
 800087c:	f300 80a5 	bgt.w	80009ca <execIO+0x182>
 8000880:	2b01      	cmp	r3, #1
 8000882:	f000 8084 	beq.w	800098e <execIO+0x146>
 8000886:	2b0a      	cmp	r3, #10
 8000888:	f040 809f 	bne.w	80009ca <execIO+0x182>
	case 10: // set out pin state  io010050101   010 number state
	{
		//set number pin
		DOpin[numPin].state = data[2] - '0';
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	3302      	adds	r3, #2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000896:	3b30      	subs	r3, #48	; 0x30
 8000898:	b2d8      	uxtb	r0, r3
 800089a:	494e      	ldr	r1, [pc, #312]	; (80009d4 <execIO+0x18c>)
 800089c:	4613      	mov	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	440b      	add	r3, r1
 80008a6:	3308      	adds	r3, #8
 80008a8:	4602      	mov	r2, r0
 80008aa:	701a      	strb	r2, [r3, #0]

		setPin(&DOpin[numPin]);
 80008ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4a46      	ldr	r2, [pc, #280]	; (80009d4 <execIO+0x18c>)
 80008ba:	4413      	add	r3, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f88d 	bl	80009dc <setPin>
		uint8_t m[] = {numPin + '0', DOpin[numPin].state + '0'};
 80008c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008c6:	3330      	adds	r3, #48	; 0x30
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80008ce:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80008d2:	4940      	ldr	r1, [pc, #256]	; (80009d4 <execIO+0x18c>)
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	3308      	adds	r3, #8
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	3330      	adds	r3, #48	; 0x30
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t msg[] = {'I', 'O', '0', '2', '0', '0', m[0], '0', m[1]} ;
 80008ea:	2349      	movs	r3, #73	; 0x49
 80008ec:	763b      	strb	r3, [r7, #24]
 80008ee:	234f      	movs	r3, #79	; 0x4f
 80008f0:	767b      	strb	r3, [r7, #25]
 80008f2:	2330      	movs	r3, #48	; 0x30
 80008f4:	76bb      	strb	r3, [r7, #26]
 80008f6:	2332      	movs	r3, #50	; 0x32
 80008f8:	76fb      	strb	r3, [r7, #27]
 80008fa:	2330      	movs	r3, #48	; 0x30
 80008fc:	773b      	strb	r3, [r7, #28]
 80008fe:	2330      	movs	r3, #48	; 0x30
 8000900:	777b      	strb	r3, [r7, #29]
 8000902:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000906:	77bb      	strb	r3, [r7, #30]
 8000908:	2330      	movs	r3, #48	; 0x30
 800090a:	77fb      	strb	r3, [r7, #31]
 800090c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000910:	f887 3020 	strb.w	r3, [r7, #32]
		CDC_Transmit_FS(msg, sizeof(msg));
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	2109      	movs	r1, #9
 800091a:	4618      	mov	r0, r3
 800091c:	f007 ff90 	bl	8008840 <CDC_Transmit_FS>
		break;
 8000920:	e054      	b.n	80009cc <execIO+0x184>
	}

	case 11: // read pin state   io011050101 011 number state
	{ 		//set number pin
		readPin(&DIpin[numPin]);
 8000922:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4a2a      	ldr	r2, [pc, #168]	; (80009d8 <execIO+0x190>)
 8000930:	4413      	add	r3, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f86c 	bl	8000a10 <readPin>

		uint8_t m[] = {numPin + '0', DIpin[numPin].state + '0'};
 8000938:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800093c:	3330      	adds	r3, #48	; 0x30
 800093e:	b2db      	uxtb	r3, r3
 8000940:	753b      	strb	r3, [r7, #20]
 8000942:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000946:	4924      	ldr	r1, [pc, #144]	; (80009d8 <execIO+0x190>)
 8000948:	4613      	mov	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4413      	add	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	440b      	add	r3, r1
 8000952:	3308      	adds	r3, #8
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	3330      	adds	r3, #48	; 0x30
 8000958:	b2db      	uxtb	r3, r3
 800095a:	757b      	strb	r3, [r7, #21]
		uint8_t msg[] = {'I', 'O', '0', '2', '1', '0', m[0], '0', m[1]} ;
 800095c:	2349      	movs	r3, #73	; 0x49
 800095e:	723b      	strb	r3, [r7, #8]
 8000960:	234f      	movs	r3, #79	; 0x4f
 8000962:	727b      	strb	r3, [r7, #9]
 8000964:	2330      	movs	r3, #48	; 0x30
 8000966:	72bb      	strb	r3, [r7, #10]
 8000968:	2332      	movs	r3, #50	; 0x32
 800096a:	72fb      	strb	r3, [r7, #11]
 800096c:	2331      	movs	r3, #49	; 0x31
 800096e:	733b      	strb	r3, [r7, #12]
 8000970:	2330      	movs	r3, #48	; 0x30
 8000972:	737b      	strb	r3, [r7, #13]
 8000974:	7d3b      	ldrb	r3, [r7, #20]
 8000976:	73bb      	strb	r3, [r7, #14]
 8000978:	2330      	movs	r3, #48	; 0x30
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	7d7b      	ldrb	r3, [r7, #21]
 800097e:	743b      	strb	r3, [r7, #16]

		CDC_Transmit_FS(msg, sizeof(msg));
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	2109      	movs	r1, #9
 8000986:	4618      	mov	r0, r3
 8000988:	f007 ff5a 	bl	8008840 <CDC_Transmit_FS>
		break;
 800098c:	e01e      	b.n	80009cc <execIO+0x184>
	}

	case 01: // reset all pins
	{
		for (size_t i = 0; i < 8; i++) {
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000992:	e016      	b.n	80009c2 <execIO+0x17a>
			DOpin[i].state = 0;
 8000994:	490f      	ldr	r1, [pc, #60]	; (80009d4 <execIO+0x18c>)
 8000996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	440b      	add	r3, r1
 80009a2:	3308      	adds	r3, #8
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
			setPin(&DOpin[i]);
 80009a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009aa:	4613      	mov	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	4413      	add	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <execIO+0x18c>)
 80009b4:	4413      	add	r3, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f810 	bl	80009dc <setPin>
		for (size_t i = 0; i < 8; i++) {
 80009bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009be:	3301      	adds	r3, #1
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	d9e5      	bls.n	8000994 <execIO+0x14c>
		}
		break;
 80009c8:	e000      	b.n	80009cc <execIO+0x184>
	}
	default:
		break;
 80009ca:	bf00      	nop
	}
}
 80009cc:	bf00      	nop
 80009ce:	3730      	adds	r7, #48	; 0x30
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000018c 	.word	0x2000018c
 80009d8:	200001ec 	.word	0x200001ec

080009dc <setPin>:

void setPin(IO_Pin *pin) {
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	if (pin->state == 1) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7a1b      	ldrb	r3, [r3, #8]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d105      	bne.n	80009f8 <setPin+0x1c>
		pin->port->BSRR = pin->pin;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	6852      	ldr	r2, [r2, #4]
 80009f4:	619a      	str	r2, [r3, #24]
	} else
		pin->port->BSRR = (uint32_t) pin->pin << 16U;
}
 80009f6:	e005      	b.n	8000a04 <setPin+0x28>
		pin->port->BSRR = (uint32_t) pin->pin << 16U;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	0412      	lsls	r2, r2, #16
 8000a02:	619a      	str	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <readPin>:

void readPin(IO_Pin *pin) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	if ((pin->port->IDR & pin->pin) != (uint32_t) 0) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	691a      	ldr	r2, [r3, #16]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4013      	ands	r3, r2
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <readPin+0x20>
		pin->state = 1;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	721a      	strb	r2, [r3, #8]
	} else {
		pin->state = 0;
	}
}
 8000a2e:	e002      	b.n	8000a36 <readPin+0x26>
		pin->state = 0;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	721a      	strb	r2, [r3, #8]
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a46:	f000 fc01 	bl	800124c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a4a:	f000 f80d 	bl	8000a68 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a4e:	f000 f91d 	bl	8000c8c <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000a52:	f007 fdfb 	bl	800864c <MX_USB_DEVICE_Init>
	MX_USART2_UART_Init();
 8000a56:	f000 f8e9 	bl	8000c2c <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8000a5a:	f000 f8bd 	bl	8000bd8 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8000a5e:	f000 f86d 	bl	8000b3c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	cmdInit();
 8000a62:	f7ff fdd3 	bl	800060c <cmdInit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000a66:	e7fe      	b.n	8000a66 <main+0x24>

08000a68 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	; 0x50
 8000a6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	2230      	movs	r2, #48	; 0x30
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f008 fcec 	bl	8009454 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <SystemClock_Config+0xcc>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a27      	ldr	r2, [pc, #156]	; (8000b34 <SystemClock_Config+0xcc>)
 8000a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <SystemClock_Config+0xcc>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <SystemClock_Config+0xd0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <SystemClock_Config+0xd0>)
 8000ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <SystemClock_Config+0xd0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000ad8:	2319      	movs	r3, #25
 8000ada:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000adc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ae0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 fa3e 	bl	8002f70 <HAL_RCC_OscConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0x96>
		Error_Handler();
 8000afa:	f000 f9a7 	bl	8000e4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000afe:	230f      	movs	r3, #15
 8000b00:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b02:	2302      	movs	r3, #2
 8000b04:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fca0 	bl	8003460 <HAL_RCC_ClockConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xc2>
		Error_Handler();
 8000b26:	f000 f991 	bl	8000e4c <Error_Handler>
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	3750      	adds	r7, #80	; 0x50
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40007000 	.word	0x40007000

08000b3c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_TIM3_Init+0x94>)
 8000b5a:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <MX_TIM3_Init+0x98>)
 8000b5c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_TIM3_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_TIM3_Init+0x94>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_TIM3_Init+0x94>)
 8000b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b70:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <MX_TIM3_Init+0x94>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_TIM3_Init+0x94>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000b7e:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <MX_TIM3_Init+0x94>)
 8000b80:	f002 fe4e 	bl	8003820 <HAL_TIM_Base_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM3_Init+0x52>
		Error_Handler();
 8000b8a:	f000 f95f 	bl	8000e4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b92:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_TIM3_Init+0x94>)
 8000b9c:	f002 ff97 	bl	8003ace <HAL_TIM_ConfigClockSource>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM3_Init+0x6e>
		Error_Handler();
 8000ba6:	f000 f951 	bl	8000e4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_TIM3_Init+0x94>)
 8000bb8:	f003 f99c 	bl	8003ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000bc2:	f000 f943 	bl	8000e4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000024c 	.word	0x2000024c
 8000bd4:	40000400 	.word	0x40000400

08000bd8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_USART1_UART_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 230400;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000be8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c10:	f003 f9f2 	bl	8003ff8 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000c1a:	f000 f917 	bl	8000e4c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000294 	.word	0x20000294
 8000c28:	40011000 	.word	0x40011000

08000c2c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <MX_USART2_UART_Init+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c64:	f003 f9c8 	bl	8003ff8 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000c6e:	f000 f8ed 	bl	8000e4c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
	USART2->CR1 |= USART_CR1_RXNEIE;
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <MX_USART2_UART_Init+0x5c>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <MX_USART2_UART_Init+0x5c>)
 8000c78:	f043 0320 	orr.w	r3, r3, #32
 8000c7c:	60d3      	str	r3, [r2, #12]

	/* USER CODE END USART2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200002d8 	.word	0x200002d8
 8000c88:	40004400 	.word	0x40004400

08000c8c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b65      	ldr	r3, [pc, #404]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a64      	ldr	r2, [pc, #400]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a5d      	ldr	r2, [pc, #372]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a56      	ldr	r2, [pc, #344]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b54      	ldr	r3, [pc, #336]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b50      	ldr	r3, [pc, #320]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a4f      	ldr	r2, [pc, #316]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <MX_GPIO_Init+0x1b0>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d18:	4849      	ldr	r0, [pc, #292]	; (8000e40 <MX_GPIO_Init+0x1b4>)
 8000d1a:	f000 fe55 	bl	80019c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7,
 8000d1e:	2200      	movs	r2, #0
 8000d20:	21f0      	movs	r1, #240	; 0xf0
 8000d22:	4848      	ldr	r0, [pc, #288]	; (8000e44 <MX_GPIO_Init+0x1b8>)
 8000d24:	f000 fe50 	bl	80019c8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f240 5117 	movw	r1, #1303	; 0x517
 8000d2e:	4846      	ldr	r0, [pc, #280]	; (8000e48 <MX_GPIO_Init+0x1bc>)
 8000d30:	f000 fe4a 	bl	80019c8 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10 | rs_485_trig_Pin
					| error_out_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : led_Pin */
	GPIO_InitStruct.Pin = led_Pin;
 8000d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	483c      	ldr	r0, [pc, #240]	; (8000e40 <MX_GPIO_Init+0x1b4>)
 8000d4e:	f000 fcb7 	bl	80016c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : button_Pin */
	GPIO_InitStruct.Pin = button_Pin;
 8000d52:	2301      	movs	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d5a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4837      	ldr	r0, [pc, #220]	; (8000e44 <MX_GPIO_Init+0x1b8>)
 8000d68:	f000 fcaa 	bl	80016c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8000d6c:	f240 7302 	movw	r3, #1794	; 0x702
 8000d70:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4830      	ldr	r0, [pc, #192]	; (8000e44 <MX_GPIO_Init+0x1b8>)
 8000d82:	f000 fc9d 	bl	80016c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000d86:	23f0      	movs	r3, #240	; 0xf0
 8000d88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4829      	ldr	r0, [pc, #164]	; (8000e44 <MX_GPIO_Init+0x1b8>)
 8000d9e:	f000 fc8f 	bl	80016c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB10
	 error_out_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_10
 8000da2:	f240 5307 	movw	r3, #1287	; 0x507
 8000da6:	617b      	str	r3, [r7, #20]
			| error_out_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4823      	ldr	r0, [pc, #140]	; (8000e48 <MX_GPIO_Init+0x1bc>)
 8000dbc:	f000 fc80 	bl	80016c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15
	 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 8000dc0:	f24f 0320 	movw	r3, #61472	; 0xf020
 8000dc4:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481c      	ldr	r0, [pc, #112]	; (8000e48 <MX_GPIO_Init+0x1bc>)
 8000dd6:	f000 fc73 	bl	80016c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : rs_485_trig_Pin */
	GPIO_InitStruct.Pin = rs_485_trig_Pin;
 8000dda:	2310      	movs	r3, #16
 8000ddc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de6:	2302      	movs	r3, #2
 8000de8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(rs_485_trig_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4815      	ldr	r0, [pc, #84]	; (8000e48 <MX_GPIO_Init+0x1bc>)
 8000df2:	f000 fc65 	bl	80016c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : error_in_Pin */
	GPIO_InitStruct.Pin = error_in_Pin;
 8000df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e00:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(error_in_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480e      	ldr	r0, [pc, #56]	; (8000e48 <MX_GPIO_Init+0x1bc>)
 8000e0e:	f000 fc57 	bl	80016c0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2006      	movs	r0, #6
 8000e18:	f000 fb89 	bl	800152e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e1c:	2006      	movs	r0, #6
 8000e1e:	f000 fba2 	bl	8001566 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2017      	movs	r0, #23
 8000e28:	f000 fb81 	bl	800152e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e2c:	2017      	movs	r0, #23
 8000e2e:	f000 fb9a 	bl	8001566 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400

08000e4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_TIM_Base_MspInit+0x48>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d115      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	201d      	movs	r0, #29
 8000edc:	f000 fb27 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ee0:	201d      	movs	r0, #29
 8000ee2:	f000 fb40 	bl	8001566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40000400 	.word	0x40000400
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	; 0x30
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a49      	ldr	r2, [pc, #292]	; (800103c <HAL_UART_MspInit+0x144>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d153      	bne.n	8000fc2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	4b48      	ldr	r3, [pc, #288]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a47      	ldr	r2, [pc, #284]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b45      	ldr	r3, [pc, #276]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	4b41      	ldr	r3, [pc, #260]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a40      	ldr	r2, [pc, #256]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a39      	ldr	r2, [pc, #228]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b37      	ldr	r3, [pc, #220]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f80:	2307      	movs	r3, #7
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	482e      	ldr	r0, [pc, #184]	; (8001044 <HAL_UART_MspInit+0x14c>)
 8000f8c:	f000 fb98 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f90:	2308      	movs	r3, #8
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4827      	ldr	r0, [pc, #156]	; (8001048 <HAL_UART_MspInit+0x150>)
 8000fac:	f000 fb88 	bl	80016c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2025      	movs	r0, #37	; 0x25
 8000fb6:	f000 faba 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fba:	2025      	movs	r0, #37	; 0x25
 8000fbc:	f000 fad3 	bl	8001566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fc0:	e038      	b.n	8001034 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a21      	ldr	r2, [pc, #132]	; (800104c <HAL_UART_MspInit+0x154>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d133      	bne.n	8001034 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	4a13      	ldr	r2, [pc, #76]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_UART_MspInit+0x148>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001004:	230c      	movs	r3, #12
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001014:	2307      	movs	r3, #7
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <HAL_UART_MspInit+0x14c>)
 8001020:	f000 fb4e 	bl	80016c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2026      	movs	r0, #38	; 0x26
 800102a:	f000 fa80 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800102e:	2026      	movs	r0, #38	; 0x26
 8001030:	f000 fa99 	bl	8001566 <HAL_NVIC_EnableIRQ>
}
 8001034:	bf00      	nop
 8001036:	3730      	adds	r7, #48	; 0x30
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40011000 	.word	0x40011000
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	40004400 	.word	0x40004400

08001050 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>
	...

08001058 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	uint8_t msg[] = "hard fault mcu";
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <HardFault_Handler+0x24>)
 8001060:	463c      	mov	r4, r7
 8001062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001064:	c407      	stmia	r4!, {r0, r1, r2}
 8001066:	8023      	strh	r3, [r4, #0]
 8001068:	3402      	adds	r4, #2
 800106a:	0c1b      	lsrs	r3, r3, #16
 800106c:	7023      	strb	r3, [r4, #0]
	CDC_Transmit_FS(msg, sizeof(msg));
 800106e:	463b      	mov	r3, r7
 8001070:	210f      	movs	r1, #15
 8001072:	4618      	mov	r0, r3
 8001074:	f007 fbe4 	bl	8008840 <CDC_Transmit_FS>
	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001078:	e7fe      	b.n	8001078 <HardFault_Handler+0x20>
 800107a:	bf00      	nop
 800107c:	080095a8 	.word	0x080095a8

08001080 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80010c0:	f000 f916 	bl	80012f0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(button_Pin);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 fcae 	bl	8001a30 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */
	uint8_t msg[] = "interterupt mcu 0";
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <EXTI0_IRQHandler+0x2c>)
 80010d6:	1d3c      	adds	r4, r7, #4
 80010d8:	461d      	mov	r5, r3
 80010da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010de:	682b      	ldr	r3, [r5, #0]
 80010e0:	8023      	strh	r3, [r4, #0]
	CDC_Transmit_FS(msg, sizeof(msg));
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2112      	movs	r1, #18
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 fbaa 	bl	8008840 <CDC_Transmit_FS>
	/* USER CODE END EXTI0_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bdb0      	pop	{r4, r5, r7, pc}
 80010f4:	080095b8 	.word	0x080095b8

080010f8 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(error_in_Pin);
 80010fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001100:	f000 fc96 	bl	8001a30 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800110c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <TIM3_IRQHandler+0x18>)
 8001112:	f000 fc72 	bl	80019fa <HAL_GPIO_TogglePin>

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8001116:	4803      	ldr	r0, [pc, #12]	; (8001124 <TIM3_IRQHandler+0x1c>)
 8001118:	f002 fbd1 	bl	80038be <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020800 	.word	0x40020800
 8001124:	2000024c 	.word	0x2000024c

08001128 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <USART1_IRQHandler+0x10>)
 800112e:	f002 ffb1 	bl	8004094 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000294 	.word	0x20000294

0800113c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	transmitUART();
 8001140:	f7ff fa34 	bl	80005ac <transmitUART>
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <USART2_IRQHandler+0x14>)
 8001146:	f002 ffa5 	bl	8004094 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200002d8 	.word	0x200002d8

08001154 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <OTG_FS_IRQHandler+0x10>)
 800115a:	f000 fddc 	bl	8001d16 <HAL_PCD_IRQHandler>
	/* USER CODE BEGIN OTG_FS_IRQn 1 */

	/* USER CODE END OTG_FS_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20001834 	.word	0x20001834

08001168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <_sbrk+0x5c>)
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <_sbrk+0x60>)
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_sbrk+0x64>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <_sbrk+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	d207      	bcs.n	80011a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001198:	f008 f974 	bl	8009484 <__errno>
 800119c:	4603      	mov	r3, r0
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a6:	e009      	b.n	80011bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <_sbrk+0x64>)
 80011b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20020000 	.word	0x20020000
 80011c8:	00000400 	.word	0x00000400
 80011cc:	2000034c 	.word	0x2000034c
 80011d0:	200020a8 	.word	0x200020a8

080011d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <SystemInit+0x20>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <SystemInit+0x20>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001230 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011fe:	490e      	ldr	r1, [pc, #56]	; (8001238 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001214:	4c0b      	ldr	r4, [pc, #44]	; (8001244 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001222:	f7ff ffd7 	bl	80011d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001226:	f008 f933 	bl	8009490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122a:	f7ff fc0a 	bl	8000a42 <main>
  bx  lr    
 800122e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 800123c:	08009760 	.word	0x08009760
  ldr r2, =_sbss
 8001240:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001244:	200020a8 	.word	0x200020a8

08001248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC_IRQHandler>
	...

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <HAL_Init+0x40>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_Init+0x40>)
 8001262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_Init+0x40>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f94f 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	200f      	movs	r0, #15
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fdea 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023c00 	.word	0x40023c00

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f967 	bl	8001582 <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012cc:	f000 f92f 	bl	800152e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000024 	.word	0x20000024
 80012e8:	2000002c 	.word	0x2000002c
 80012ec:	20000028 	.word	0x20000028

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	2000002c 	.word	0x2000002c
 8001314:	20000350 	.word	0x20000350

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000350 	.word	0x20000350

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000002c 	.word	0x2000002c

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <__NVIC_EnableIRQ+0x38>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e4:	d301      	bcc.n	80014ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00f      	b.n	800150a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <SysTick_Config+0x40>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f2:	210f      	movs	r1, #15
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f8:	f7ff ff8e 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <SysTick_Config+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SysTick_Config+0x40>)
 8001504:	2207      	movs	r2, #7
 8001506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff29 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001540:	f7ff ff3e 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 8001544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f7ff ff8e 	bl	800146c <NVIC_EncodePriority>
 8001550:	4602      	mov	r2, r0
 8001552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff5d 	bl	8001418 <__NVIC_SetPriority>
}
 800155e:	bf00      	nop
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff31 	bl	80013dc <__NVIC_EnableIRQ>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffa2 	bl	80014d4 <SysTick_Config>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff feb6 	bl	8001318 <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d008      	beq.n	80015cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e052      	b.n	8001672 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0216 	bic.w	r2, r2, #22
 80015da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <HAL_DMA_Abort+0x62>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0208 	bic.w	r2, r2, #8
 800160a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161c:	e013      	b.n	8001646 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800161e:	f7ff fe7b 	bl	8001318 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b05      	cmp	r3, #5
 800162a:	d90c      	bls.n	8001646 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2220      	movs	r2, #32
 8001630:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2203      	movs	r2, #3
 8001636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e015      	b.n	8001672 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1e4      	bne.n	800161e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001658:	223f      	movs	r2, #63	; 0x3f
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d004      	beq.n	8001698 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e00c      	b.n	80016b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2205      	movs	r2, #5
 800169c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e159      	b.n	8001990 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 8148 	bne.w	800198a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d005      	beq.n	8001712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170e:	2b02      	cmp	r3, #2
 8001710:	d130      	bne.n	8001774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 0201 	and.w	r2, r3, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b03      	cmp	r3, #3
 800177e:	d017      	beq.n	80017b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d123      	bne.n	8001804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	69b9      	ldr	r1, [r7, #24]
 8001800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0203 	and.w	r2, r3, #3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a2 	beq.w	800198a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b57      	ldr	r3, [pc, #348]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a56      	ldr	r2, [pc, #344]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b54      	ldr	r3, [pc, #336]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001862:	4a52      	ldr	r2, [pc, #328]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a49      	ldr	r2, [pc, #292]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d019      	beq.n	80018c2 <HAL_GPIO_Init+0x202>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a48      	ldr	r2, [pc, #288]	; (80019b4 <HAL_GPIO_Init+0x2f4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0x1fe>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a47      	ldr	r2, [pc, #284]	; (80019b8 <HAL_GPIO_Init+0x2f8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00d      	beq.n	80018ba <HAL_GPIO_Init+0x1fa>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a46      	ldr	r2, [pc, #280]	; (80019bc <HAL_GPIO_Init+0x2fc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x1f6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <HAL_GPIO_Init+0x300>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_GPIO_Init+0x1f2>
 80018ae:	2304      	movs	r3, #4
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018b2:	2307      	movs	r3, #7
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4935      	ldr	r1, [pc, #212]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HAL_GPIO_Init+0x304>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001906:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190c:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_GPIO_Init+0x304>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001930:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195a:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_GPIO_Init+0x304>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f aea2 	bls.w	80016dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40013c00 	.word	0x40013c00

080019c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d8:	787b      	ldrb	r3, [r7, #1]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e4:	e003      	b.n	80019ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019e6:	887b      	ldrh	r3, [r7, #2]
 80019e8:	041a      	lsls	r2, r3, #16
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	619a      	str	r2, [r3, #24]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b085      	sub	sp, #20
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a0c:	887a      	ldrh	r2, [r7, #2]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	041a      	lsls	r2, r3, #16
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	887b      	ldrh	r3, [r7, #2]
 8001a1a:	400b      	ands	r3, r1
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	619a      	str	r2, [r3, #24]
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f806 	bl	8001a60 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40013c00 	.word	0x40013c00

08001a60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a78:	b08f      	sub	sp, #60	; 0x3c
 8001a7a:	af0a      	add	r7, sp, #40	; 0x28
 8001a7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e10f      	b.n	8001ca8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f007 f814 	bl	8008ad0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2203      	movs	r2, #3
 8001aac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fabf 	bl	800504a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	687e      	ldr	r6, [r7, #4]
 8001ad4:	466d      	mov	r5, sp
 8001ad6:	f106 0410 	add.w	r4, r6, #16
 8001ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ae6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aea:	1d33      	adds	r3, r6, #4
 8001aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aee:	6838      	ldr	r0, [r7, #0]
 8001af0:	f003 f996 	bl	8004e20 <USB_CoreInit>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0d0      	b.n	8001ca8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 faad 	bl	800506c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e04a      	b.n	8001bae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	333d      	adds	r3, #61	; 0x3d
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	333c      	adds	r3, #60	; 0x3c
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	b298      	uxth	r0, r3
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	3344      	adds	r3, #68	; 0x44
 8001b54:	4602      	mov	r2, r0
 8001b56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	3340      	adds	r3, #64	; 0x40
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	3348      	adds	r3, #72	; 0x48
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	334c      	adds	r3, #76	; 0x4c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3354      	adds	r3, #84	; 0x54
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	3301      	adds	r3, #1
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d3af      	bcc.n	8001b18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	e044      	b.n	8001c48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	3301      	adds	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3b5      	bcc.n	8001bbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	687e      	ldr	r6, [r7, #4]
 8001c5a:	466d      	mov	r5, sp
 8001c5c:	f106 0410 	add.w	r4, r6, #16
 8001c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c70:	1d33      	adds	r3, r6, #4
 8001c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c74:	6838      	ldr	r0, [r7, #0]
 8001c76:	f003 fa45 	bl	8005104 <USB_DevInit>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e00d      	b.n	8001ca8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 fb94 	bl	80063ce <USB_DevDisconnect>

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_PCD_Start+0x1c>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e020      	b.n	8001d0e <HAL_PCD_Start+0x5e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d109      	bne.n	8001cf0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d005      	beq.n	8001cf0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 f997 	bl	8005028 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f004 fb44 	bl	800638c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d16:	b590      	push	{r4, r7, lr}
 8001d18:	b08d      	sub	sp, #52	; 0x34
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 fc02 	bl	8006536 <USB_GetMode>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f040 848a 	bne.w	800264e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 fb66 	bl	8006410 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8480 	beq.w	800264c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f004 fb53 	bl	8006410 <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d107      	bne.n	8001d84 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f002 0202 	and.w	r2, r2, #2
 8001d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 fb41 	bl	8006410 <USB_ReadInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d161      	bne.n	8001e5c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0210 	bic.w	r2, r2, #16
 8001da6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	0c5b      	lsrs	r3, r3, #17
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d124      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d035      	beq.n	8001e4c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	6a38      	ldr	r0, [r7, #32]
 8001df4:	f004 f978 	bl	80060e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e04:	441a      	add	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e16:	441a      	add	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	621a      	str	r2, [r3, #32]
 8001e1c:	e016      	b.n	8001e4c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	0c5b      	lsrs	r3, r3, #17
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d110      	bne.n	8001e4c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e30:	2208      	movs	r2, #8
 8001e32:	4619      	mov	r1, r3
 8001e34:	6a38      	ldr	r0, [r7, #32]
 8001e36:	f004 f957 	bl	80060e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	6a1a      	ldr	r2, [r3, #32]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e46:	441a      	add	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0210 	orr.w	r2, r2, #16
 8001e5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 fad5 	bl	8006410 <USB_ReadInterrupts>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e70:	f040 80a7 	bne.w	8001fc2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f004 fada 	bl	8006436 <USB_ReadDevAllOutEpInterrupt>
 8001e82:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e84:	e099      	b.n	8001fba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 808e 	beq.w	8001fae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 fafe 	bl	800649e <USB_ReadDevOutEPInterrupt>
 8001ea2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00c      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fec2 	bl	8002c4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00c      	beq.n	8001eec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 ff98 	bl	8002e1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f02:	461a      	mov	r2, r3
 8001f04:	2310      	movs	r3, #16
 8001f06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d030      	beq.n	8001f74 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b80      	cmp	r3, #128	; 0x80
 8001f1c:	d109      	bne.n	8001f32 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f30:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	3304      	adds	r3, #4
 8001f46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	78db      	ldrb	r3, [r3, #3]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d108      	bne.n	8001f62 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2200      	movs	r2, #0
 8001f54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f006 feb3 	bl	8008cc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2302      	movs	r3, #2
 8001f72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	085b      	lsrs	r3, r3, #1
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f47f af62 	bne.w	8001e86 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 fa22 	bl	8006410 <USB_ReadInterrupts>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fd6:	f040 80db 	bne.w	8002190 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 fa43 	bl	800646a <USB_ReadDevAllInEpInterrupt>
 8001fe4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001fea:	e0cd      	b.n	8002188 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80c2 	beq.w	800217c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f004 fa69 	bl	80064da <USB_ReadDevInEPInterrupt>
 8002008:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d057      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	2201      	movs	r2, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	69f9      	ldr	r1, [r7, #28]
 8002030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002034:	4013      	ands	r3, r2
 8002036:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	4413      	add	r3, r2
 8002040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002044:	461a      	mov	r2, r3
 8002046:	2301      	movs	r3, #1
 8002048:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d132      	bne.n	80020b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	334c      	adds	r3, #76	; 0x4c
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4403      	add	r3, r0
 8002072:	3348      	adds	r3, #72	; 0x48
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4419      	add	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4403      	add	r3, r0
 8002086:	334c      	adds	r3, #76	; 0x4c
 8002088:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	2b00      	cmp	r3, #0
 800208e:	d113      	bne.n	80020b8 <HAL_PCD_IRQHandler+0x3a2>
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	3354      	adds	r3, #84	; 0x54
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d108      	bne.n	80020b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020b0:	461a      	mov	r2, r3
 80020b2:	2101      	movs	r1, #1
 80020b4:	f004 fa70 	bl	8006598 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f006 fd87 	bl	8008bd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020da:	461a      	mov	r2, r3
 80020dc:	2308      	movs	r3, #8
 80020de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020f6:	461a      	mov	r2, r3
 80020f8:	2310      	movs	r3, #16
 80020fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002112:	461a      	mov	r2, r3
 8002114:	2340      	movs	r3, #64	; 0x40
 8002116:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d023      	beq.n	800216a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002124:	6a38      	ldr	r0, [r7, #32]
 8002126:	f003 f951 	bl	80053cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800212a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	3338      	adds	r3, #56	; 0x38
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	3304      	adds	r3, #4
 800213c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d108      	bne.n	8002158 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2200      	movs	r2, #0
 800214a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f006 fdca 	bl	8008cec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002164:	461a      	mov	r2, r3
 8002166:	2302      	movs	r3, #2
 8002168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fcdb 	bl	8002b32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	3301      	adds	r3, #1
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	2b00      	cmp	r3, #0
 800218c:	f47f af2e 	bne.w	8001fec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f004 f93b 	bl	8006410 <USB_ReadInterrupts>
 800219a:	4603      	mov	r3, r0
 800219c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021a4:	d122      	bne.n	80021ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021cc:	2100      	movs	r1, #0
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 fec2 	bl	8002f58 <HAL_PCDEx_LPM_Callback>
 80021d4:	e002      	b.n	80021dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f006 fd68 	bl	8008cac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 f90d 	bl	8006410 <USB_ReadInterrupts>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002200:	d112      	bne.n	8002228 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f006 fd24 	bl	8008c60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002226:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f004 f8ef 	bl	8006410 <USB_ReadInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223c:	f040 80b7 	bne.w	80023ae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2110      	movs	r1, #16
 800225a:	4618      	mov	r0, r3
 800225c:	f003 f8b6 	bl	80053cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002264:	e046      	b.n	80022f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002272:	461a      	mov	r2, r3
 8002274:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002278:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800228a:	0151      	lsls	r1, r2, #5
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	440a      	add	r2, r1
 8002290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002294:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002298:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a6:	461a      	mov	r2, r3
 80022a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022be:	0151      	lsls	r1, r2, #5
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	440a      	add	r2, r1
 80022c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022de:	0151      	lsls	r1, r2, #5
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	440a      	add	r2, r1
 80022e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	3301      	adds	r3, #1
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3b3      	bcc.n	8002266 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800230c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002310:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	2b00      	cmp	r3, #0
 8002318:	d016      	beq.n	8002348 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800232a:	f043 030b 	orr.w	r3, r3, #11
 800232e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002340:	f043 030b 	orr.w	r3, r3, #11
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	e015      	b.n	8002374 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002356:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800235a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800235e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236e:	f043 030b 	orr.w	r3, r3, #11
 8002372:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002382:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002386:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002398:	461a      	mov	r2, r3
 800239a:	f004 f8fd 	bl	8006598 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f004 f82c 	bl	8006410 <USB_ReadInterrupts>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c2:	d124      	bne.n	800240e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f004 f8c2 	bl	8006552 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 f877 	bl	80054c6 <USB_GetDevSpeed>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681c      	ldr	r4, [r3, #0]
 80023e4:	f001 f9e8 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 80023e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	4620      	mov	r0, r4
 80023f4:	f002 fd76 	bl	8004ee4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f006 fc12 	bl	8008c22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800240c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f003 fffc 	bl	8006410 <USB_ReadInterrupts>
 8002418:	4603      	mov	r3, r0
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b08      	cmp	r3, #8
 8002420:	d10a      	bne.n	8002438 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f006 fbef 	bl	8008c06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f002 0208 	and.w	r2, r2, #8
 8002436:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f003 ffe7 	bl	8006410 <USB_ReadInterrupts>
 8002442:	4603      	mov	r3, r0
 8002444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002448:	2b80      	cmp	r3, #128	; 0x80
 800244a:	d122      	bne.n	8002492 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002458:	2301      	movs	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
 800245c:	e014      	b.n	8002488 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4619      	mov	r1, r3
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fb27 	bl	8002ad0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	3301      	adds	r3, #1
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248e:	429a      	cmp	r2, r3
 8002490:	d3e5      	bcc.n	800245e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f003 ffba 	bl	8006410 <USB_ReadInterrupts>
 800249c:	4603      	mov	r3, r0
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024a6:	d13b      	bne.n	8002520 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024a8:	2301      	movs	r3, #1
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	e02b      	b.n	8002506 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3340      	adds	r3, #64	; 0x40
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d115      	bne.n	8002500 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80024d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	da12      	bge.n	8002500 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	333f      	adds	r3, #63	; 0x3f
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	4619      	mov	r1, r3
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fae8 	bl	8002ad0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	3301      	adds	r3, #1
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	429a      	cmp	r2, r3
 800250e:	d3ce      	bcc.n	80024ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800251e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 ff73 	bl	8006410 <USB_ReadInterrupts>
 800252a:	4603      	mov	r3, r0
 800252c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002534:	d155      	bne.n	80025e2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002536:	2301      	movs	r3, #1
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
 800253a:	e045      	b.n	80025c8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d12e      	bne.n	80025c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002564:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002566:	2b00      	cmp	r3, #0
 8002568:	da2b      	bge.n	80025c2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002576:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800257a:	429a      	cmp	r2, r3
 800257c:	d121      	bne.n	80025c2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025be:	6053      	str	r3, [r2, #4]
            break;
 80025c0:	e007      	b.n	80025d2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	3301      	adds	r3, #1
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d3b4      	bcc.n	800253c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 ff12 	bl	8006410 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f6:	d10a      	bne.n	800260e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f006 fb89 	bl	8008d10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800260c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f003 fefc 	bl	8006410 <USB_ReadInterrupts>
 8002618:	4603      	mov	r3, r0
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b04      	cmp	r3, #4
 8002620:	d115      	bne.n	800264e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f006 fb79 	bl	8008d2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6859      	ldr	r1, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	e000      	b.n	800264e <HAL_PCD_IRQHandler+0x938>
      return;
 800264c:	bf00      	nop
    }
  }
}
 800264e:	3734      	adds	r7, #52	; 0x34
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}

08002654 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_PCD_SetAddress+0x1a>
 800266a:	2302      	movs	r3, #2
 800266c:	e013      	b.n	8002696 <HAL_PCD_SetAddress+0x42>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f003 fe5a 	bl	8006340 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	4608      	mov	r0, r1
 80026a8:	4611      	mov	r1, r2
 80026aa:	461a      	mov	r2, r3
 80026ac:	4603      	mov	r3, r0
 80026ae:	70fb      	strb	r3, [r7, #3]
 80026b0:	460b      	mov	r3, r1
 80026b2:	803b      	strh	r3, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	da0f      	bge.n	80026e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	f003 020f 	and.w	r2, r3, #15
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	3338      	adds	r3, #56	; 0x38
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	3304      	adds	r3, #4
 80026da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	705a      	strb	r2, [r3, #1]
 80026e2:	e00f      	b.n	8002704 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 020f 	and.w	r2, r3, #15
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	b2da      	uxtb	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002710:	883a      	ldrh	r2, [r7, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	78ba      	ldrb	r2, [r7, #2]
 800271a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	785b      	ldrb	r3, [r3, #1]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800272e:	78bb      	ldrb	r3, [r7, #2]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d102      	bne.n	800273a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_PCD_EP_Open+0xaa>
 8002744:	2302      	movs	r3, #2
 8002746:	e00e      	b.n	8002766 <HAL_PCD_EP_Open+0xc8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	4618      	mov	r0, r3
 8002758:	f002 feda 	bl	8005510 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002764:	7afb      	ldrb	r3, [r7, #11]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800277a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da0f      	bge.n	80027a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	f003 020f 	and.w	r2, r3, #15
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	3338      	adds	r3, #56	; 0x38
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	3304      	adds	r3, #4
 8002798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	705a      	strb	r2, [r3, #1]
 80027a0:	e00f      	b.n	80027c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	f003 020f 	and.w	r2, r3, #15
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_PCD_EP_Close+0x6e>
 80027d8:	2302      	movs	r3, #2
 80027da:	e00e      	b.n	80027fa <HAL_PCD_EP_Close+0x8c>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68f9      	ldr	r1, [r7, #12]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f002 ff18 	bl	8005620 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	460b      	mov	r3, r1
 8002810:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002812:	7afb      	ldrb	r3, [r7, #11]
 8002814:	f003 020f 	and.w	r2, r3, #15
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	3304      	adds	r3, #4
 800282a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2200      	movs	r2, #0
 800283c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002844:	7afb      	ldrb	r3, [r7, #11]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	b2da      	uxtb	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d102      	bne.n	800285e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800285e:	7afb      	ldrb	r3, [r7, #11]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	6979      	ldr	r1, [r7, #20]
 8002876:	f003 f9f7 	bl	8005c68 <USB_EP0StartXfer>
 800287a:	e008      	b.n	800288e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	6979      	ldr	r1, [r7, #20]
 800288a:	f002 ffa5 	bl	80057d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	f003 020f 	and.w	r2, r3, #15
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	460b      	mov	r3, r1
 80028d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d8:	7afb      	ldrb	r3, [r7, #11]
 80028da:	f003 020f 	and.w	r2, r3, #15
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	3338      	adds	r3, #56	; 0x38
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2200      	movs	r2, #0
 8002900:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2201      	movs	r2, #1
 8002906:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002908:	7afb      	ldrb	r3, [r7, #11]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	b2da      	uxtb	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d102      	bne.n	8002922 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002922:	7afb      	ldrb	r3, [r7, #11]
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	2b00      	cmp	r3, #0
 800292a:	d109      	bne.n	8002940 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	6979      	ldr	r1, [r7, #20]
 800293a:	f003 f995 	bl	8005c68 <USB_EP0StartXfer>
 800293e:	e008      	b.n	8002952 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	6979      	ldr	r1, [r7, #20]
 800294e:	f002 ff43 	bl	80057d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f003 020f 	and.w	r2, r3, #15
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	429a      	cmp	r2, r3
 8002974:	d901      	bls.n	800297a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e050      	b.n	8002a1c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800297a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297e:	2b00      	cmp	r3, #0
 8002980:	da0f      	bge.n	80029a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	f003 020f 	and.w	r2, r3, #15
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	3338      	adds	r3, #56	; 0x38
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	3304      	adds	r3, #4
 8002998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	705a      	strb	r2, [r3, #1]
 80029a0:	e00d      	b.n	80029be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	3304      	adds	r3, #4
 80029b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_PCD_EP_SetStall+0x82>
 80029da:	2302      	movs	r3, #2
 80029dc:	e01e      	b.n	8002a1c <HAL_PCD_EP_SetStall+0xc0>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68f9      	ldr	r1, [r7, #12]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fbd3 	bl	8006198 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	b2d9      	uxtb	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f003 fdc3 	bl	8006598 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d901      	bls.n	8002a42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e042      	b.n	8002ac8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	da0f      	bge.n	8002a6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	3338      	adds	r3, #56	; 0x38
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3304      	adds	r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	705a      	strb	r2, [r3, #1]
 8002a68:	e00f      	b.n	8002a8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 020f 	and.w	r2, r3, #15
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	3304      	adds	r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_PCD_EP_ClrStall+0x86>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e00e      	b.n	8002ac8 <HAL_PCD_EP_ClrStall+0xa4>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 fbdb 	bl	8006274 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	da0c      	bge.n	8002afe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	3338      	adds	r3, #56	; 0x38
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	3304      	adds	r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e00c      	b.n	8002b18 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 020f 	and.w	r2, r3, #15
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	3304      	adds	r3, #4
 8002b16:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68f9      	ldr	r1, [r7, #12]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 f9fa 	bl	8005f18 <USB_EPStopXfer>
 8002b24:	4603      	mov	r3, r0
 8002b26:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b28:	7afb      	ldrb	r3, [r7, #11]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b08a      	sub	sp, #40	; 0x28
 8002b36:	af02      	add	r7, sp, #8
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	3338      	adds	r3, #56	; 0x38
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d901      	bls.n	8002b6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e06c      	b.n	8002c44 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d902      	bls.n	8002b86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3303      	adds	r3, #3
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b8e:	e02b      	b.n	8002be8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d902      	bls.n	8002bac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	3303      	adds	r3, #3
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6919      	ldr	r1, [r3, #16]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	4603      	mov	r3, r0
 8002bca:	6978      	ldr	r0, [r7, #20]
 8002bcc:	f003 fa4e 	bl	800606c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	441a      	add	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a1a      	ldr	r2, [r3, #32]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	441a      	add	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d809      	bhi.n	8002c12 <PCD_WriteEmptyTxFifo+0xe0>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d203      	bcs.n	8002c12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1be      	bne.n	8002b90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d811      	bhi.n	8002c42 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	2201      	movs	r2, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	6939      	ldr	r1, [r7, #16]
 8002c3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c3e:	4013      	ands	r3, r2
 8002c40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	333c      	adds	r3, #60	; 0x3c
 8002c64:	3304      	adds	r3, #4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d17b      	bne.n	8002d7a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	4a61      	ldr	r2, [pc, #388]	; (8002e14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	f240 80b9 	bls.w	8002e08 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80b3 	beq.w	8002e08 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cb4:	6093      	str	r3, [r2, #8]
 8002cb6:	e0a7      	b.n	8002e08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	6093      	str	r3, [r2, #8]
 8002cd4:	e098      	b.n	8002e08 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 8093 	bne.w	8002e08 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	4a4b      	ldr	r2, [pc, #300]	; (8002e14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d90f      	bls.n	8002d0a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d00:	461a      	mov	r2, r3
 8002d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d06:	6093      	str	r3, [r2, #8]
 8002d08:	e07e      	b.n	8002e08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	0159      	lsls	r1, r3, #5
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d36:	1ad2      	subs	r2, r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d114      	bne.n	8002d6c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d54:	461a      	mov	r2, r3
 8002d56:	2101      	movs	r1, #1
 8002d58:	f003 fc1e 	bl	8006598 <USB_EP0_OutStart>
 8002d5c:	e006      	b.n	8002d6c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	441a      	add	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	4619      	mov	r1, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f005 ff12 	bl	8008b9c <HAL_PCD_DataOutStageCallback>
 8002d78:	e046      	b.n	8002e08 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d124      	bne.n	8002dcc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9e:	6093      	str	r3, [r2, #8]
 8002da0:	e032      	b.n	8002e08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db8:	461a      	mov	r2, r3
 8002dba:	2320      	movs	r3, #32
 8002dbc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f005 fee9 	bl	8008b9c <HAL_PCD_DataOutStageCallback>
 8002dca:	e01d      	b.n	8002e08 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d114      	bne.n	8002dfc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d108      	bne.n	8002dfc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002df4:	461a      	mov	r2, r3
 8002df6:	2100      	movs	r1, #0
 8002df8:	f003 fbce 	bl	8006598 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	4619      	mov	r1, r3
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f005 feca 	bl	8008b9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	4f54300a 	.word	0x4f54300a
 8002e18:	4f54310a 	.word	0x4f54310a

08002e1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	333c      	adds	r3, #60	; 0x3c
 8002e34:	3304      	adds	r3, #4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a15      	ldr	r2, [pc, #84]	; (8002ea4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d90e      	bls.n	8002e70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f005 fe81 	bl	8008b78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d90c      	bls.n	8002e98 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d108      	bne.n	8002e98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e90:	461a      	mov	r2, r3
 8002e92:	2101      	movs	r1, #1
 8002e94:	f003 fb80 	bl	8006598 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	4f54300a 	.word	0x4f54300a

08002ea8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ec6:	883b      	ldrh	r3, [r7, #0]
 8002ec8:	0419      	lsls	r1, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ed4:	e028      	b.n	8002f28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]
 8002ee8:	e00d      	b.n	8002f06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	3340      	adds	r3, #64	; 0x40
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	4413      	add	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	3301      	adds	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d3ec      	bcc.n	8002eea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f10:	883b      	ldrh	r3, [r7, #0]
 8002f12:	0418      	lsls	r0, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6819      	ldr	r1, [r3, #0]
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	4302      	orrs	r2, r0
 8002f20:	3340      	adds	r3, #64	; 0x40
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e267      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d075      	beq.n	800307a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f8e:	4b88      	ldr	r3, [pc, #544]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d00c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9a:	4b85      	ldr	r3, [pc, #532]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d112      	bne.n	8002fcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fa6:	4b82      	ldr	r3, [pc, #520]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb2:	d10b      	bne.n	8002fcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	4b7e      	ldr	r3, [pc, #504]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d05b      	beq.n	8003078 <HAL_RCC_OscConfig+0x108>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d157      	bne.n	8003078 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e242      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x74>
 8002fd6:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a75      	ldr	r2, [pc, #468]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e01d      	b.n	8003020 <HAL_RCC_OscConfig+0xb0>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x98>
 8002fee:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a6f      	ldr	r2, [pc, #444]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	4b6d      	ldr	r3, [pc, #436]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a6c      	ldr	r2, [pc, #432]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0xb0>
 8003008:	4b69      	ldr	r3, [pc, #420]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a68      	ldr	r2, [pc, #416]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 800300e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b66      	ldr	r3, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a65      	ldr	r2, [pc, #404]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 800301a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800301e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe f976 	bl	8001318 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe f972 	bl	8001318 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e207      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b5b      	ldr	r3, [pc, #364]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0xc0>
 800304e:	e014      	b.n	800307a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe f962 	bl	8001318 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003058:	f7fe f95e 	bl	8001318 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	; 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1f3      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	4b51      	ldr	r3, [pc, #324]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0xe8>
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d063      	beq.n	800314e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003086:	4b4a      	ldr	r3, [pc, #296]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800309a:	2b08      	cmp	r3, #8
 800309c:	d11c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309e:	4b44      	ldr	r3, [pc, #272]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d116      	bne.n	80030d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030aa:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_RCC_OscConfig+0x152>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e1c7      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c2:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4937      	ldr	r1, [pc, #220]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d6:	e03a      	b.n	800314e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d020      	beq.n	8003122 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e0:	4b34      	ldr	r3, [pc, #208]	; (80031b4 <HAL_RCC_OscConfig+0x244>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fe f917 	bl	8001318 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ee:	f7fe f913 	bl	8001318 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1a8      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4925      	ldr	r1, [pc, #148]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 800311c:	4313      	orrs	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
 8003120:	e015      	b.n	800314e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003122:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <HAL_RCC_OscConfig+0x244>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe f8f6 	bl	8001318 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003130:	f7fe f8f2 	bl	8001318 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e187      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d036      	beq.n	80031c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_RCC_OscConfig+0x248>)
 8003164:	2201      	movs	r2, #1
 8003166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fe f8d6 	bl	8001318 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003170:	f7fe f8d2 	bl	8001318 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e167      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x240>)
 8003184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x200>
 800318e:	e01b      	b.n	80031c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_RCC_OscConfig+0x248>)
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003196:	f7fe f8bf 	bl	8001318 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319c:	e00e      	b.n	80031bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319e:	f7fe f8bb 	bl	8001318 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d907      	bls.n	80031bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e150      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
 80031b0:	40023800 	.word	0x40023800
 80031b4:	42470000 	.word	0x42470000
 80031b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	4b88      	ldr	r3, [pc, #544]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 80031be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ea      	bne.n	800319e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8097 	beq.w	8003304 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031da:	4b81      	ldr	r3, [pc, #516]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10f      	bne.n	8003206 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	4b7d      	ldr	r3, [pc, #500]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4a7c      	ldr	r2, [pc, #496]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6413      	str	r3, [r2, #64]	; 0x40
 80031f6:	4b7a      	ldr	r3, [pc, #488]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003206:	4b77      	ldr	r3, [pc, #476]	; (80033e4 <HAL_RCC_OscConfig+0x474>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d118      	bne.n	8003244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003212:	4b74      	ldr	r3, [pc, #464]	; (80033e4 <HAL_RCC_OscConfig+0x474>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a73      	ldr	r2, [pc, #460]	; (80033e4 <HAL_RCC_OscConfig+0x474>)
 8003218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800321e:	f7fe f87b 	bl	8001318 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003226:	f7fe f877 	bl	8001318 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e10c      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0x474>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d106      	bne.n	800325a <HAL_RCC_OscConfig+0x2ea>
 800324c:	4b64      	ldr	r3, [pc, #400]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	4a63      	ldr	r2, [pc, #396]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6713      	str	r3, [r2, #112]	; 0x70
 8003258:	e01c      	b.n	8003294 <HAL_RCC_OscConfig+0x324>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b05      	cmp	r3, #5
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x30c>
 8003262:	4b5f      	ldr	r3, [pc, #380]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a5e      	ldr	r2, [pc, #376]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
 800326e:	4b5c      	ldr	r3, [pc, #368]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a5b      	ldr	r2, [pc, #364]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0x324>
 800327c:	4b58      	ldr	r3, [pc, #352]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003280:	4a57      	ldr	r2, [pc, #348]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	6713      	str	r3, [r2, #112]	; 0x70
 8003288:	4b55      	ldr	r3, [pc, #340]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a54      	ldr	r2, [pc, #336]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 800328e:	f023 0304 	bic.w	r3, r3, #4
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d015      	beq.n	80032c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fe f83c 	bl	8001318 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a4:	f7fe f838 	bl	8001318 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0cb      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ba:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0ee      	beq.n	80032a4 <HAL_RCC_OscConfig+0x334>
 80032c6:	e014      	b.n	80032f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c8:	f7fe f826 	bl	8001318 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fe f822 	bl	8001318 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0b5      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e6:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1ee      	bne.n	80032d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d105      	bne.n	8003304 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f8:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 80032fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003302:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80a1 	beq.w	8003450 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800330e:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b08      	cmp	r3, #8
 8003318:	d05c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d141      	bne.n	80033a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <HAL_RCC_OscConfig+0x478>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fd fff6 	bl	8001318 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003330:	f7fd fff2 	bl	8001318 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e087      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69da      	ldr	r2, [r3, #28]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	019b      	lsls	r3, r3, #6
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	3b01      	subs	r3, #1
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	491b      	ldr	r1, [pc, #108]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 8003374:	4313      	orrs	r3, r2
 8003376:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_RCC_OscConfig+0x478>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337e:	f7fd ffcb 	bl	8001318 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003386:	f7fd ffc7 	bl	8001318 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e05c      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x416>
 80033a4:	e054      	b.n	8003450 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <HAL_RCC_OscConfig+0x478>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fd ffb4 	bl	8001318 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fd ffb0 	bl	8001318 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e045      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCC_OscConfig+0x470>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x444>
 80033d2:	e03d      	b.n	8003450 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d107      	bne.n	80033ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e038      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40007000 	.word	0x40007000
 80033e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033ec:	4b1b      	ldr	r3, [pc, #108]	; (800345c <HAL_RCC_OscConfig+0x4ec>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d028      	beq.n	800344c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d121      	bne.n	800344c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d11a      	bne.n	800344c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800341c:	4013      	ands	r3, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003422:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003424:	4293      	cmp	r3, r2
 8003426:	d111      	bne.n	800344c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	3b01      	subs	r3, #1
 8003436:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d107      	bne.n	800344c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800

08003460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0cc      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003474:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d90c      	bls.n	800349c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b65      	ldr	r3, [pc, #404]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b63      	ldr	r3, [pc, #396]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0b8      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d020      	beq.n	80034ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b4:	4b59      	ldr	r3, [pc, #356]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a52      	ldr	r2, [pc, #328]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d8:	4b50      	ldr	r3, [pc, #320]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	494d      	ldr	r1, [pc, #308]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d044      	beq.n	8003580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d119      	bne.n	800353e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e07f      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d003      	beq.n	800351e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351a:	2b03      	cmp	r3, #3
 800351c:	d107      	bne.n	800352e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351e:	4b3f      	ldr	r3, [pc, #252]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06f      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352e:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e067      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353e:	4b37      	ldr	r3, [pc, #220]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 0203 	bic.w	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4934      	ldr	r1, [pc, #208]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003550:	f7fd fee2 	bl	8001318 <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	e00a      	b.n	800356e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003558:	f7fd fede 	bl	8001318 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e04f      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	4b2b      	ldr	r3, [pc, #172]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 020c 	and.w	r2, r3, #12
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	429a      	cmp	r2, r3
 800357e:	d1eb      	bne.n	8003558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d20c      	bcs.n	80035a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e032      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b4:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4916      	ldr	r1, [pc, #88]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	490e      	ldr	r1, [pc, #56]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035e6:	f000 f821 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035ea:	4602      	mov	r2, r0
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	490a      	ldr	r1, [pc, #40]	; (8003620 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	5ccb      	ldrb	r3, [r1, r3]
 80035fa:	fa22 f303 	lsr.w	r3, r2, r3
 80035fe:	4a09      	ldr	r2, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1c8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd fe42 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40023c00 	.word	0x40023c00
 800361c:	40023800 	.word	0x40023800
 8003620:	08009610 	.word	0x08009610
 8003624:	20000024 	.word	0x20000024
 8003628:	20000028 	.word	0x20000028

0800362c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003630:	b090      	sub	sp, #64	; 0x40
 8003632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	637b      	str	r3, [r7, #52]	; 0x34
 8003638:	2300      	movs	r3, #0
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800363c:	2300      	movs	r3, #0
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003644:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d00d      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0x40>
 8003650:	2b08      	cmp	r3, #8
 8003652:	f200 80a1 	bhi.w	8003798 <HAL_RCC_GetSysClockFreq+0x16c>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x34>
 800365a:	2b04      	cmp	r3, #4
 800365c:	d003      	beq.n	8003666 <HAL_RCC_GetSysClockFreq+0x3a>
 800365e:	e09b      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003664:	e09b      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003666:	4b53      	ldr	r3, [pc, #332]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003668:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800366a:	e098      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800366c:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <HAL_RCC_GetSysClockFreq+0x180>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003676:	4b4d      	ldr	r3, [pc, #308]	; (80037ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d028      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003682:	4b4a      	ldr	r3, [pc, #296]	; (80037ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	2200      	movs	r2, #0
 800368a:	623b      	str	r3, [r7, #32]
 800368c:	627a      	str	r2, [r7, #36]	; 0x24
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003694:	2100      	movs	r1, #0
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003698:	fb03 f201 	mul.w	r2, r3, r1
 800369c:	2300      	movs	r3, #0
 800369e:	fb00 f303 	mul.w	r3, r0, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	4a43      	ldr	r2, [pc, #268]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80036a6:	fba0 1202 	umull	r1, r2, r0, r2
 80036aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ac:	460a      	mov	r2, r1
 80036ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80036b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b2:	4413      	add	r3, r2
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	2200      	movs	r2, #0
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	61fa      	str	r2, [r7, #28]
 80036be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036c6:	f7fc fd87 	bl	80001d8 <__aeabi_uldivmod>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4613      	mov	r3, r2
 80036d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d2:	e053      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d4:	4b35      	ldr	r3, [pc, #212]	; (80037ac <HAL_RCC_GetSysClockFreq+0x180>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	099b      	lsrs	r3, r3, #6
 80036da:	2200      	movs	r2, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	617a      	str	r2, [r7, #20]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036e6:	f04f 0b00 	mov.w	fp, #0
 80036ea:	4652      	mov	r2, sl
 80036ec:	465b      	mov	r3, fp
 80036ee:	f04f 0000 	mov.w	r0, #0
 80036f2:	f04f 0100 	mov.w	r1, #0
 80036f6:	0159      	lsls	r1, r3, #5
 80036f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036fc:	0150      	lsls	r0, r2, #5
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	ebb2 080a 	subs.w	r8, r2, sl
 8003706:	eb63 090b 	sbc.w	r9, r3, fp
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003716:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800371a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800371e:	ebb2 0408 	subs.w	r4, r2, r8
 8003722:	eb63 0509 	sbc.w	r5, r3, r9
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	00eb      	lsls	r3, r5, #3
 8003730:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003734:	00e2      	lsls	r2, r4, #3
 8003736:	4614      	mov	r4, r2
 8003738:	461d      	mov	r5, r3
 800373a:	eb14 030a 	adds.w	r3, r4, sl
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	eb45 030b 	adc.w	r3, r5, fp
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003752:	4629      	mov	r1, r5
 8003754:	028b      	lsls	r3, r1, #10
 8003756:	4621      	mov	r1, r4
 8003758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800375c:	4621      	mov	r1, r4
 800375e:	028a      	lsls	r2, r1, #10
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
 8003764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003766:	2200      	movs	r2, #0
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	60fa      	str	r2, [r7, #12]
 800376c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003770:	f7fc fd32 	bl	80001d8 <__aeabi_uldivmod>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4613      	mov	r3, r2
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCC_GetSysClockFreq+0x180>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	3301      	adds	r3, #1
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800378c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003796:	e002      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800379a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800379c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3740      	adds	r7, #64	; 0x40
 80037a4:	46bd      	mov	sp, r7
 80037a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800
 80037b0:	00f42400 	.word	0x00f42400
 80037b4:	017d7840 	.word	0x017d7840

080037b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_RCC_GetHCLKFreq+0x14>)
 80037be:	681b      	ldr	r3, [r3, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000024 	.word	0x20000024

080037d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037d4:	f7ff fff0 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0a9b      	lsrs	r3, r3, #10
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	08009620 	.word	0x08009620

080037f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037fc:	f7ff ffdc 	bl	80037b8 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0b5b      	lsrs	r3, r3, #13
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4903      	ldr	r1, [pc, #12]	; (800381c <HAL_RCC_GetPCLK2Freq+0x24>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	08009620 	.word	0x08009620

08003820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e041      	b.n	80038b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd fb2e 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 fa2e 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d122      	bne.n	800391a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d11b      	bne.n	800391a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f06f 0202 	mvn.w	r2, #2
 80038ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f9bf 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003906:	e005      	b.n	8003914 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f9b1 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f9c2 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d122      	bne.n	800396e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b04      	cmp	r3, #4
 8003934:	d11b      	bne.n	800396e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f06f 0204 	mvn.w	r2, #4
 800393e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f995 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 800395a:	e005      	b.n	8003968 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f987 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f998 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b08      	cmp	r3, #8
 800397a:	d122      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b08      	cmp	r3, #8
 8003988:	d11b      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f06f 0208 	mvn.w	r2, #8
 8003992:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2204      	movs	r2, #4
 8003998:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f96b 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 80039ae:	e005      	b.n	80039bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f95d 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f96e 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d122      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d11b      	bne.n	8003a16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f06f 0210 	mvn.w	r2, #16
 80039e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2208      	movs	r2, #8
 80039ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f941 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003a02:	e005      	b.n	8003a10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f933 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f944 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d10e      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0201 	mvn.w	r2, #1
 8003a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f90d 	bl	8003c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4c:	2b80      	cmp	r3, #128	; 0x80
 8003a4e:	d10e      	bne.n	8003a6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b80      	cmp	r3, #128	; 0x80
 8003a5c:	d107      	bne.n	8003a6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fabb 	bl	8003fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d10e      	bne.n	8003a9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b40      	cmp	r3, #64	; 0x40
 8003a88:	d107      	bne.n	8003a9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f909 	bl	8003cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d10e      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d107      	bne.n	8003ac6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f06f 0220 	mvn.w	r2, #32
 8003abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fa85 	bl	8003fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_ConfigClockSource+0x1c>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e0b4      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x186>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b10:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b22:	d03e      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0xd4>
 8003b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b28:	f200 8087 	bhi.w	8003c3a <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b30:	f000 8086 	beq.w	8003c40 <HAL_TIM_ConfigClockSource+0x172>
 8003b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b38:	d87f      	bhi.n	8003c3a <HAL_TIM_ConfigClockSource+0x16c>
 8003b3a:	2b70      	cmp	r3, #112	; 0x70
 8003b3c:	d01a      	beq.n	8003b74 <HAL_TIM_ConfigClockSource+0xa6>
 8003b3e:	2b70      	cmp	r3, #112	; 0x70
 8003b40:	d87b      	bhi.n	8003c3a <HAL_TIM_ConfigClockSource+0x16c>
 8003b42:	2b60      	cmp	r3, #96	; 0x60
 8003b44:	d050      	beq.n	8003be8 <HAL_TIM_ConfigClockSource+0x11a>
 8003b46:	2b60      	cmp	r3, #96	; 0x60
 8003b48:	d877      	bhi.n	8003c3a <HAL_TIM_ConfigClockSource+0x16c>
 8003b4a:	2b50      	cmp	r3, #80	; 0x50
 8003b4c:	d03c      	beq.n	8003bc8 <HAL_TIM_ConfigClockSource+0xfa>
 8003b4e:	2b50      	cmp	r3, #80	; 0x50
 8003b50:	d873      	bhi.n	8003c3a <HAL_TIM_ConfigClockSource+0x16c>
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d058      	beq.n	8003c08 <HAL_TIM_ConfigClockSource+0x13a>
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d86f      	bhi.n	8003c3a <HAL_TIM_ConfigClockSource+0x16c>
 8003b5a:	2b30      	cmp	r3, #48	; 0x30
 8003b5c:	d064      	beq.n	8003c28 <HAL_TIM_ConfigClockSource+0x15a>
 8003b5e:	2b30      	cmp	r3, #48	; 0x30
 8003b60:	d86b      	bhi.n	8003c3a <HAL_TIM_ConfigClockSource+0x16c>
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d060      	beq.n	8003c28 <HAL_TIM_ConfigClockSource+0x15a>
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d867      	bhi.n	8003c3a <HAL_TIM_ConfigClockSource+0x16c>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d05c      	beq.n	8003c28 <HAL_TIM_ConfigClockSource+0x15a>
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d05a      	beq.n	8003c28 <HAL_TIM_ConfigClockSource+0x15a>
 8003b72:	e062      	b.n	8003c3a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6899      	ldr	r1, [r3, #8]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f000 f996 	bl	8003eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	609a      	str	r2, [r3, #8]
      break;
 8003ba0:	e04f      	b.n	8003c42 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6899      	ldr	r1, [r3, #8]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f000 f97f 	bl	8003eb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc4:	609a      	str	r2, [r3, #8]
      break;
 8003bc6:	e03c      	b.n	8003c42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f000 f8f3 	bl	8003dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2150      	movs	r1, #80	; 0x50
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 f94c 	bl	8003e7e <TIM_ITRx_SetConfig>
      break;
 8003be6:	e02c      	b.n	8003c42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	6859      	ldr	r1, [r3, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f000 f912 	bl	8003e1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2160      	movs	r1, #96	; 0x60
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f93c 	bl	8003e7e <TIM_ITRx_SetConfig>
      break;
 8003c06:	e01c      	b.n	8003c42 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	461a      	mov	r2, r3
 8003c16:	f000 f8d3 	bl	8003dc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2140      	movs	r1, #64	; 0x40
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f92c 	bl	8003e7e <TIM_ITRx_SetConfig>
      break;
 8003c26:	e00c      	b.n	8003c42 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f000 f923 	bl	8003e7e <TIM_ITRx_SetConfig>
      break;
 8003c38:	e003      	b.n	8003c42 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3e:	e000      	b.n	8003c42 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <TIM_Base_SetConfig+0xe4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00f      	beq.n	8003cf8 <TIM_Base_SetConfig+0x38>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d00b      	beq.n	8003cf8 <TIM_Base_SetConfig+0x38>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a31      	ldr	r2, [pc, #196]	; (8003da8 <TIM_Base_SetConfig+0xe8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <TIM_Base_SetConfig+0x38>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a30      	ldr	r2, [pc, #192]	; (8003dac <TIM_Base_SetConfig+0xec>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_Base_SetConfig+0x38>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a2f      	ldr	r2, [pc, #188]	; (8003db0 <TIM_Base_SetConfig+0xf0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d108      	bne.n	8003d0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a25      	ldr	r2, [pc, #148]	; (8003da4 <TIM_Base_SetConfig+0xe4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01b      	beq.n	8003d4a <TIM_Base_SetConfig+0x8a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d18:	d017      	beq.n	8003d4a <TIM_Base_SetConfig+0x8a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a22      	ldr	r2, [pc, #136]	; (8003da8 <TIM_Base_SetConfig+0xe8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <TIM_Base_SetConfig+0x8a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a21      	ldr	r2, [pc, #132]	; (8003dac <TIM_Base_SetConfig+0xec>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00f      	beq.n	8003d4a <TIM_Base_SetConfig+0x8a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a20      	ldr	r2, [pc, #128]	; (8003db0 <TIM_Base_SetConfig+0xf0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00b      	beq.n	8003d4a <TIM_Base_SetConfig+0x8a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <TIM_Base_SetConfig+0xf4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d007      	beq.n	8003d4a <TIM_Base_SetConfig+0x8a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <TIM_Base_SetConfig+0xf8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d003      	beq.n	8003d4a <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a1d      	ldr	r2, [pc, #116]	; (8003dbc <TIM_Base_SetConfig+0xfc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d108      	bne.n	8003d5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a08      	ldr	r2, [pc, #32]	; (8003da4 <TIM_Base_SetConfig+0xe4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d103      	bne.n	8003d90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	615a      	str	r2, [r3, #20]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800
 8003db0:	40000c00 	.word	0x40000c00
 8003db4:	40014000 	.word	0x40014000
 8003db8:	40014400 	.word	0x40014400
 8003dbc:	40014800 	.word	0x40014800

08003dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f023 0201 	bic.w	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f023 030a 	bic.w	r3, r3, #10
 8003dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b087      	sub	sp, #28
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	f023 0210 	bic.w	r2, r3, #16
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	031b      	lsls	r3, r3, #12
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	bf00      	nop
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f043 0307 	orr.w	r3, r3, #7
 8003ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	609a      	str	r2, [r3, #8]
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	021a      	lsls	r2, r3, #8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	609a      	str	r2, [r3, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e050      	b.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d018      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f58:	d013      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00e      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d009      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a13      	ldr	r2, [pc, #76]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d10c      	bne.n	8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40014000 	.word	0x40014000

08003fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e03f      	b.n	800408a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc ff6a 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2224      	movs	r2, #36	; 0x24
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800403a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fc7b 	bl	8004938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b0ba      	sub	sp, #232	; 0xe8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10f      	bne.n	80040fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_UART_IRQHandler+0x66>
 80040e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fb65 	bl	80047c2 <UART_Receive_IT>
      return;
 80040f8:	e256      	b.n	80045a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80de 	beq.w	80042c0 <HAL_UART_IRQHandler+0x22c>
 8004104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d106      	bne.n	800411e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004114:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80d1 	beq.w	80042c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800411e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_UART_IRQHandler+0xae>
 800412a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f043 0201 	orr.w	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_UART_IRQHandler+0xd2>
 800414e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f043 0202 	orr.w	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_UART_IRQHandler+0xf6>
 8004172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f043 0204 	orr.w	r2, r3, #4
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800418a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d011      	beq.n	80041ba <HAL_UART_IRQHandler+0x126>
 8004196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d105      	bne.n	80041ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f043 0208 	orr.w	r2, r3, #8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 81ed 	beq.w	800459e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_UART_IRQHandler+0x14e>
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 faf0 	bl	80047c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_UART_IRQHandler+0x17a>
 8004206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d04f      	beq.n	80042ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f9f8 	bl	8004604 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d141      	bne.n	80042a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800423c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3314      	adds	r3, #20
 800424a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800424e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800425a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1d9      	bne.n	8004222 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	2b00      	cmp	r3, #0
 8004274:	d013      	beq.n	800429e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	4a7d      	ldr	r2, [pc, #500]	; (8004470 <HAL_UART_IRQHandler+0x3dc>)
 800427c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	4618      	mov	r0, r3
 8004284:	f7fd f9f9 	bl	800167a <HAL_DMA_Abort_IT>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004298:	4610      	mov	r0, r2
 800429a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	e00e      	b.n	80042bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f99a 	bl	80045d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a4:	e00a      	b.n	80042bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f996 	bl	80045d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ac:	e006      	b.n	80042bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f992 	bl	80045d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042ba:	e170      	b.n	800459e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	bf00      	nop
    return;
 80042be:	e16e      	b.n	800459e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	f040 814a 	bne.w	800455e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8143 	beq.w	800455e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 813c 	beq.w	800455e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	f040 80b4 	bne.w	8004474 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004318:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8140 	beq.w	80045a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800432a:	429a      	cmp	r2, r3
 800432c:	f080 8139 	bcs.w	80045a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004336:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004342:	f000 8088 	beq.w	8004456 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800435c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004372:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800437e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800438a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1d9      	bne.n	8004346 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3314      	adds	r3, #20
 8004398:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e1      	bne.n	8004392 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e3      	bne.n	80043ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	330c      	adds	r3, #12
 800441a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004426:	f023 0310 	bic.w	r3, r3, #16
 800442a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004438:	65ba      	str	r2, [r7, #88]	; 0x58
 800443a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800443e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e3      	bne.n	8004414 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	4618      	mov	r0, r3
 8004452:	f7fd f8a2 	bl	800159a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800445e:	b29b      	uxth	r3, r3
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	b29b      	uxth	r3, r3
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f8c0 	bl	80045ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800446c:	e099      	b.n	80045a2 <HAL_UART_IRQHandler+0x50e>
 800446e:	bf00      	nop
 8004470:	080046cb 	.word	0x080046cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800447c:	b29b      	uxth	r3, r3
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 808b 	beq.w	80045a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8086 	beq.w	80045a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044be:	647a      	str	r2, [r7, #68]	; 0x44
 80044c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e3      	bne.n	800449a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3314      	adds	r3, #20
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	623b      	str	r3, [r7, #32]
   return(result);
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3314      	adds	r3, #20
 80044f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044f6:	633a      	str	r2, [r7, #48]	; 0x30
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e3      	bne.n	80044d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	60fb      	str	r3, [r7, #12]
   return(result);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0310 	bic.w	r3, r3, #16
 800452e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800453c:	61fa      	str	r2, [r7, #28]
 800453e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	69b9      	ldr	r1, [r7, #24]
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	617b      	str	r3, [r7, #20]
   return(result);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e3      	bne.n	8004518 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f848 	bl	80045ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800455c:	e023      	b.n	80045a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800455e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_UART_IRQHandler+0x4ea>
 800456a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8bb 	bl	80046f2 <UART_Transmit_IT>
    return;
 800457c:	e014      	b.n	80045a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00e      	beq.n	80045a8 <HAL_UART_IRQHandler+0x514>
 800458a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d008      	beq.n	80045a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8fb 	bl	8004792 <UART_EndTransmit_IT>
    return;
 800459c:	e004      	b.n	80045a8 <HAL_UART_IRQHandler+0x514>
    return;
 800459e:	bf00      	nop
 80045a0:	e002      	b.n	80045a8 <HAL_UART_IRQHandler+0x514>
      return;
 80045a2:	bf00      	nop
 80045a4:	e000      	b.n	80045a8 <HAL_UART_IRQHandler+0x514>
      return;
 80045a6:	bf00      	nop
  }
}
 80045a8:	37e8      	adds	r7, #232	; 0xe8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop

080045b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b095      	sub	sp, #84	; 0x54
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800462c:	643a      	str	r2, [r7, #64]	; 0x40
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e5      	bne.n	800460c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3314      	adds	r3, #20
 8004646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	64bb      	str	r3, [r7, #72]	; 0x48
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3314      	adds	r3, #20
 800465e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e5      	bne.n	8004640 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	2b01      	cmp	r3, #1
 800467a:	d119      	bne.n	80046b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	60bb      	str	r3, [r7, #8]
   return(result);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f023 0310 	bic.w	r3, r3, #16
 8004692:	647b      	str	r3, [r7, #68]	; 0x44
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800469c:	61ba      	str	r2, [r7, #24]
 800469e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6979      	ldr	r1, [r7, #20]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	613b      	str	r3, [r7, #16]
   return(result);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e5      	bne.n	800467c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046be:	bf00      	nop
 80046c0:	3754      	adds	r7, #84	; 0x54
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f7ff ff77 	bl	80045d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ea:	bf00      	nop
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b21      	cmp	r3, #33	; 0x21
 8004704:	d13e      	bne.n	8004784 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470e:	d114      	bne.n	800473a <UART_Transmit_IT+0x48>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d110      	bne.n	800473a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800472c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	1c9a      	adds	r2, r3, #2
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	621a      	str	r2, [r3, #32]
 8004738:	e008      	b.n	800474c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	1c59      	adds	r1, r3, #1
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6211      	str	r1, [r2, #32]
 8004744:	781a      	ldrb	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29b      	uxth	r3, r3
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	4619      	mov	r1, r3
 800475a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10f      	bne.n	8004780 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800476e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800477e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	e000      	b.n	8004786 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004784:	2302      	movs	r3, #2
  }
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff fefc 	bl	80045b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b08c      	sub	sp, #48	; 0x30
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b22      	cmp	r3, #34	; 0x22
 80047d4:	f040 80ab 	bne.w	800492e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	d117      	bne.n	8004812 <UART_Receive_IT+0x50>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d113      	bne.n	8004812 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004800:	b29a      	uxth	r2, r3
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	1c9a      	adds	r2, r3, #2
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28
 8004810:	e026      	b.n	8004860 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004818:	2300      	movs	r3, #0
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004824:	d007      	beq.n	8004836 <UART_Receive_IT+0x74>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10a      	bne.n	8004844 <UART_Receive_IT+0x82>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	b2da      	uxtb	r2, r3
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	e008      	b.n	8004856 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004850:	b2da      	uxtb	r2, r3
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29b      	uxth	r3, r3
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4619      	mov	r1, r3
 800486e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004870:	2b00      	cmp	r3, #0
 8004872:	d15a      	bne.n	800492a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0220 	bic.w	r2, r2, #32
 8004882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004892:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0201 	bic.w	r2, r2, #1
 80048a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d135      	bne.n	8004920 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f023 0310 	bic.w	r3, r3, #16
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	623a      	str	r2, [r7, #32]
 80048dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	69f9      	ldr	r1, [r7, #28]
 80048e0:	6a3a      	ldr	r2, [r7, #32]
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e5      	bne.n	80048ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d10a      	bne.n	8004912 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004916:	4619      	mov	r1, r3
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff fe67 	bl	80045ec <HAL_UARTEx_RxEventCallback>
 800491e:	e002      	b.n	8004926 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fe4f 	bl	80045c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	e002      	b.n	8004930 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
  }
}
 8004930:	4618      	mov	r0, r3
 8004932:	3730      	adds	r7, #48	; 0x30
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800493c:	b0c0      	sub	sp, #256	; 0x100
 800493e:	af00      	add	r7, sp, #0
 8004940:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	68d9      	ldr	r1, [r3, #12]
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	ea40 0301 	orr.w	r3, r0, r1
 8004960:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	431a      	orrs	r2, r3
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	431a      	orrs	r2, r3
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004990:	f021 010c 	bic.w	r1, r1, #12
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800499e:	430b      	orrs	r3, r1
 80049a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b2:	6999      	ldr	r1, [r3, #24]
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	ea40 0301 	orr.w	r3, r0, r1
 80049be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b8f      	ldr	r3, [pc, #572]	; (8004c04 <UART_SetConfig+0x2cc>)
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d005      	beq.n	80049d8 <UART_SetConfig+0xa0>
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b8d      	ldr	r3, [pc, #564]	; (8004c08 <UART_SetConfig+0x2d0>)
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d104      	bne.n	80049e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049d8:	f7fe ff0e 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 80049dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049e0:	e003      	b.n	80049ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049e2:	f7fe fef5 	bl	80037d0 <HAL_RCC_GetPCLK1Freq>
 80049e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f4:	f040 810c 	bne.w	8004c10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	462b      	mov	r3, r5
 8004a0e:	1891      	adds	r1, r2, r2
 8004a10:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a12:	415b      	adcs	r3, r3
 8004a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	eb12 0801 	adds.w	r8, r2, r1
 8004a20:	4629      	mov	r1, r5
 8004a22:	eb43 0901 	adc.w	r9, r3, r1
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a3a:	4690      	mov	r8, r2
 8004a3c:	4699      	mov	r9, r3
 8004a3e:	4623      	mov	r3, r4
 8004a40:	eb18 0303 	adds.w	r3, r8, r3
 8004a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a48:	462b      	mov	r3, r5
 8004a4a:	eb49 0303 	adc.w	r3, r9, r3
 8004a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a66:	460b      	mov	r3, r1
 8004a68:	18db      	adds	r3, r3, r3
 8004a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	eb42 0303 	adc.w	r3, r2, r3
 8004a72:	657b      	str	r3, [r7, #84]	; 0x54
 8004a74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a7c:	f7fb fbac 	bl	80001d8 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <UART_SetConfig+0x2d4>)
 8004a86:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	011c      	lsls	r4, r3, #4
 8004a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	1891      	adds	r1, r2, r2
 8004aa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004aa8:	415b      	adcs	r3, r3
 8004aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	eb43 0b01 	adc.w	fp, r3, r1
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ac8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ad0:	4692      	mov	sl, r2
 8004ad2:	469b      	mov	fp, r3
 8004ad4:	4643      	mov	r3, r8
 8004ad6:	eb1a 0303 	adds.w	r3, sl, r3
 8004ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ade:	464b      	mov	r3, r9
 8004ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004af4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004af8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004afc:	460b      	mov	r3, r1
 8004afe:	18db      	adds	r3, r3, r3
 8004b00:	643b      	str	r3, [r7, #64]	; 0x40
 8004b02:	4613      	mov	r3, r2
 8004b04:	eb42 0303 	adc.w	r3, r2, r3
 8004b08:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b12:	f7fb fb61 	bl	80001d8 <__aeabi_uldivmod>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <UART_SetConfig+0x2d4>)
 8004b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	2264      	movs	r2, #100	; 0x64
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	1acb      	subs	r3, r1, r3
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <UART_SetConfig+0x2d4>)
 8004b34:	fba3 2302 	umull	r2, r3, r3, r2
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b40:	441c      	add	r4, r3
 8004b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	1891      	adds	r1, r2, r2
 8004b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b5c:	415b      	adcs	r3, r3
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b64:	4641      	mov	r1, r8
 8004b66:	1851      	adds	r1, r2, r1
 8004b68:	6339      	str	r1, [r7, #48]	; 0x30
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	414b      	adcs	r3, r1
 8004b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b7c:	4659      	mov	r1, fp
 8004b7e:	00cb      	lsls	r3, r1, #3
 8004b80:	4651      	mov	r1, sl
 8004b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b86:	4651      	mov	r1, sl
 8004b88:	00ca      	lsls	r2, r1, #3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4642      	mov	r2, r8
 8004b92:	189b      	adds	r3, r3, r2
 8004b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b98:	464b      	mov	r3, r9
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bb8:	460b      	mov	r3, r1
 8004bba:	18db      	adds	r3, r3, r3
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	eb42 0303 	adc.w	r3, r2, r3
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bce:	f7fb fb03 	bl	80001d8 <__aeabi_uldivmod>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <UART_SetConfig+0x2d4>)
 8004bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	2164      	movs	r1, #100	; 0x64
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	3332      	adds	r3, #50	; 0x32
 8004bea:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <UART_SetConfig+0x2d4>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	f003 0207 	and.w	r2, r3, #7
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4422      	add	r2, r4
 8004bfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c00:	e106      	b.n	8004e10 <UART_SetConfig+0x4d8>
 8004c02:	bf00      	nop
 8004c04:	40011000 	.word	0x40011000
 8004c08:	40011400 	.word	0x40011400
 8004c0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c22:	4642      	mov	r2, r8
 8004c24:	464b      	mov	r3, r9
 8004c26:	1891      	adds	r1, r2, r2
 8004c28:	6239      	str	r1, [r7, #32]
 8004c2a:	415b      	adcs	r3, r3
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c32:	4641      	mov	r1, r8
 8004c34:	1854      	adds	r4, r2, r1
 8004c36:	4649      	mov	r1, r9
 8004c38:	eb43 0501 	adc.w	r5, r3, r1
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	00eb      	lsls	r3, r5, #3
 8004c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c4a:	00e2      	lsls	r2, r4, #3
 8004c4c:	4614      	mov	r4, r2
 8004c4e:	461d      	mov	r5, r3
 8004c50:	4643      	mov	r3, r8
 8004c52:	18e3      	adds	r3, r4, r3
 8004c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c58:	464b      	mov	r3, r9
 8004c5a:	eb45 0303 	adc.w	r3, r5, r3
 8004c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c7e:	4629      	mov	r1, r5
 8004c80:	008b      	lsls	r3, r1, #2
 8004c82:	4621      	mov	r1, r4
 8004c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c88:	4621      	mov	r1, r4
 8004c8a:	008a      	lsls	r2, r1, #2
 8004c8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c90:	f7fb faa2 	bl	80001d8 <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4b60      	ldr	r3, [pc, #384]	; (8004e1c <UART_SetConfig+0x4e4>)
 8004c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	011c      	lsls	r4, r3, #4
 8004ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	1891      	adds	r1, r2, r2
 8004cba:	61b9      	str	r1, [r7, #24]
 8004cbc:	415b      	adcs	r3, r3
 8004cbe:	61fb      	str	r3, [r7, #28]
 8004cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	1851      	adds	r1, r2, r1
 8004cc8:	6139      	str	r1, [r7, #16]
 8004cca:	4649      	mov	r1, r9
 8004ccc:	414b      	adcs	r3, r1
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cdc:	4659      	mov	r1, fp
 8004cde:	00cb      	lsls	r3, r1, #3
 8004ce0:	4651      	mov	r1, sl
 8004ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ce6:	4651      	mov	r1, sl
 8004ce8:	00ca      	lsls	r2, r1, #3
 8004cea:	4610      	mov	r0, r2
 8004cec:	4619      	mov	r1, r3
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	189b      	adds	r3, r3, r2
 8004cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	eb42 0303 	adc.w	r3, r2, r3
 8004d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	008b      	lsls	r3, r1, #2
 8004d20:	4641      	mov	r1, r8
 8004d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d26:	4641      	mov	r1, r8
 8004d28:	008a      	lsls	r2, r1, #2
 8004d2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d2e:	f7fb fa53 	bl	80001d8 <__aeabi_uldivmod>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	4b38      	ldr	r3, [pc, #224]	; (8004e1c <UART_SetConfig+0x4e4>)
 8004d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	2264      	movs	r2, #100	; 0x64
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	1acb      	subs	r3, r1, r3
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	3332      	adds	r3, #50	; 0x32
 8004d4c:	4a33      	ldr	r2, [pc, #204]	; (8004e1c <UART_SetConfig+0x4e4>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d58:	441c      	add	r4, r3
 8004d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5e:	2200      	movs	r2, #0
 8004d60:	673b      	str	r3, [r7, #112]	; 0x70
 8004d62:	677a      	str	r2, [r7, #116]	; 0x74
 8004d64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d68:	4642      	mov	r2, r8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	1891      	adds	r1, r2, r2
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	415b      	adcs	r3, r3
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d78:	4641      	mov	r1, r8
 8004d7a:	1851      	adds	r1, r2, r1
 8004d7c:	6039      	str	r1, [r7, #0]
 8004d7e:	4649      	mov	r1, r9
 8004d80:	414b      	adcs	r3, r1
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d90:	4659      	mov	r1, fp
 8004d92:	00cb      	lsls	r3, r1, #3
 8004d94:	4651      	mov	r1, sl
 8004d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	00ca      	lsls	r2, r1, #3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	4603      	mov	r3, r0
 8004da4:	4642      	mov	r2, r8
 8004da6:	189b      	adds	r3, r3, r2
 8004da8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004daa:	464b      	mov	r3, r9
 8004dac:	460a      	mov	r2, r1
 8004dae:	eb42 0303 	adc.w	r3, r2, r3
 8004db2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8004dbe:	667a      	str	r2, [r7, #100]	; 0x64
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004dcc:	4649      	mov	r1, r9
 8004dce:	008b      	lsls	r3, r1, #2
 8004dd0:	4641      	mov	r1, r8
 8004dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	008a      	lsls	r2, r1, #2
 8004dda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dde:	f7fb f9fb 	bl	80001d8 <__aeabi_uldivmod>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <UART_SetConfig+0x4e4>)
 8004de8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	2164      	movs	r1, #100	; 0x64
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	3332      	adds	r3, #50	; 0x32
 8004dfa:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <UART_SetConfig+0x4e4>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	f003 020f 	and.w	r2, r3, #15
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4422      	add	r2, r4
 8004e0e:	609a      	str	r2, [r3, #8]
}
 8004e10:	bf00      	nop
 8004e12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e16:	46bd      	mov	sp, r7
 8004e18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1c:	51eb851f 	.word	0x51eb851f

08004e20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e20:	b084      	sub	sp, #16
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	f107 001c 	add.w	r0, r7, #28
 8004e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d122      	bne.n	8004e7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d105      	bne.n	8004e72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 fbee 	bl	8006654 <USB_CoreReset>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	73fb      	strb	r3, [r7, #15]
 8004e7c:	e01a      	b.n	8004eb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 fbe2 	bl	8006654 <USB_CoreReset>
 8004e90:	4603      	mov	r3, r0
 8004e92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ea6:	e005      	b.n	8004eb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d10b      	bne.n	8004ed2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f043 0206 	orr.w	r2, r3, #6
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ede:	b004      	add	sp, #16
 8004ee0:	4770      	bx	lr
	...

08004ee4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d165      	bne.n	8004fc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4a41      	ldr	r2, [pc, #260]	; (8005000 <USB_SetTurnaroundTime+0x11c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d906      	bls.n	8004f0e <USB_SetTurnaroundTime+0x2a>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4a40      	ldr	r2, [pc, #256]	; (8005004 <USB_SetTurnaroundTime+0x120>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d202      	bcs.n	8004f0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f08:	230f      	movs	r3, #15
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e062      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <USB_SetTurnaroundTime+0x120>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d306      	bcc.n	8004f24 <USB_SetTurnaroundTime+0x40>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4a3b      	ldr	r2, [pc, #236]	; (8005008 <USB_SetTurnaroundTime+0x124>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d202      	bcs.n	8004f24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f1e:	230e      	movs	r3, #14
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e057      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4a38      	ldr	r2, [pc, #224]	; (8005008 <USB_SetTurnaroundTime+0x124>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d306      	bcc.n	8004f3a <USB_SetTurnaroundTime+0x56>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4a37      	ldr	r2, [pc, #220]	; (800500c <USB_SetTurnaroundTime+0x128>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d202      	bcs.n	8004f3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f34:	230d      	movs	r3, #13
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e04c      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a33      	ldr	r2, [pc, #204]	; (800500c <USB_SetTurnaroundTime+0x128>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d306      	bcc.n	8004f50 <USB_SetTurnaroundTime+0x6c>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a32      	ldr	r2, [pc, #200]	; (8005010 <USB_SetTurnaroundTime+0x12c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d802      	bhi.n	8004f50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e041      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a2f      	ldr	r2, [pc, #188]	; (8005010 <USB_SetTurnaroundTime+0x12c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d906      	bls.n	8004f66 <USB_SetTurnaroundTime+0x82>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4a2e      	ldr	r2, [pc, #184]	; (8005014 <USB_SetTurnaroundTime+0x130>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d802      	bhi.n	8004f66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f60:	230b      	movs	r3, #11
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e036      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4a2a      	ldr	r2, [pc, #168]	; (8005014 <USB_SetTurnaroundTime+0x130>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d906      	bls.n	8004f7c <USB_SetTurnaroundTime+0x98>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4a29      	ldr	r2, [pc, #164]	; (8005018 <USB_SetTurnaroundTime+0x134>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d802      	bhi.n	8004f7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f76:	230a      	movs	r3, #10
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e02b      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a26      	ldr	r2, [pc, #152]	; (8005018 <USB_SetTurnaroundTime+0x134>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d906      	bls.n	8004f92 <USB_SetTurnaroundTime+0xae>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4a25      	ldr	r2, [pc, #148]	; (800501c <USB_SetTurnaroundTime+0x138>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d202      	bcs.n	8004f92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f8c:	2309      	movs	r3, #9
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e020      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4a21      	ldr	r2, [pc, #132]	; (800501c <USB_SetTurnaroundTime+0x138>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d306      	bcc.n	8004fa8 <USB_SetTurnaroundTime+0xc4>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4a20      	ldr	r2, [pc, #128]	; (8005020 <USB_SetTurnaroundTime+0x13c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d802      	bhi.n	8004fa8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e015      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4a1d      	ldr	r2, [pc, #116]	; (8005020 <USB_SetTurnaroundTime+0x13c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d906      	bls.n	8004fbe <USB_SetTurnaroundTime+0xda>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a1c      	ldr	r2, [pc, #112]	; (8005024 <USB_SetTurnaroundTime+0x140>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d202      	bcs.n	8004fbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fb8:	2307      	movs	r3, #7
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	e00a      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fbe:	2306      	movs	r3, #6
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e007      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004fca:	2309      	movs	r3, #9
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e001      	b.n	8004fd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004fd0:	2309      	movs	r3, #9
 8004fd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	029b      	lsls	r3, r3, #10
 8004fe8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	00d8acbf 	.word	0x00d8acbf
 8005004:	00e4e1c0 	.word	0x00e4e1c0
 8005008:	00f42400 	.word	0x00f42400
 800500c:	01067380 	.word	0x01067380
 8005010:	011a499f 	.word	0x011a499f
 8005014:	01312cff 	.word	0x01312cff
 8005018:	014ca43f 	.word	0x014ca43f
 800501c:	016e3600 	.word	0x016e3600
 8005020:	01a6ab1f 	.word	0x01a6ab1f
 8005024:	01e84800 	.word	0x01e84800

08005028 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f043 0201 	orr.w	r2, r3, #1
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f023 0201 	bic.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d115      	bne.n	80050ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800509a:	2001      	movs	r0, #1
 800509c:	f7fc f948 	bl	8001330 <HAL_Delay>
      ms++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f001 fa45 	bl	8006536 <USB_GetMode>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d01e      	beq.n	80050f0 <USB_SetCurrentMode+0x84>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b31      	cmp	r3, #49	; 0x31
 80050b6:	d9f0      	bls.n	800509a <USB_SetCurrentMode+0x2e>
 80050b8:	e01a      	b.n	80050f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d115      	bne.n	80050ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050cc:	2001      	movs	r0, #1
 80050ce:	f7fc f92f 	bl	8001330 <HAL_Delay>
      ms++;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3301      	adds	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f001 fa2c 	bl	8006536 <USB_GetMode>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <USB_SetCurrentMode+0x84>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b31      	cmp	r3, #49	; 0x31
 80050e8:	d9f0      	bls.n	80050cc <USB_SetCurrentMode+0x60>
 80050ea:	e001      	b.n	80050f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e005      	b.n	80050fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b32      	cmp	r3, #50	; 0x32
 80050f4:	d101      	bne.n	80050fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005104:	b084      	sub	sp, #16
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800511e:	2300      	movs	r3, #0
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	e009      	b.n	8005138 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	3340      	adds	r3, #64	; 0x40
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	2200      	movs	r2, #0
 8005130:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3301      	adds	r3, #1
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0e      	cmp	r3, #14
 800513c:	d9f2      	bls.n	8005124 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800513e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d11c      	bne.n	800517e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005152:	f043 0302 	orr.w	r3, r3, #2
 8005156:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
 800517c:	e00b      	b.n	8005196 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800519c:	461a      	mov	r2, r3
 800519e:	2300      	movs	r3, #0
 80051a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a8:	4619      	mov	r1, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b0:	461a      	mov	r2, r3
 80051b2:	680b      	ldr	r3, [r1, #0]
 80051b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d10c      	bne.n	80051d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d104      	bne.n	80051cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051c2:	2100      	movs	r1, #0
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f965 	bl	8005494 <USB_SetDevSpeed>
 80051ca:	e008      	b.n	80051de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051cc:	2101      	movs	r1, #1
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f960 	bl	8005494 <USB_SetDevSpeed>
 80051d4:	e003      	b.n	80051de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051d6:	2103      	movs	r1, #3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f95b 	bl	8005494 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051de:	2110      	movs	r1, #16
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f8f3 	bl	80053cc <USB_FlushTxFifo>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f91f 	bl	8005434 <USB_FlushRxFifo>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	461a      	mov	r2, r3
 8005208:	2300      	movs	r3, #0
 800520a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005212:	461a      	mov	r2, r3
 8005214:	2300      	movs	r3, #0
 8005216:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	461a      	mov	r2, r3
 8005220:	2300      	movs	r3, #0
 8005222:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005224:	2300      	movs	r3, #0
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	e043      	b.n	80052b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800523c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005240:	d118      	bne.n	8005274 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005254:	461a      	mov	r2, r3
 8005256:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	e013      	b.n	8005286 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	461a      	mov	r2, r3
 800526c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	e008      	b.n	8005286 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005280:	461a      	mov	r2, r3
 8005282:	2300      	movs	r3, #0
 8005284:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	461a      	mov	r2, r3
 8005294:	2300      	movs	r3, #0
 8005296:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	461a      	mov	r2, r3
 80052a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	3301      	adds	r3, #1
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d3b7      	bcc.n	800522a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	e043      	b.n	8005348 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d6:	d118      	bne.n	800530a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	461a      	mov	r2, r3
 80052ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e013      	b.n	800531c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	461a      	mov	r2, r3
 8005302:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	e008      	b.n	800531c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	461a      	mov	r2, r3
 8005318:	2300      	movs	r3, #0
 800531a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	461a      	mov	r2, r3
 800532a:	2300      	movs	r3, #0
 800532c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	461a      	mov	r2, r3
 800533c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005340:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	3301      	adds	r3, #1
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	429a      	cmp	r2, r3
 800534e:	d3b7      	bcc.n	80052c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005362:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005370:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2b00      	cmp	r3, #0
 8005376:	d105      	bne.n	8005384 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f043 0210 	orr.w	r2, r3, #16
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	4b0f      	ldr	r3, [pc, #60]	; (80053c8 <USB_DevInit+0x2c4>)
 800538a:	4313      	orrs	r3, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f043 0208 	orr.w	r2, r3, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d107      	bne.n	80053b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053b0:	f043 0304 	orr.w	r3, r3, #4
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053c4:	b004      	add	sp, #16
 80053c6:	4770      	bx	lr
 80053c8:	803c3800 	.word	0x803c3800

080053cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3301      	adds	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a13      	ldr	r2, [pc, #76]	; (8005430 <USB_FlushTxFifo+0x64>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d901      	bls.n	80053ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e01b      	b.n	8005424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	daf2      	bge.n	80053da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	019b      	lsls	r3, r3, #6
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4a08      	ldr	r2, [pc, #32]	; (8005430 <USB_FlushTxFifo+0x64>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e006      	b.n	8005424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b20      	cmp	r3, #32
 8005420:	d0f0      	beq.n	8005404 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	00030d40 	.word	0x00030d40

08005434 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3301      	adds	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a11      	ldr	r2, [pc, #68]	; (8005490 <USB_FlushRxFifo+0x5c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e018      	b.n	8005484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	daf2      	bge.n	8005440 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2210      	movs	r2, #16
 8005462:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3301      	adds	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4a08      	ldr	r2, [pc, #32]	; (8005490 <USB_FlushRxFifo+0x5c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d901      	bls.n	8005476 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e006      	b.n	8005484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b10      	cmp	r3, #16
 8005480:	d0f0      	beq.n	8005464 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	00030d40 	.word	0x00030d40

08005494 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b4:	4313      	orrs	r3, r2
 80054b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b087      	sub	sp, #28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0306 	and.w	r3, r3, #6
 80054de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]
 80054ea:	e00a      	b.n	8005502 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d002      	beq.n	80054f8 <USB_GetDevSpeed+0x32>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b06      	cmp	r3, #6
 80054f6:	d102      	bne.n	80054fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054f8:	2302      	movs	r3, #2
 80054fa:	75fb      	strb	r3, [r7, #23]
 80054fc:	e001      	b.n	8005502 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054fe:	230f      	movs	r3, #15
 8005500:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005502:	7dfb      	ldrb	r3, [r7, #23]
}
 8005504:	4618      	mov	r0, r3
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d13a      	bne.n	80055a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	2101      	movs	r1, #1
 800553e:	fa01 f303 	lsl.w	r3, r1, r3
 8005542:	b29b      	uxth	r3, r3
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800554a:	4313      	orrs	r3, r2
 800554c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d155      	bne.n	8005610 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	791b      	ldrb	r3, [r3, #4]
 800557e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005580:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	059b      	lsls	r3, r3, #22
 8005586:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005588:	4313      	orrs	r3, r2
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	e036      	b.n	8005610 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	69da      	ldr	r2, [r3, #28]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	2101      	movs	r1, #1
 80055b4:	fa01 f303 	lsl.w	r3, r1, r3
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	68f9      	ldr	r1, [r7, #12]
 80055bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c0:	4313      	orrs	r3, r2
 80055c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d11a      	bne.n	8005610 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	791b      	ldrb	r3, [r3, #4]
 80055f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055f6:	430b      	orrs	r3, r1
 80055f8:	4313      	orrs	r3, r2
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	440a      	add	r2, r1
 8005602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d161      	bne.n	8005700 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800564e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005652:	d11f      	bne.n	8005694 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005672:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005692:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	2101      	movs	r1, #1
 80056a6:	fa01 f303 	lsl.w	r3, r1, r3
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	43db      	mvns	r3, r3
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b4:	4013      	ands	r3, r2
 80056b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	2101      	movs	r1, #1
 80056ca:	fa01 f303 	lsl.w	r3, r1, r3
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	68f9      	ldr	r1, [r7, #12]
 80056d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d8:	4013      	ands	r3, r2
 80056da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	0159      	lsls	r1, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	440b      	add	r3, r1
 80056f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f6:	4619      	mov	r1, r3
 80056f8:	4b35      	ldr	r3, [pc, #212]	; (80057d0 <USB_DeactivateEndpoint+0x1b0>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]
 80056fe:	e060      	b.n	80057c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005716:	d11f      	bne.n	8005758 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005732:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005736:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005756:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	2101      	movs	r1, #1
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	041b      	lsls	r3, r3, #16
 8005770:	43db      	mvns	r3, r3
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005778:	4013      	ands	r3, r2
 800577a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	2101      	movs	r1, #1
 800578e:	fa01 f303 	lsl.w	r3, r1, r3
 8005792:	041b      	lsls	r3, r3, #16
 8005794:	43db      	mvns	r3, r3
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800579c:	4013      	ands	r3, r2
 800579e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	0159      	lsls	r1, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	440b      	add	r3, r1
 80057b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ba:	4619      	mov	r1, r3
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <USB_DeactivateEndpoint+0x1b4>)
 80057be:	4013      	ands	r3, r2
 80057c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	ec337800 	.word	0xec337800
 80057d4:	eff37800 	.word	0xeff37800

080057d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	4613      	mov	r3, r2
 80057e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	f040 815c 	bne.w	8005ab2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d132      	bne.n	8005868 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	440a      	add	r2, r1
 8005818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005820:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005824:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	0151      	lsls	r1, r2, #5
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	440a      	add	r2, r1
 800583c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005844:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	440a      	add	r2, r1
 800585c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005860:	0cdb      	lsrs	r3, r3, #19
 8005862:	04db      	lsls	r3, r3, #19
 8005864:	6113      	str	r3, [r2, #16]
 8005866:	e074      	b.n	8005952 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005882:	0cdb      	lsrs	r3, r3, #19
 8005884:	04db      	lsls	r3, r3, #19
 8005886:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6999      	ldr	r1, [r3, #24]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	440b      	add	r3, r1
 80058c4:	1e59      	subs	r1, r3, #1
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80058ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058d0:	4b9d      	ldr	r3, [pc, #628]	; (8005b48 <USB_EPStartXfer+0x370>)
 80058d2:	400b      	ands	r3, r1
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	0148      	lsls	r0, r1, #5
 80058d8:	69f9      	ldr	r1, [r7, #28]
 80058da:	4401      	add	r1, r0
 80058dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058e0:	4313      	orrs	r3, r2
 80058e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058fa:	69b9      	ldr	r1, [r7, #24]
 80058fc:	0148      	lsls	r0, r1, #5
 80058fe:	69f9      	ldr	r1, [r7, #28]
 8005900:	4401      	add	r1, r0
 8005902:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005906:	4313      	orrs	r3, r2
 8005908:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	791b      	ldrb	r3, [r3, #4]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d11f      	bne.n	8005952 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005930:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005950:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d14b      	bne.n	80059f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596c:	461a      	mov	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	791b      	ldrb	r3, [r3, #4]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d128      	bne.n	80059ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d110      	bne.n	80059ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	e00f      	b.n	80059ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e133      	b.n	8005c58 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a0e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	791b      	ldrb	r3, [r3, #4]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d015      	beq.n	8005a44 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 811b 	beq.w	8005c58 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	2101      	movs	r1, #1
 8005a34:	fa01 f303 	lsl.w	r3, r1, r3
 8005a38:	69f9      	ldr	r1, [r7, #28]
 8005a3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	634b      	str	r3, [r1, #52]	; 0x34
 8005a42:	e109      	b.n	8005c58 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d110      	bne.n	8005a76 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e00f      	b.n	8005a96 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6919      	ldr	r1, [r3, #16]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	781a      	ldrb	r2, [r3, #0]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	b298      	uxth	r0, r3
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fade 	bl	800606c <USB_WritePacket>
 8005ab0:	e0d2      	b.n	8005c58 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005acc:	0cdb      	lsrs	r3, r3, #19
 8005ace:	04db      	lsls	r3, r3, #19
 8005ad0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005af0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005af4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d126      	bne.n	8005b4c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b14:	69b9      	ldr	r1, [r7, #24]
 8005b16:	0148      	lsls	r0, r1, #5
 8005b18:	69f9      	ldr	r1, [r7, #28]
 8005b1a:	4401      	add	r1, r0
 8005b1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b20:	4313      	orrs	r3, r2
 8005b22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b42:	6113      	str	r3, [r2, #16]
 8005b44:	e03a      	b.n	8005bbc <USB_EPStartXfer+0x3e4>
 8005b46:	bf00      	nop
 8005b48:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	1e5a      	subs	r2, r3, #1
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	8afa      	ldrh	r2, [r7, #22]
 8005b68:	fb03 f202 	mul.w	r2, r3, r2
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	8afb      	ldrh	r3, [r7, #22]
 8005b80:	04d9      	lsls	r1, r3, #19
 8005b82:	4b38      	ldr	r3, [pc, #224]	; (8005c64 <USB_EPStartXfer+0x48c>)
 8005b84:	400b      	ands	r3, r1
 8005b86:	69b9      	ldr	r1, [r7, #24]
 8005b88:	0148      	lsls	r0, r1, #5
 8005b8a:	69f9      	ldr	r1, [r7, #28]
 8005b8c:	4401      	add	r1, r0
 8005b8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b92:	4313      	orrs	r3, r2
 8005b94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bac:	69b9      	ldr	r1, [r7, #24]
 8005bae:	0148      	lsls	r0, r1, #5
 8005bb0:	69f9      	ldr	r1, [r7, #28]
 8005bb2:	4401      	add	r1, r0
 8005bb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d10d      	bne.n	8005bde <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	6919      	ldr	r1, [r3, #16]
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	460a      	mov	r2, r1
 8005bdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	791b      	ldrb	r3, [r3, #4]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d128      	bne.n	8005c38 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d110      	bne.n	8005c18 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	0151      	lsls	r1, r2, #5
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	440a      	add	r2, r1
 8005c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	e00f      	b.n	8005c38 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3720      	adds	r7, #32
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	1ff80000 	.word	0x1ff80000

08005c68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	f040 80ce 	bne.w	8005e26 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d132      	bne.n	8005cf8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf0:	0cdb      	lsrs	r3, r3, #19
 8005cf2:	04db      	lsls	r3, r3, #19
 8005cf4:	6113      	str	r3, [r2, #16]
 8005cf6:	e04e      	b.n	8005d96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	0cdb      	lsrs	r3, r3, #19
 8005d14:	04db      	lsls	r3, r3, #19
 8005d16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d903      	bls.n	8005d50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d86:	6939      	ldr	r1, [r7, #16]
 8005d88:	0148      	lsls	r0, r1, #5
 8005d8a:	6979      	ldr	r1, [r7, #20]
 8005d8c:	4401      	add	r1, r0
 8005d8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d92:	4313      	orrs	r3, r2
 8005d94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d11e      	bne.n	8005dda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d009      	beq.n	8005db8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	461a      	mov	r2, r3
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	e097      	b.n	8005f0a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005df8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8083 	beq.w	8005f0a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	2101      	movs	r1, #1
 8005e16:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1a:	6979      	ldr	r1, [r7, #20]
 8005e1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e20:	4313      	orrs	r3, r2
 8005e22:	634b      	str	r3, [r1, #52]	; 0x34
 8005e24:	e071      	b.n	8005f0a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e40:	0cdb      	lsrs	r3, r3, #19
 8005e42:	04db      	lsls	r3, r3, #19
 8005e44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ea0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb8:	6939      	ldr	r1, [r7, #16]
 8005eba:	0148      	lsls	r0, r1, #5
 8005ebc:	6979      	ldr	r1, [r7, #20]
 8005ebe:	4401      	add	r1, r0
 8005ec0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d10d      	bne.n	8005eea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6919      	ldr	r1, [r3, #16]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	460a      	mov	r2, r1
 8005ee8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d14a      	bne.n	8005fcc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f4e:	f040 8086 	bne.w	800605e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	7812      	ldrb	r2, [r2, #0]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d902      	bls.n	8005fb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	75fb      	strb	r3, [r7, #23]
          break;
 8005fae:	e056      	b.n	800605e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc8:	d0e7      	beq.n	8005f9a <USB_EPStopXfer+0x82>
 8005fca:	e048      	b.n	800605e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fe4:	d13b      	bne.n	800605e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	7812      	ldrb	r2, [r2, #0]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006004:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006008:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	0151      	lsls	r1, r2, #5
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	440a      	add	r2, r1
 8006024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800602c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3301      	adds	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f242 7210 	movw	r2, #10000	; 0x2710
 800603a:	4293      	cmp	r3, r2
 800603c:	d902      	bls.n	8006044 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	75fb      	strb	r3, [r7, #23]
          break;
 8006042:	e00c      	b.n	800605e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800605c:	d0e7      	beq.n	800602e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006060:	4618      	mov	r0, r3
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800606c:	b480      	push	{r7}
 800606e:	b089      	sub	sp, #36	; 0x24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4611      	mov	r1, r2
 8006078:	461a      	mov	r2, r3
 800607a:	460b      	mov	r3, r1
 800607c:	71fb      	strb	r3, [r7, #7]
 800607e:	4613      	mov	r3, r2
 8006080:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800608a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800608e:	2b00      	cmp	r3, #0
 8006090:	d123      	bne.n	80060da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006092:	88bb      	ldrh	r3, [r7, #4]
 8006094:	3303      	adds	r3, #3
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	e018      	b.n	80060d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	031a      	lsls	r2, r3, #12
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ac:	461a      	mov	r2, r3
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	3301      	adds	r3, #1
 80060b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	3301      	adds	r3, #1
 80060be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	3301      	adds	r3, #1
 80060c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	3301      	adds	r3, #1
 80060ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	3301      	adds	r3, #1
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d3e2      	bcc.n	80060a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3724      	adds	r7, #36	; 0x24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b08b      	sub	sp, #44	; 0x2c
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	4613      	mov	r3, r2
 80060f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	089b      	lsrs	r3, r3, #2
 8006102:	b29b      	uxth	r3, r3
 8006104:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006106:	88fb      	ldrh	r3, [r7, #6]
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800610e:	2300      	movs	r3, #0
 8006110:	623b      	str	r3, [r7, #32]
 8006112:	e014      	b.n	800613e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	3301      	adds	r3, #1
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	3301      	adds	r3, #1
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	3301      	adds	r3, #1
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	3301      	adds	r3, #1
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	3301      	adds	r3, #1
 800613c:	623b      	str	r3, [r7, #32]
 800613e:	6a3a      	ldr	r2, [r7, #32]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	429a      	cmp	r2, r3
 8006144:	d3e6      	bcc.n	8006114 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006146:	8bfb      	ldrh	r3, [r7, #30]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01e      	beq.n	800618a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006156:	461a      	mov	r2, r3
 8006158:	f107 0310 	add.w	r3, r7, #16
 800615c:	6812      	ldr	r2, [r2, #0]
 800615e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
 800616c:	b2da      	uxtb	r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	701a      	strb	r2, [r3, #0]
      i++;
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	3301      	adds	r3, #1
 8006176:	623b      	str	r3, [r7, #32]
      pDest++;
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	3301      	adds	r3, #1
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800617e:	8bfb      	ldrh	r3, [r7, #30]
 8006180:	3b01      	subs	r3, #1
 8006182:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006184:	8bfb      	ldrh	r3, [r7, #30]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1ea      	bne.n	8006160 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800618c:	4618      	mov	r0, r3
 800618e:	372c      	adds	r7, #44	; 0x2c
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d12c      	bne.n	800620e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	db12      	blt.n	80061ec <USB_EPSetStall+0x54>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00f      	beq.n	80061ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006206:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	e02b      	b.n	8006266 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	db12      	blt.n	8006246 <USB_EPSetStall+0xae>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00f      	beq.n	8006246 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006240:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006244:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	440a      	add	r2, r1
 800625c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006264:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d128      	bne.n	80062e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	791b      	ldrb	r3, [r3, #4]
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d003      	beq.n	80062c0 <USB_EPClearStall+0x4c>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	791b      	ldrb	r3, [r3, #4]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d138      	bne.n	8006332 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	e027      	b.n	8006332 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006300:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	791b      	ldrb	r3, [r3, #4]
 8006306:	2b03      	cmp	r3, #3
 8006308:	d003      	beq.n	8006312 <USB_EPClearStall+0x9e>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	791b      	ldrb	r3, [r3, #4]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d10f      	bne.n	8006332 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800632c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006330:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800635e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006362:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006374:	68f9      	ldr	r1, [r7, #12]
 8006376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800637a:	4313      	orrs	r3, r2
 800637c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ba:	f023 0302 	bic.w	r3, r3, #2
 80063be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063e8:	f023 0303 	bic.w	r3, r3, #3
 80063ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063fc:	f043 0302 	orr.w	r3, r3, #2
 8006400:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4013      	ands	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006428:	68fb      	ldr	r3, [r7, #12]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	4013      	ands	r3, r2
 8006458:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	0c1b      	lsrs	r3, r3, #16
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	4013      	ands	r3, r2
 800648c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	b29b      	uxth	r3, r3
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800649e:	b480      	push	{r7}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	460b      	mov	r3, r1
 80064a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064ae:	78fb      	ldrb	r3, [r7, #3]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4013      	ands	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064cc:	68bb      	ldr	r3, [r7, #8]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064da:	b480      	push	{r7}
 80064dc:	b087      	sub	sp, #28
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	fa22 f303 	lsr.w	r3, r2, r3
 800650a:	01db      	lsls	r3, r3, #7
 800650c:	b2db      	uxtb	r3, r3
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4013      	ands	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006528:	68bb      	ldr	r3, [r7, #8]
}
 800652a:	4618      	mov	r0, r3
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	f003 0301 	and.w	r3, r3, #1
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006570:	f023 0307 	bic.w	r3, r3, #7
 8006574:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	460b      	mov	r3, r1
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	333c      	adds	r3, #60	; 0x3c
 80065ae:	3304      	adds	r3, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	4a26      	ldr	r2, [pc, #152]	; (8006650 <USB_EP0_OutStart+0xb8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d90a      	bls.n	80065d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065cc:	d101      	bne.n	80065d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e037      	b.n	8006642 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	461a      	mov	r2, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006600:	f043 0318 	orr.w	r3, r3, #24
 8006604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006614:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006618:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10f      	bne.n	8006640 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	461a      	mov	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800663e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	4f54300a 	.word	0x4f54300a

08006654 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a13      	ldr	r2, [pc, #76]	; (80066b8 <USB_CoreReset+0x64>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d901      	bls.n	8006672 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e01b      	b.n	80066aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	daf2      	bge.n	8006660 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f043 0201 	orr.w	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4a09      	ldr	r2, [pc, #36]	; (80066b8 <USB_CoreReset+0x64>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d901      	bls.n	800669c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e006      	b.n	80066aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d0f0      	beq.n	800668a <USB_CoreReset+0x36>

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	00030d40 	.word	0x00030d40

080066bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80066c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80066cc:	f002 fcc6 	bl	800905c <USBD_static_malloc>
 80066d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d109      	bne.n	80066ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	32b0      	adds	r2, #176	; 0xb0
 80066e2:	2100      	movs	r1, #0
 80066e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80066e8:	2302      	movs	r3, #2
 80066ea:	e0d4      	b.n	8006896 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80066ec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80066f0:	2100      	movs	r1, #0
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f002 feae 	bl	8009454 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	32b0      	adds	r2, #176	; 0xb0
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32b0      	adds	r2, #176	; 0xb0
 8006712:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	7c1b      	ldrb	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d138      	bne.n	8006796 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006724:	4b5e      	ldr	r3, [pc, #376]	; (80068a0 <USBD_CDC_Init+0x1e4>)
 8006726:	7819      	ldrb	r1, [r3, #0]
 8006728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800672c:	2202      	movs	r2, #2
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 fb71 	bl	8008e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006734:	4b5a      	ldr	r3, [pc, #360]	; (80068a0 <USBD_CDC_Init+0x1e4>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	3324      	adds	r3, #36	; 0x24
 800674a:	2201      	movs	r2, #1
 800674c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800674e:	4b55      	ldr	r3, [pc, #340]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 8006750:	7819      	ldrb	r1, [r3, #0]
 8006752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006756:	2202      	movs	r2, #2
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f002 fb5c 	bl	8008e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800675e:	4b51      	ldr	r3, [pc, #324]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	f003 020f 	and.w	r2, r3, #15
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	440b      	add	r3, r1
 8006772:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006776:	2201      	movs	r2, #1
 8006778:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800677a:	4b4b      	ldr	r3, [pc, #300]	; (80068a8 <USBD_CDC_Init+0x1ec>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	f003 020f 	and.w	r2, r3, #15
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	3326      	adds	r3, #38	; 0x26
 8006790:	2210      	movs	r2, #16
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	e035      	b.n	8006802 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006796:	4b42      	ldr	r3, [pc, #264]	; (80068a0 <USBD_CDC_Init+0x1e4>)
 8006798:	7819      	ldrb	r1, [r3, #0]
 800679a:	2340      	movs	r3, #64	; 0x40
 800679c:	2202      	movs	r2, #2
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f002 fb39 	bl	8008e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80067a4:	4b3e      	ldr	r3, [pc, #248]	; (80068a0 <USBD_CDC_Init+0x1e4>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f003 020f 	and.w	r2, r3, #15
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	3324      	adds	r3, #36	; 0x24
 80067ba:	2201      	movs	r2, #1
 80067bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80067be:	4b39      	ldr	r3, [pc, #228]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 80067c0:	7819      	ldrb	r1, [r3, #0]
 80067c2:	2340      	movs	r3, #64	; 0x40
 80067c4:	2202      	movs	r2, #2
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f002 fb25 	bl	8008e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80067cc:	4b35      	ldr	r3, [pc, #212]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f003 020f 	and.w	r2, r3, #15
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067e4:	2201      	movs	r2, #1
 80067e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067e8:	4b2f      	ldr	r3, [pc, #188]	; (80068a8 <USBD_CDC_Init+0x1ec>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f003 020f 	and.w	r2, r3, #15
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	3326      	adds	r3, #38	; 0x26
 80067fe:	2210      	movs	r2, #16
 8006800:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006802:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <USBD_CDC_Init+0x1ec>)
 8006804:	7819      	ldrb	r1, [r3, #0]
 8006806:	2308      	movs	r3, #8
 8006808:	2203      	movs	r2, #3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f002 fb03 	bl	8008e16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006810:	4b25      	ldr	r3, [pc, #148]	; (80068a8 <USBD_CDC_Init+0x1ec>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	f003 020f 	and.w	r2, r3, #15
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	3324      	adds	r3, #36	; 0x24
 8006826:	2201      	movs	r2, #1
 8006828:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	33b0      	adds	r3, #176	; 0xb0
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006860:	2302      	movs	r3, #2
 8006862:	e018      	b.n	8006896 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	7c1b      	ldrb	r3, [r3, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800686c:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 800686e:	7819      	ldrb	r1, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f002 fbba 	bl	8008ff4 <USBD_LL_PrepareReceive>
 8006880:	e008      	b.n	8006894 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006882:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <USBD_CDC_Init+0x1e8>)
 8006884:	7819      	ldrb	r1, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800688c:	2340      	movs	r3, #64	; 0x40
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f002 fbb0 	bl	8008ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	200000b7 	.word	0x200000b7
 80068a4:	200000b8 	.word	0x200000b8
 80068a8:	200000b9 	.word	0x200000b9

080068ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80068b8:	4b3a      	ldr	r3, [pc, #232]	; (80069a4 <USBD_CDC_DeInit+0xf8>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f002 facf 	bl	8008e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80068c4:	4b37      	ldr	r3, [pc, #220]	; (80069a4 <USBD_CDC_DeInit+0xf8>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f003 020f 	and.w	r2, r3, #15
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	3324      	adds	r3, #36	; 0x24
 80068da:	2200      	movs	r2, #0
 80068dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80068de:	4b32      	ldr	r3, [pc, #200]	; (80069a8 <USBD_CDC_DeInit+0xfc>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f002 fabc 	bl	8008e62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80068ea:	4b2f      	ldr	r3, [pc, #188]	; (80069a8 <USBD_CDC_DeInit+0xfc>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	f003 020f 	and.w	r2, r3, #15
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	4613      	mov	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	440b      	add	r3, r1
 80068fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006902:	2200      	movs	r2, #0
 8006904:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006906:	4b29      	ldr	r3, [pc, #164]	; (80069ac <USBD_CDC_DeInit+0x100>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f002 faa8 	bl	8008e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006912:	4b26      	ldr	r3, [pc, #152]	; (80069ac <USBD_CDC_DeInit+0x100>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f003 020f 	and.w	r2, r3, #15
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	3324      	adds	r3, #36	; 0x24
 8006928:	2200      	movs	r2, #0
 800692a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800692c:	4b1f      	ldr	r3, [pc, #124]	; (80069ac <USBD_CDC_DeInit+0x100>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 020f 	and.w	r2, r3, #15
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	440b      	add	r3, r1
 8006940:	3326      	adds	r3, #38	; 0x26
 8006942:	2200      	movs	r2, #0
 8006944:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	32b0      	adds	r2, #176	; 0xb0
 8006950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01f      	beq.n	8006998 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	33b0      	adds	r3, #176	; 0xb0
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	32b0      	adds	r2, #176	; 0xb0
 8006976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697a:	4618      	mov	r0, r3
 800697c:	f002 fb7c 	bl	8009078 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	32b0      	adds	r2, #176	; 0xb0
 800698a:	2100      	movs	r1, #0
 800698c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	200000b7 	.word	0x200000b7
 80069a8:	200000b8 	.word	0x200000b8
 80069ac:	200000b9 	.word	0x200000b9

080069b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	32b0      	adds	r2, #176	; 0xb0
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80069dc:	2303      	movs	r3, #3
 80069de:	e0bf      	b.n	8006b60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d050      	beq.n	8006a8e <USBD_CDC_Setup+0xde>
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	f040 80af 	bne.w	8006b50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	88db      	ldrh	r3, [r3, #6]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d03a      	beq.n	8006a70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	b25b      	sxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	da1b      	bge.n	8006a3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	33b0      	adds	r3, #176	; 0xb0
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006a1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	88d2      	ldrh	r2, [r2, #6]
 8006a20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	88db      	ldrh	r3, [r3, #6]
 8006a26:	2b07      	cmp	r3, #7
 8006a28:	bf28      	it	cs
 8006a2a:	2307      	movcs	r3, #7
 8006a2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	89fa      	ldrh	r2, [r7, #14]
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fd89 	bl	800854c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006a3a:	e090      	b.n	8006b5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	785a      	ldrb	r2, [r3, #1]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	88db      	ldrh	r3, [r3, #6]
 8006a4a:	2b3f      	cmp	r3, #63	; 0x3f
 8006a4c:	d803      	bhi.n	8006a56 <USBD_CDC_Setup+0xa6>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	88db      	ldrh	r3, [r3, #6]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	e000      	b.n	8006a58 <USBD_CDC_Setup+0xa8>
 8006a56:	2240      	movs	r2, #64	; 0x40
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006a5e:	6939      	ldr	r1, [r7, #16]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a66:	461a      	mov	r2, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 fd9b 	bl	80085a4 <USBD_CtlPrepareRx>
      break;
 8006a6e:	e076      	b.n	8006b5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	33b0      	adds	r3, #176	; 0xb0
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	7850      	ldrb	r0, [r2, #1]
 8006a86:	2200      	movs	r2, #0
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	4798      	blx	r3
      break;
 8006a8c:	e067      	b.n	8006b5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	2b0b      	cmp	r3, #11
 8006a94:	d851      	bhi.n	8006b3a <USBD_CDC_Setup+0x18a>
 8006a96:	a201      	add	r2, pc, #4	; (adr r2, 8006a9c <USBD_CDC_Setup+0xec>)
 8006a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9c:	08006acd 	.word	0x08006acd
 8006aa0:	08006b49 	.word	0x08006b49
 8006aa4:	08006b3b 	.word	0x08006b3b
 8006aa8:	08006b3b 	.word	0x08006b3b
 8006aac:	08006b3b 	.word	0x08006b3b
 8006ab0:	08006b3b 	.word	0x08006b3b
 8006ab4:	08006b3b 	.word	0x08006b3b
 8006ab8:	08006b3b 	.word	0x08006b3b
 8006abc:	08006b3b 	.word	0x08006b3b
 8006ac0:	08006b3b 	.word	0x08006b3b
 8006ac4:	08006af7 	.word	0x08006af7
 8006ac8:	08006b21 	.word	0x08006b21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d107      	bne.n	8006ae8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ad8:	f107 030a 	add.w	r3, r7, #10
 8006adc:	2202      	movs	r2, #2
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 fd33 	bl	800854c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ae6:	e032      	b.n	8006b4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fcbd 	bl	800846a <USBD_CtlError>
            ret = USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	75fb      	strb	r3, [r7, #23]
          break;
 8006af4:	e02b      	b.n	8006b4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d107      	bne.n	8006b12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b02:	f107 030d 	add.w	r3, r7, #13
 8006b06:	2201      	movs	r2, #1
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 fd1e 	bl	800854c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b10:	e01d      	b.n	8006b4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 fca8 	bl	800846a <USBD_CtlError>
            ret = USBD_FAIL;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b1e:	e016      	b.n	8006b4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d00f      	beq.n	8006b4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 fc9b 	bl	800846a <USBD_CtlError>
            ret = USBD_FAIL;
 8006b34:	2303      	movs	r3, #3
 8006b36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b38:	e008      	b.n	8006b4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 fc94 	bl	800846a <USBD_CtlError>
          ret = USBD_FAIL;
 8006b42:	2303      	movs	r3, #3
 8006b44:	75fb      	strb	r3, [r7, #23]
          break;
 8006b46:	e002      	b.n	8006b4e <USBD_CDC_Setup+0x19e>
          break;
 8006b48:	bf00      	nop
 8006b4a:	e008      	b.n	8006b5e <USBD_CDC_Setup+0x1ae>
          break;
 8006b4c:	bf00      	nop
      }
      break;
 8006b4e:	e006      	b.n	8006b5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fc89 	bl	800846a <USBD_CtlError>
      ret = USBD_FAIL;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	32b0      	adds	r2, #176	; 0xb0
 8006b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e065      	b.n	8006c5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	32b0      	adds	r2, #176	; 0xb0
 8006b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	f003 020f 	and.w	r2, r3, #15
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	3318      	adds	r3, #24
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d02f      	beq.n	8006c1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	f003 020f 	and.w	r2, r3, #15
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	3318      	adds	r3, #24
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	f003 010f 	and.w	r1, r3, #15
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	440b      	add	r3, r1
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4403      	add	r3, r0
 8006be4:	3348      	adds	r3, #72	; 0x48
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
 8006bf0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d112      	bne.n	8006c1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	f003 020f 	and.w	r2, r3, #15
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	3318      	adds	r3, #24
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c0e:	78f9      	ldrb	r1, [r7, #3]
 8006c10:	2300      	movs	r3, #0
 8006c12:	2200      	movs	r2, #0
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f002 f9cc 	bl	8008fb2 <USBD_LL_Transmit>
 8006c1a:	e01f      	b.n	8006c5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	33b0      	adds	r3, #176	; 0xb0
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d010      	beq.n	8006c5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	33b0      	adds	r3, #176	; 0xb0
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006c58:	78fa      	ldrb	r2, [r7, #3]
 8006c5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	32b0      	adds	r2, #176	; 0xb0
 8006c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	32b0      	adds	r2, #176	; 0xb0
 8006c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e01a      	b.n	8006cce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f002 f9ca 	bl	8009036 <USBD_LL_GetRxDataSize>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	33b0      	adds	r3, #176	; 0xb0
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	32b0      	adds	r2, #176	; 0xb0
 8006ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e025      	b.n	8006d44 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	33b0      	adds	r3, #176	; 0xb0
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d01a      	beq.n	8006d42 <USBD_CDC_EP0_RxReady+0x6c>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d12:	2bff      	cmp	r3, #255	; 0xff
 8006d14:	d015      	beq.n	8006d42 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	33b0      	adds	r3, #176	; 0xb0
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006d2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d36:	b292      	uxth	r2, r2
 8006d38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	22ff      	movs	r2, #255	; 0xff
 8006d3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d54:	2182      	movs	r1, #130	; 0x82
 8006d56:	4818      	ldr	r0, [pc, #96]	; (8006db8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d58:	f000 fd4f 	bl	80077fa <USBD_GetEpDesc>
 8006d5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d5e:	2101      	movs	r1, #1
 8006d60:	4815      	ldr	r0, [pc, #84]	; (8006db8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d62:	f000 fd4a 	bl	80077fa <USBD_GetEpDesc>
 8006d66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d68:	2181      	movs	r1, #129	; 0x81
 8006d6a:	4813      	ldr	r0, [pc, #76]	; (8006db8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d6c:	f000 fd45 	bl	80077fa <USBD_GetEpDesc>
 8006d70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d006      	beq.n	8006d92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d8c:	711a      	strb	r2, [r3, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da0:	711a      	strb	r2, [r3, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2243      	movs	r2, #67	; 0x43
 8006daa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dac:	4b02      	ldr	r3, [pc, #8]	; (8006db8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000074 	.word	0x20000074

08006dbc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006dc4:	2182      	movs	r1, #130	; 0x82
 8006dc6:	4818      	ldr	r0, [pc, #96]	; (8006e28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006dc8:	f000 fd17 	bl	80077fa <USBD_GetEpDesc>
 8006dcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006dce:	2101      	movs	r1, #1
 8006dd0:	4815      	ldr	r0, [pc, #84]	; (8006e28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006dd2:	f000 fd12 	bl	80077fa <USBD_GetEpDesc>
 8006dd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006dd8:	2181      	movs	r1, #129	; 0x81
 8006dda:	4813      	ldr	r0, [pc, #76]	; (8006e28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ddc:	f000 fd0d 	bl	80077fa <USBD_GetEpDesc>
 8006de0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2210      	movs	r2, #16
 8006dec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d006      	beq.n	8006e02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2200      	movs	r2, #0
 8006df8:	711a      	strb	r2, [r3, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f042 0202 	orr.w	r2, r2, #2
 8006e00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d006      	beq.n	8006e16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	711a      	strb	r2, [r3, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f042 0202 	orr.w	r2, r2, #2
 8006e14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2243      	movs	r2, #67	; 0x43
 8006e1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e1c:	4b02      	ldr	r3, [pc, #8]	; (8006e28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000074 	.word	0x20000074

08006e2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e34:	2182      	movs	r1, #130	; 0x82
 8006e36:	4818      	ldr	r0, [pc, #96]	; (8006e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e38:	f000 fcdf 	bl	80077fa <USBD_GetEpDesc>
 8006e3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e3e:	2101      	movs	r1, #1
 8006e40:	4815      	ldr	r0, [pc, #84]	; (8006e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e42:	f000 fcda 	bl	80077fa <USBD_GetEpDesc>
 8006e46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e48:	2181      	movs	r1, #129	; 0x81
 8006e4a:	4813      	ldr	r0, [pc, #76]	; (8006e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e4c:	f000 fcd5 	bl	80077fa <USBD_GetEpDesc>
 8006e50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2210      	movs	r2, #16
 8006e5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d006      	beq.n	8006e72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e6c:	711a      	strb	r2, [r3, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d006      	beq.n	8006e86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e80:	711a      	strb	r2, [r3, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2243      	movs	r2, #67	; 0x43
 8006e8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e8c:	4b02      	ldr	r3, [pc, #8]	; (8006e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000074 	.word	0x20000074

08006e9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	220a      	movs	r2, #10
 8006ea8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006eaa:	4b03      	ldr	r3, [pc, #12]	; (8006eb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	20000030 	.word	0x20000030

08006ebc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e009      	b.n	8006ee4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	33b0      	adds	r3, #176	; 0xb0
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	32b0      	adds	r2, #176	; 0xb0
 8006f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e008      	b.n	8006f28 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	371c      	adds	r7, #28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	32b0      	adds	r2, #176	; 0xb0
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e004      	b.n	8006f62 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
	...

08006f70 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32b0      	adds	r2, #176	; 0xb0
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	32b0      	adds	r2, #176	; 0xb0
 8006f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e025      	b.n	8006fee <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d11f      	bne.n	8006fec <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006fb4:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <USBD_CDC_TransmitPacket+0x88>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	f003 020f 	and.w	r2, r3, #15
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4403      	add	r3, r0
 8006fce:	3318      	adds	r3, #24
 8006fd0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <USBD_CDC_TransmitPacket+0x88>)
 8006fd4:	7819      	ldrb	r1, [r3, #0]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 ffe5 	bl	8008fb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200000b7 	.word	0x200000b7

08006ffc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	32b0      	adds	r2, #176	; 0xb0
 800700e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007012:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	32b0      	adds	r2, #176	; 0xb0
 800701e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007026:	2303      	movs	r3, #3
 8007028:	e018      	b.n	800705c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	7c1b      	ldrb	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007032:	4b0c      	ldr	r3, [pc, #48]	; (8007064 <USBD_CDC_ReceivePacket+0x68>)
 8007034:	7819      	ldrb	r1, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800703c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 ffd7 	bl	8008ff4 <USBD_LL_PrepareReceive>
 8007046:	e008      	b.n	800705a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007048:	4b06      	ldr	r3, [pc, #24]	; (8007064 <USBD_CDC_ReceivePacket+0x68>)
 800704a:	7819      	ldrb	r1, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007052:	2340      	movs	r3, #64	; 0x40
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 ffcd 	bl	8008ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	200000b8 	.word	0x200000b8

08007068 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	e01f      	b.n	80070c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	79fa      	ldrb	r2, [r7, #7]
 80070b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f001 fe47 	bl	8008d48 <USBD_LL_Init>
 80070ba:	4603      	mov	r3, r0
 80070bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80070dc:	2303      	movs	r3, #3
 80070de:	e025      	b.n	800712c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	32ae      	adds	r2, #174	; 0xae
 80070f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00f      	beq.n	800711c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	32ae      	adds	r2, #174	; 0xae
 8007106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	f107 020e 	add.w	r2, r7, #14
 8007110:	4610      	mov	r0, r2
 8007112:	4798      	blx	r3
 8007114:	4602      	mov	r2, r0
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fe4f 	bl	8008de0 <USBD_LL_Start>
 8007142:	4603      	mov	r3, r0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007154:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007156:	4618      	mov	r0, r3
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	78fa      	ldrb	r2, [r7, #3]
 8007186:	4611      	mov	r1, r2
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	78fa      	ldrb	r2, [r7, #3]
 80071b4:	4611      	mov	r1, r2
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80071c0:	2303      	movs	r3, #3
 80071c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f001 f908 	bl	80083f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80071f4:	461a      	mov	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007202:	f003 031f 	and.w	r3, r3, #31
 8007206:	2b02      	cmp	r3, #2
 8007208:	d01a      	beq.n	8007240 <USBD_LL_SetupStage+0x72>
 800720a:	2b02      	cmp	r3, #2
 800720c:	d822      	bhi.n	8007254 <USBD_LL_SetupStage+0x86>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <USBD_LL_SetupStage+0x4a>
 8007212:	2b01      	cmp	r3, #1
 8007214:	d00a      	beq.n	800722c <USBD_LL_SetupStage+0x5e>
 8007216:	e01d      	b.n	8007254 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fb5f 	bl	80078e4 <USBD_StdDevReq>
 8007226:	4603      	mov	r3, r0
 8007228:	73fb      	strb	r3, [r7, #15]
      break;
 800722a:	e020      	b.n	800726e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fbc7 	bl	80079c8 <USBD_StdItfReq>
 800723a:	4603      	mov	r3, r0
 800723c:	73fb      	strb	r3, [r7, #15]
      break;
 800723e:	e016      	b.n	800726e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc29 	bl	8007aa0 <USBD_StdEPReq>
 800724e:	4603      	mov	r3, r0
 8007250:	73fb      	strb	r3, [r7, #15]
      break;
 8007252:	e00c      	b.n	800726e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800725a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800725e:	b2db      	uxtb	r3, r3
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 fe1c 	bl	8008ea0 <USBD_LL_StallEP>
 8007268:	4603      	mov	r3, r0
 800726a:	73fb      	strb	r3, [r7, #15]
      break;
 800726c:	bf00      	nop
  }

  return ret;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	460b      	mov	r3, r1
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d16e      	bne.n	800736e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007296:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800729e:	2b03      	cmp	r3, #3
 80072a0:	f040 8098 	bne.w	80073d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d913      	bls.n	80072d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	1ad2      	subs	r2, r2, r3
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	4293      	cmp	r3, r2
 80072c8:	bf28      	it	cs
 80072ca:	4613      	movcs	r3, r2
 80072cc:	461a      	mov	r2, r3
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f001 f984 	bl	80085de <USBD_CtlContinueRx>
 80072d6:	e07d      	b.n	80073d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d014      	beq.n	8007310 <USBD_LL_DataOutStage+0x98>
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d81d      	bhi.n	8007326 <USBD_LL_DataOutStage+0xae>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <USBD_LL_DataOutStage+0x7c>
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d003      	beq.n	80072fa <USBD_LL_DataOutStage+0x82>
 80072f2:	e018      	b.n	8007326 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	75bb      	strb	r3, [r7, #22]
            break;
 80072f8:	e018      	b.n	800732c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007300:	b2db      	uxtb	r3, r3
 8007302:	4619      	mov	r1, r3
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 fa5e 	bl	80077c6 <USBD_CoreFindIF>
 800730a:	4603      	mov	r3, r0
 800730c:	75bb      	strb	r3, [r7, #22]
            break;
 800730e:	e00d      	b.n	800732c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007316:	b2db      	uxtb	r3, r3
 8007318:	4619      	mov	r1, r3
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fa60 	bl	80077e0 <USBD_CoreFindEP>
 8007320:	4603      	mov	r3, r0
 8007322:	75bb      	strb	r3, [r7, #22]
            break;
 8007324:	e002      	b.n	800732c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	75bb      	strb	r3, [r7, #22]
            break;
 800732a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800732c:	7dbb      	ldrb	r3, [r7, #22]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d119      	bne.n	8007366 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d113      	bne.n	8007366 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800733e:	7dba      	ldrb	r2, [r7, #22]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	32ae      	adds	r2, #174	; 0xae
 8007344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800734e:	7dba      	ldrb	r2, [r7, #22]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007356:	7dba      	ldrb	r2, [r7, #22]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	32ae      	adds	r2, #174	; 0xae
 800735c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f001 f94a 	bl	8008600 <USBD_CtlSendStatus>
 800736c:	e032      	b.n	80073d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007374:	b2db      	uxtb	r3, r3
 8007376:	4619      	mov	r1, r3
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fa31 	bl	80077e0 <USBD_CoreFindEP>
 800737e:	4603      	mov	r3, r0
 8007380:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007382:	7dbb      	ldrb	r3, [r7, #22]
 8007384:	2bff      	cmp	r3, #255	; 0xff
 8007386:	d025      	beq.n	80073d4 <USBD_LL_DataOutStage+0x15c>
 8007388:	7dbb      	ldrb	r3, [r7, #22]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d122      	bne.n	80073d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b03      	cmp	r3, #3
 8007398:	d117      	bne.n	80073ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800739a:	7dba      	ldrb	r2, [r7, #22]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	32ae      	adds	r2, #174	; 0xae
 80073a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00f      	beq.n	80073ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80073aa:	7dba      	ldrb	r2, [r7, #22]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80073b2:	7dba      	ldrb	r2, [r7, #22]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	32ae      	adds	r2, #174	; 0xae
 80073b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	7afa      	ldrb	r2, [r7, #11]
 80073c0:	4611      	mov	r1, r2
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	4798      	blx	r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80073d0:	7dfb      	ldrb	r3, [r7, #23]
 80073d2:	e000      	b.n	80073d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b086      	sub	sp, #24
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	460b      	mov	r3, r1
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80073ec:	7afb      	ldrb	r3, [r7, #11]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d16f      	bne.n	80074d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3314      	adds	r3, #20
 80073f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d15a      	bne.n	80074b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	429a      	cmp	r2, r3
 800740c:	d914      	bls.n	8007438 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	689a      	ldr	r2, [r3, #8]
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	1ad2      	subs	r2, r2, r3
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	461a      	mov	r2, r3
 8007422:	6879      	ldr	r1, [r7, #4]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f001 f8ac 	bl	8008582 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800742a:	2300      	movs	r3, #0
 800742c:	2200      	movs	r2, #0
 800742e:	2100      	movs	r1, #0
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f001 fddf 	bl	8008ff4 <USBD_LL_PrepareReceive>
 8007436:	e03f      	b.n	80074b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	429a      	cmp	r2, r3
 8007442:	d11c      	bne.n	800747e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800744c:	429a      	cmp	r2, r3
 800744e:	d316      	bcc.n	800747e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800745a:	429a      	cmp	r2, r3
 800745c:	d20f      	bcs.n	800747e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f001 f88d 	bl	8008582 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007470:	2300      	movs	r3, #0
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f001 fdbc 	bl	8008ff4 <USBD_LL_PrepareReceive>
 800747c:	e01c      	b.n	80074b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b03      	cmp	r3, #3
 8007488:	d10f      	bne.n	80074aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80074aa:	2180      	movs	r1, #128	; 0x80
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f001 fcf7 	bl	8008ea0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f001 f8b7 	bl	8008626 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d03a      	beq.n	8007538 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff fe42 	bl	800714c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074d0:	e032      	b.n	8007538 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80074d2:	7afb      	ldrb	r3, [r7, #11]
 80074d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	4619      	mov	r1, r3
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f97f 	bl	80077e0 <USBD_CoreFindEP>
 80074e2:	4603      	mov	r3, r0
 80074e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	2bff      	cmp	r3, #255	; 0xff
 80074ea:	d025      	beq.n	8007538 <USBD_LL_DataInStage+0x15a>
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d122      	bne.n	8007538 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d11c      	bne.n	8007538 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80074fe:	7dfa      	ldrb	r2, [r7, #23]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	32ae      	adds	r2, #174	; 0xae
 8007504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d014      	beq.n	8007538 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800750e:	7dfa      	ldrb	r2, [r7, #23]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007516:	7dfa      	ldrb	r2, [r7, #23]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	32ae      	adds	r2, #174	; 0xae
 800751c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	7afa      	ldrb	r2, [r7, #11]
 8007524:	4611      	mov	r1, r2
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	4798      	blx	r3
 800752a:	4603      	mov	r3, r0
 800752c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800752e:	7dbb      	ldrb	r3, [r7, #22]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007534:	7dbb      	ldrb	r3, [r7, #22]
 8007536:	e000      	b.n	800753a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d014      	beq.n	80075a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00e      	beq.n	80075a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6852      	ldr	r2, [r2, #4]
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	4611      	mov	r1, r2
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80075a4:	2303      	movs	r3, #3
 80075a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075a8:	2340      	movs	r3, #64	; 0x40
 80075aa:	2200      	movs	r2, #0
 80075ac:	2100      	movs	r1, #0
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 fc31 	bl	8008e16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2240      	movs	r2, #64	; 0x40
 80075c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075c4:	2340      	movs	r3, #64	; 0x40
 80075c6:	2200      	movs	r2, #0
 80075c8:	2180      	movs	r1, #128	; 0x80
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f001 fc23 	bl	8008e16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2240      	movs	r2, #64	; 0x40
 80075da:	621a      	str	r2, [r3, #32]

  return ret;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	460b      	mov	r3, r1
 80075f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	78fa      	ldrb	r2, [r7, #3]
 80075f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007614:	b2da      	uxtb	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2204      	movs	r2, #4
 8007620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b04      	cmp	r3, #4
 8007644:	d106      	bne.n	8007654 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800764c:	b2da      	uxtb	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b03      	cmp	r3, #3
 8007674:	d110      	bne.n	8007698 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	32ae      	adds	r2, #174	; 0xae
 80076b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e01c      	b.n	80076fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b03      	cmp	r3, #3
 80076ce:	d115      	bne.n	80076fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	32ae      	adds	r2, #174	; 0xae
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	32ae      	adds	r2, #174	; 0xae
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	4611      	mov	r1, r2
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	32ae      	adds	r2, #174	; 0xae
 800771c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007724:	2303      	movs	r3, #3
 8007726:	e01c      	b.n	8007762 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b03      	cmp	r3, #3
 8007732:	d115      	bne.n	8007760 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32ae      	adds	r2, #174	; 0xae
 800773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	32ae      	adds	r2, #174	; 0xae
 8007752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	78fa      	ldrb	r2, [r7, #3]
 800775a:	4611      	mov	r1, r2
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00e      	beq.n	80077bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	6852      	ldr	r2, [r2, #4]
 80077aa:	b2d2      	uxtb	r2, r2
 80077ac:	4611      	mov	r1, r2
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	4798      	blx	r3
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80077b8:	2303      	movs	r3, #3
 80077ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	429a      	cmp	r2, r3
 8007820:	d920      	bls.n	8007864 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800782a:	e013      	b.n	8007854 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800782c:	f107 030a 	add.w	r3, r7, #10
 8007830:	4619      	mov	r1, r3
 8007832:	6978      	ldr	r0, [r7, #20]
 8007834:	f000 f81b 	bl	800786e <USBD_GetNextDesc>
 8007838:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	785b      	ldrb	r3, [r3, #1]
 800783e:	2b05      	cmp	r3, #5
 8007840:	d108      	bne.n	8007854 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	789b      	ldrb	r3, [r3, #2]
 800784a:	78fa      	ldrb	r2, [r7, #3]
 800784c:	429a      	cmp	r2, r3
 800784e:	d008      	beq.n	8007862 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	885b      	ldrh	r3, [r3, #2]
 8007858:	b29a      	uxth	r2, r3
 800785a:	897b      	ldrh	r3, [r7, #10]
 800785c:	429a      	cmp	r2, r3
 800785e:	d8e5      	bhi.n	800782c <USBD_GetEpDesc+0x32>
 8007860:	e000      	b.n	8007864 <USBD_GetEpDesc+0x6a>
          break;
 8007862:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007864:	693b      	ldr	r3, [r7, #16]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	881a      	ldrh	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	4413      	add	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4413      	add	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800789a:	68fb      	ldr	r3, [r7, #12]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	3301      	adds	r3, #1
 80078be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80078c6:	8a3b      	ldrh	r3, [r7, #16]
 80078c8:	021b      	lsls	r3, r3, #8
 80078ca:	b21a      	sxth	r2, r3
 80078cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	b21b      	sxth	r3, r3
 80078d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80078d6:	89fb      	ldrh	r3, [r7, #14]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	371c      	adds	r7, #28
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d005      	beq.n	800790a <USBD_StdDevReq+0x26>
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d857      	bhi.n	80079b2 <USBD_StdDevReq+0xce>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00f      	beq.n	8007926 <USBD_StdDevReq+0x42>
 8007906:	2b20      	cmp	r3, #32
 8007908:	d153      	bne.n	80079b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	32ae      	adds	r2, #174	; 0xae
 8007914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	4798      	blx	r3
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]
      break;
 8007924:	e04a      	b.n	80079bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	785b      	ldrb	r3, [r3, #1]
 800792a:	2b09      	cmp	r3, #9
 800792c:	d83b      	bhi.n	80079a6 <USBD_StdDevReq+0xc2>
 800792e:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <USBD_StdDevReq+0x50>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	08007989 	.word	0x08007989
 8007938:	0800799d 	.word	0x0800799d
 800793c:	080079a7 	.word	0x080079a7
 8007940:	08007993 	.word	0x08007993
 8007944:	080079a7 	.word	0x080079a7
 8007948:	08007967 	.word	0x08007967
 800794c:	0800795d 	.word	0x0800795d
 8007950:	080079a7 	.word	0x080079a7
 8007954:	0800797f 	.word	0x0800797f
 8007958:	08007971 	.word	0x08007971
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa3c 	bl	8007ddc <USBD_GetDescriptor>
          break;
 8007964:	e024      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fba1 	bl	80080b0 <USBD_SetAddress>
          break;
 800796e:	e01f      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fbe0 	bl	8008138 <USBD_SetConfig>
 8007978:	4603      	mov	r3, r0
 800797a:	73fb      	strb	r3, [r7, #15]
          break;
 800797c:	e018      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fc83 	bl	800828c <USBD_GetConfig>
          break;
 8007986:	e013      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fcb4 	bl	80082f8 <USBD_GetStatus>
          break;
 8007990:	e00e      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fce3 	bl	8008360 <USBD_SetFeature>
          break;
 800799a:	e009      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fd07 	bl	80083b2 <USBD_ClrFeature>
          break;
 80079a4:	e004      	b.n	80079b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fd5e 	bl	800846a <USBD_CtlError>
          break;
 80079ae:	bf00      	nop
      }
      break;
 80079b0:	e004      	b.n	80079bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fd58 	bl	800846a <USBD_CtlError>
      break;
 80079ba:	bf00      	nop
  }

  return ret;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop

080079c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d005      	beq.n	80079ee <USBD_StdItfReq+0x26>
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d852      	bhi.n	8007a8c <USBD_StdItfReq+0xc4>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <USBD_StdItfReq+0x26>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d14e      	bne.n	8007a8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d840      	bhi.n	8007a7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	889b      	ldrh	r3, [r3, #4]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d836      	bhi.n	8007a74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	889b      	ldrh	r3, [r3, #4]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff fed9 	bl	80077c6 <USBD_CoreFindIF>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2bff      	cmp	r3, #255	; 0xff
 8007a1c:	d01d      	beq.n	8007a5a <USBD_StdItfReq+0x92>
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d11a      	bne.n	8007a5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007a24:	7bba      	ldrb	r2, [r7, #14]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	32ae      	adds	r2, #174	; 0xae
 8007a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00f      	beq.n	8007a54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007a34:	7bba      	ldrb	r2, [r7, #14]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a3c:	7bba      	ldrb	r2, [r7, #14]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	32ae      	adds	r2, #174	; 0xae
 8007a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a52:	e004      	b.n	8007a5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007a54:	2303      	movs	r3, #3
 8007a56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a58:	e001      	b.n	8007a5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	88db      	ldrh	r3, [r3, #6]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d110      	bne.n	8007a88 <USBD_StdItfReq+0xc0>
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10d      	bne.n	8007a88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fdc7 	bl	8008600 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a72:	e009      	b.n	8007a88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fcf7 	bl	800846a <USBD_CtlError>
          break;
 8007a7c:	e004      	b.n	8007a88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fcf2 	bl	800846a <USBD_CtlError>
          break;
 8007a86:	e000      	b.n	8007a8a <USBD_StdItfReq+0xc2>
          break;
 8007a88:	bf00      	nop
      }
      break;
 8007a8a:	e004      	b.n	8007a96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fceb 	bl	800846a <USBD_CtlError>
      break;
 8007a94:	bf00      	nop
  }

  return ret;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	889b      	ldrh	r3, [r3, #4]
 8007ab2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007abc:	2b40      	cmp	r3, #64	; 0x40
 8007abe:	d007      	beq.n	8007ad0 <USBD_StdEPReq+0x30>
 8007ac0:	2b40      	cmp	r3, #64	; 0x40
 8007ac2:	f200 817f 	bhi.w	8007dc4 <USBD_StdEPReq+0x324>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d02a      	beq.n	8007b20 <USBD_StdEPReq+0x80>
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	f040 817a 	bne.w	8007dc4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff fe83 	bl	80077e0 <USBD_CoreFindEP>
 8007ada:	4603      	mov	r3, r0
 8007adc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ade:	7b7b      	ldrb	r3, [r7, #13]
 8007ae0:	2bff      	cmp	r3, #255	; 0xff
 8007ae2:	f000 8174 	beq.w	8007dce <USBD_StdEPReq+0x32e>
 8007ae6:	7b7b      	ldrb	r3, [r7, #13]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f040 8170 	bne.w	8007dce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007aee:	7b7a      	ldrb	r2, [r7, #13]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007af6:	7b7a      	ldrb	r2, [r7, #13]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	32ae      	adds	r2, #174	; 0xae
 8007afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 8163 	beq.w	8007dce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007b08:	7b7a      	ldrb	r2, [r7, #13]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	32ae      	adds	r2, #174	; 0xae
 8007b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b1e:	e156      	b.n	8007dce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	785b      	ldrb	r3, [r3, #1]
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d008      	beq.n	8007b3a <USBD_StdEPReq+0x9a>
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	f300 8145 	bgt.w	8007db8 <USBD_StdEPReq+0x318>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 809b 	beq.w	8007c6a <USBD_StdEPReq+0x1ca>
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d03c      	beq.n	8007bb2 <USBD_StdEPReq+0x112>
 8007b38:	e13e      	b.n	8007db8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d002      	beq.n	8007b4c <USBD_StdEPReq+0xac>
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d016      	beq.n	8007b78 <USBD_StdEPReq+0xd8>
 8007b4a:	e02c      	b.n	8007ba6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00d      	beq.n	8007b6e <USBD_StdEPReq+0xce>
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b80      	cmp	r3, #128	; 0x80
 8007b56:	d00a      	beq.n	8007b6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f99f 	bl	8008ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b62:	2180      	movs	r1, #128	; 0x80
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f001 f99b 	bl	8008ea0 <USBD_LL_StallEP>
 8007b6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b6c:	e020      	b.n	8007bb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fc7a 	bl	800846a <USBD_CtlError>
              break;
 8007b76:	e01b      	b.n	8007bb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	885b      	ldrh	r3, [r3, #2]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10e      	bne.n	8007b9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00b      	beq.n	8007b9e <USBD_StdEPReq+0xfe>
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b80      	cmp	r3, #128	; 0x80
 8007b8a:	d008      	beq.n	8007b9e <USBD_StdEPReq+0xfe>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	88db      	ldrh	r3, [r3, #6]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d104      	bne.n	8007b9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 f981 	bl	8008ea0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fd2e 	bl	8008600 <USBD_CtlSendStatus>

              break;
 8007ba4:	e004      	b.n	8007bb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fc5e 	bl	800846a <USBD_CtlError>
              break;
 8007bae:	bf00      	nop
          }
          break;
 8007bb0:	e107      	b.n	8007dc2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d002      	beq.n	8007bc4 <USBD_StdEPReq+0x124>
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d016      	beq.n	8007bf0 <USBD_StdEPReq+0x150>
 8007bc2:	e04b      	b.n	8007c5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00d      	beq.n	8007be6 <USBD_StdEPReq+0x146>
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b80      	cmp	r3, #128	; 0x80
 8007bce:	d00a      	beq.n	8007be6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 f963 	bl	8008ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bda:	2180      	movs	r1, #128	; 0x80
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 f95f 	bl	8008ea0 <USBD_LL_StallEP>
 8007be2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007be4:	e040      	b.n	8007c68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fc3e 	bl	800846a <USBD_CtlError>
              break;
 8007bee:	e03b      	b.n	8007c68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	885b      	ldrh	r3, [r3, #2]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d136      	bne.n	8007c66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 f969 	bl	8008ede <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fcf7 	bl	8008600 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff fde2 	bl	80077e0 <USBD_CoreFindEP>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c20:	7b7b      	ldrb	r3, [r7, #13]
 8007c22:	2bff      	cmp	r3, #255	; 0xff
 8007c24:	d01f      	beq.n	8007c66 <USBD_StdEPReq+0x1c6>
 8007c26:	7b7b      	ldrb	r3, [r7, #13]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d11c      	bne.n	8007c66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007c2c:	7b7a      	ldrb	r2, [r7, #13]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007c34:	7b7a      	ldrb	r2, [r7, #13]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	32ae      	adds	r2, #174	; 0xae
 8007c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d010      	beq.n	8007c66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c44:	7b7a      	ldrb	r2, [r7, #13]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	32ae      	adds	r2, #174	; 0xae
 8007c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007c5a:	e004      	b.n	8007c66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fc03 	bl	800846a <USBD_CtlError>
              break;
 8007c64:	e000      	b.n	8007c68 <USBD_StdEPReq+0x1c8>
              break;
 8007c66:	bf00      	nop
          }
          break;
 8007c68:	e0ab      	b.n	8007dc2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d002      	beq.n	8007c7c <USBD_StdEPReq+0x1dc>
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d032      	beq.n	8007ce0 <USBD_StdEPReq+0x240>
 8007c7a:	e097      	b.n	8007dac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <USBD_StdEPReq+0x1f2>
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b80      	cmp	r3, #128	; 0x80
 8007c86:	d004      	beq.n	8007c92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fbed 	bl	800846a <USBD_CtlError>
                break;
 8007c90:	e091      	b.n	8007db6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	da0b      	bge.n	8007cb2 <USBD_StdEPReq+0x212>
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	3310      	adds	r3, #16
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	4413      	add	r3, r2
 8007cae:	3304      	adds	r3, #4
 8007cb0:	e00b      	b.n	8007cca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	3304      	adds	r3, #4
 8007cca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fc37 	bl	800854c <USBD_CtlSendData>
              break;
 8007cde:	e06a      	b.n	8007db6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	da11      	bge.n	8007d0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	f003 020f 	and.w	r2, r3, #15
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	3324      	adds	r3, #36	; 0x24
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d117      	bne.n	8007d32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fbb0 	bl	800846a <USBD_CtlError>
                  break;
 8007d0a:	e054      	b.n	8007db6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	f003 020f 	and.w	r2, r3, #15
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	440b      	add	r3, r1
 8007d1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d104      	bne.n	8007d32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fb9d 	bl	800846a <USBD_CtlError>
                  break;
 8007d30:	e041      	b.n	8007db6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	da0b      	bge.n	8007d52 <USBD_StdEPReq+0x2b2>
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	3310      	adds	r3, #16
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	3304      	adds	r3, #4
 8007d50:	e00b      	b.n	8007d6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
 8007d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d58:	4613      	mov	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4413      	add	r3, r2
 8007d68:	3304      	adds	r3, #4
 8007d6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <USBD_StdEPReq+0x2d8>
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b80      	cmp	r3, #128	; 0x80
 8007d76:	d103      	bne.n	8007d80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e00e      	b.n	8007d9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f8c9 	bl	8008f1c <USBD_LL_IsStallEP>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2201      	movs	r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	e002      	b.n	8007d9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2202      	movs	r2, #2
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fbd1 	bl	800854c <USBD_CtlSendData>
              break;
 8007daa:	e004      	b.n	8007db6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fb5b 	bl	800846a <USBD_CtlError>
              break;
 8007db4:	bf00      	nop
          }
          break;
 8007db6:	e004      	b.n	8007dc2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fb55 	bl	800846a <USBD_CtlError>
          break;
 8007dc0:	bf00      	nop
      }
      break;
 8007dc2:	e005      	b.n	8007dd0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fb4f 	bl	800846a <USBD_CtlError>
      break;
 8007dcc:	e000      	b.n	8007dd0 <USBD_StdEPReq+0x330>
      break;
 8007dce:	bf00      	nop
  }

  return ret;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	885b      	ldrh	r3, [r3, #2]
 8007df6:	0a1b      	lsrs	r3, r3, #8
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	2b06      	cmp	r3, #6
 8007dfe:	f200 8128 	bhi.w	8008052 <USBD_GetDescriptor+0x276>
 8007e02:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <USBD_GetDescriptor+0x2c>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e25 	.word	0x08007e25
 8007e0c:	08007e3d 	.word	0x08007e3d
 8007e10:	08007e7d 	.word	0x08007e7d
 8007e14:	08008053 	.word	0x08008053
 8007e18:	08008053 	.word	0x08008053
 8007e1c:	08007ff3 	.word	0x08007ff3
 8007e20:	0800801f 	.word	0x0800801f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	7c12      	ldrb	r2, [r2, #16]
 8007e30:	f107 0108 	add.w	r1, r7, #8
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
 8007e38:	60f8      	str	r0, [r7, #12]
      break;
 8007e3a:	e112      	b.n	8008062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	7c1b      	ldrb	r3, [r3, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10d      	bne.n	8007e60 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4c:	f107 0208 	add.w	r2, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e5e:	e100      	b.n	8008062 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	f107 0208 	add.w	r2, r7, #8
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	4798      	blx	r3
 8007e70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3301      	adds	r3, #1
 8007e76:	2202      	movs	r2, #2
 8007e78:	701a      	strb	r2, [r3, #0]
      break;
 8007e7a:	e0f2      	b.n	8008062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	885b      	ldrh	r3, [r3, #2]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b05      	cmp	r3, #5
 8007e84:	f200 80ac 	bhi.w	8007fe0 <USBD_GetDescriptor+0x204>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <USBD_GetDescriptor+0xb4>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ea9 	.word	0x08007ea9
 8007e94:	08007edd 	.word	0x08007edd
 8007e98:	08007f11 	.word	0x08007f11
 8007e9c:	08007f45 	.word	0x08007f45
 8007ea0:	08007f79 	.word	0x08007f79
 8007ea4:	08007fad 	.word	0x08007fad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	7c12      	ldrb	r2, [r2, #16]
 8007ec0:	f107 0108 	add.w	r1, r7, #8
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4798      	blx	r3
 8007ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eca:	e091      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 facb 	bl	800846a <USBD_CtlError>
            err++;
 8007ed4:	7afb      	ldrb	r3, [r7, #11]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eda:	e089      	b.n	8007ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00b      	beq.n	8007f00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	7c12      	ldrb	r2, [r2, #16]
 8007ef4:	f107 0108 	add.w	r1, r7, #8
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4798      	blx	r3
 8007efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007efe:	e077      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fab1 	bl	800846a <USBD_CtlError>
            err++;
 8007f08:	7afb      	ldrb	r3, [r7, #11]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f0e:	e06f      	b.n	8007ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00b      	beq.n	8007f34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	7c12      	ldrb	r2, [r2, #16]
 8007f28:	f107 0108 	add.w	r1, r7, #8
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4798      	blx	r3
 8007f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f32:	e05d      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa97 	bl	800846a <USBD_CtlError>
            err++;
 8007f3c:	7afb      	ldrb	r3, [r7, #11]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	72fb      	strb	r3, [r7, #11]
          break;
 8007f42:	e055      	b.n	8007ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00b      	beq.n	8007f68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	7c12      	ldrb	r2, [r2, #16]
 8007f5c:	f107 0108 	add.w	r1, r7, #8
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
 8007f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f66:	e043      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa7d 	bl	800846a <USBD_CtlError>
            err++;
 8007f70:	7afb      	ldrb	r3, [r7, #11]
 8007f72:	3301      	adds	r3, #1
 8007f74:	72fb      	strb	r3, [r7, #11]
          break;
 8007f76:	e03b      	b.n	8007ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	7c12      	ldrb	r2, [r2, #16]
 8007f90:	f107 0108 	add.w	r1, r7, #8
 8007f94:	4610      	mov	r0, r2
 8007f96:	4798      	blx	r3
 8007f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f9a:	e029      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa63 	bl	800846a <USBD_CtlError>
            err++;
 8007fa4:	7afb      	ldrb	r3, [r7, #11]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8007faa:	e021      	b.n	8007ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00b      	beq.n	8007fd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	7c12      	ldrb	r2, [r2, #16]
 8007fc4:	f107 0108 	add.w	r1, r7, #8
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4798      	blx	r3
 8007fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fce:	e00f      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fa49 	bl	800846a <USBD_CtlError>
            err++;
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007fde:	e007      	b.n	8007ff0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa41 	bl	800846a <USBD_CtlError>
          err++;
 8007fe8:	7afb      	ldrb	r3, [r7, #11]
 8007fea:	3301      	adds	r3, #1
 8007fec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007fee:	bf00      	nop
      }
      break;
 8007ff0:	e037      	b.n	8008062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	7c1b      	ldrb	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d109      	bne.n	800800e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008002:	f107 0208 	add.w	r2, r7, #8
 8008006:	4610      	mov	r0, r2
 8008008:	4798      	blx	r3
 800800a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800800c:	e029      	b.n	8008062 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fa2a 	bl	800846a <USBD_CtlError>
        err++;
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	3301      	adds	r3, #1
 800801a:	72fb      	strb	r3, [r7, #11]
      break;
 800801c:	e021      	b.n	8008062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	7c1b      	ldrb	r3, [r3, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10d      	bne.n	8008042 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	f107 0208 	add.w	r2, r7, #8
 8008032:	4610      	mov	r0, r2
 8008034:	4798      	blx	r3
 8008036:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3301      	adds	r3, #1
 800803c:	2207      	movs	r2, #7
 800803e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008040:	e00f      	b.n	8008062 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fa10 	bl	800846a <USBD_CtlError>
        err++;
 800804a:	7afb      	ldrb	r3, [r7, #11]
 800804c:	3301      	adds	r3, #1
 800804e:	72fb      	strb	r3, [r7, #11]
      break;
 8008050:	e007      	b.n	8008062 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fa08 	bl	800846a <USBD_CtlError>
      err++;
 800805a:	7afb      	ldrb	r3, [r7, #11]
 800805c:	3301      	adds	r3, #1
 800805e:	72fb      	strb	r3, [r7, #11]
      break;
 8008060:	bf00      	nop
  }

  if (err != 0U)
 8008062:	7afb      	ldrb	r3, [r7, #11]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d11e      	bne.n	80080a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	88db      	ldrh	r3, [r3, #6]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d016      	beq.n	800809e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008070:	893b      	ldrh	r3, [r7, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00e      	beq.n	8008094 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	88da      	ldrh	r2, [r3, #6]
 800807a:	893b      	ldrh	r3, [r7, #8]
 800807c:	4293      	cmp	r3, r2
 800807e:	bf28      	it	cs
 8008080:	4613      	movcs	r3, r2
 8008082:	b29b      	uxth	r3, r3
 8008084:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008086:	893b      	ldrh	r3, [r7, #8]
 8008088:	461a      	mov	r2, r3
 800808a:	68f9      	ldr	r1, [r7, #12]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fa5d 	bl	800854c <USBD_CtlSendData>
 8008092:	e009      	b.n	80080a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f9e7 	bl	800846a <USBD_CtlError>
 800809c:	e004      	b.n	80080a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 faae 	bl	8008600 <USBD_CtlSendStatus>
 80080a4:	e000      	b.n	80080a8 <USBD_GetDescriptor+0x2cc>
    return;
 80080a6:	bf00      	nop
  }
}
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop

080080b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	889b      	ldrh	r3, [r3, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d131      	bne.n	8008126 <USBD_SetAddress+0x76>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	88db      	ldrh	r3, [r3, #6]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d12d      	bne.n	8008126 <USBD_SetAddress+0x76>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	885b      	ldrh	r3, [r3, #2]
 80080ce:	2b7f      	cmp	r3, #127	; 0x7f
 80080d0:	d829      	bhi.n	8008126 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	885b      	ldrh	r3, [r3, #2]
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d104      	bne.n	80080f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f9bc 	bl	800846a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080f2:	e01d      	b.n	8008130 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	7bfa      	ldrb	r2, [r7, #15]
 80080f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 ff37 	bl	8008f74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa7a 	bl	8008600 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2202      	movs	r2, #2
 8008116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811a:	e009      	b.n	8008130 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008124:	e004      	b.n	8008130 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f99e 	bl	800846a <USBD_CtlError>
  }
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	885b      	ldrh	r3, [r3, #2]
 800814a:	b2da      	uxtb	r2, r3
 800814c:	4b4e      	ldr	r3, [pc, #312]	; (8008288 <USBD_SetConfig+0x150>)
 800814e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008150:	4b4d      	ldr	r3, [pc, #308]	; (8008288 <USBD_SetConfig+0x150>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d905      	bls.n	8008164 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f985 	bl	800846a <USBD_CtlError>
    return USBD_FAIL;
 8008160:	2303      	movs	r3, #3
 8008162:	e08c      	b.n	800827e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d002      	beq.n	8008176 <USBD_SetConfig+0x3e>
 8008170:	2b03      	cmp	r3, #3
 8008172:	d029      	beq.n	80081c8 <USBD_SetConfig+0x90>
 8008174:	e075      	b.n	8008262 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008176:	4b44      	ldr	r3, [pc, #272]	; (8008288 <USBD_SetConfig+0x150>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d020      	beq.n	80081c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800817e:	4b42      	ldr	r3, [pc, #264]	; (8008288 <USBD_SetConfig+0x150>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008188:	4b3f      	ldr	r3, [pc, #252]	; (8008288 <USBD_SetConfig+0x150>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7fe ffe7 	bl	8007162 <USBD_SetClassConfig>
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d008      	beq.n	80081b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f962 	bl	800846a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2202      	movs	r2, #2
 80081aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081ae:	e065      	b.n	800827c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fa25 	bl	8008600 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2203      	movs	r2, #3
 80081ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081be:	e05d      	b.n	800827c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fa1d 	bl	8008600 <USBD_CtlSendStatus>
      break;
 80081c6:	e059      	b.n	800827c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80081c8:	4b2f      	ldr	r3, [pc, #188]	; (8008288 <USBD_SetConfig+0x150>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d112      	bne.n	80081f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80081d8:	4b2b      	ldr	r3, [pc, #172]	; (8008288 <USBD_SetConfig+0x150>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081e2:	4b29      	ldr	r3, [pc, #164]	; (8008288 <USBD_SetConfig+0x150>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fe ffd6 	bl	800719a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa06 	bl	8008600 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081f4:	e042      	b.n	800827c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80081f6:	4b24      	ldr	r3, [pc, #144]	; (8008288 <USBD_SetConfig+0x150>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	429a      	cmp	r2, r3
 8008202:	d02a      	beq.n	800825a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7fe ffc4 	bl	800719a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008212:	4b1d      	ldr	r3, [pc, #116]	; (8008288 <USBD_SetConfig+0x150>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800821c:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <USBD_SetConfig+0x150>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fe ff9d 	bl	8007162 <USBD_SetClassConfig>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00f      	beq.n	8008252 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f918 	bl	800846a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fe ffa9 	bl	800719a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008250:	e014      	b.n	800827c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f9d4 	bl	8008600 <USBD_CtlSendStatus>
      break;
 8008258:	e010      	b.n	800827c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f9d0 	bl	8008600 <USBD_CtlSendStatus>
      break;
 8008260:	e00c      	b.n	800827c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f900 	bl	800846a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <USBD_SetConfig+0x150>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7fe ff92 	bl	800719a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008276:	2303      	movs	r3, #3
 8008278:	73fb      	strb	r3, [r7, #15]
      break;
 800827a:	bf00      	nop
  }

  return ret;
 800827c:	7bfb      	ldrb	r3, [r7, #15]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000354 	.word	0x20000354

0800828c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	88db      	ldrh	r3, [r3, #6]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d004      	beq.n	80082a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f8e2 	bl	800846a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80082a6:	e023      	b.n	80082f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	dc02      	bgt.n	80082ba <USBD_GetConfig+0x2e>
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dc03      	bgt.n	80082c0 <USBD_GetConfig+0x34>
 80082b8:	e015      	b.n	80082e6 <USBD_GetConfig+0x5a>
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d00b      	beq.n	80082d6 <USBD_GetConfig+0x4a>
 80082be:	e012      	b.n	80082e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3308      	adds	r3, #8
 80082ca:	2201      	movs	r2, #1
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f93c 	bl	800854c <USBD_CtlSendData>
        break;
 80082d4:	e00c      	b.n	80082f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3304      	adds	r3, #4
 80082da:	2201      	movs	r2, #1
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f934 	bl	800854c <USBD_CtlSendData>
        break;
 80082e4:	e004      	b.n	80082f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f8be 	bl	800846a <USBD_CtlError>
        break;
 80082ee:	bf00      	nop
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008308:	b2db      	uxtb	r3, r3
 800830a:	3b01      	subs	r3, #1
 800830c:	2b02      	cmp	r3, #2
 800830e:	d81e      	bhi.n	800834e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	2b02      	cmp	r3, #2
 8008316:	d004      	beq.n	8008322 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f8a5 	bl	800846a <USBD_CtlError>
        break;
 8008320:	e01a      	b.n	8008358 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f043 0202 	orr.w	r2, r3, #2
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	330c      	adds	r3, #12
 8008342:	2202      	movs	r2, #2
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f900 	bl	800854c <USBD_CtlSendData>
      break;
 800834c:	e004      	b.n	8008358 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f88a 	bl	800846a <USBD_CtlError>
      break;
 8008356:	bf00      	nop
  }
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	885b      	ldrh	r3, [r3, #2]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d107      	bne.n	8008382 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f940 	bl	8008600 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008380:	e013      	b.n	80083aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	885b      	ldrh	r3, [r3, #2]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d10b      	bne.n	80083a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	889b      	ldrh	r3, [r3, #4]
 800838e:	0a1b      	lsrs	r3, r3, #8
 8008390:	b29b      	uxth	r3, r3
 8008392:	b2da      	uxtb	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f930 	bl	8008600 <USBD_CtlSendStatus>
}
 80083a0:	e003      	b.n	80083aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f860 	bl	800846a <USBD_CtlError>
}
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b082      	sub	sp, #8
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d80b      	bhi.n	80083e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	885b      	ldrh	r3, [r3, #2]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d10c      	bne.n	80083ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f910 	bl	8008600 <USBD_CtlSendStatus>
      }
      break;
 80083e0:	e004      	b.n	80083ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f840 	bl	800846a <USBD_CtlError>
      break;
 80083ea:	e000      	b.n	80083ee <USBD_ClrFeature+0x3c>
      break;
 80083ec:	bf00      	nop
  }
}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	781a      	ldrb	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	781a      	ldrb	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3301      	adds	r3, #1
 800841e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7ff fa41 	bl	80078a8 <SWAPBYTE>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3301      	adds	r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f7ff fa34 	bl	80078a8 <SWAPBYTE>
 8008440:	4603      	mov	r3, r0
 8008442:	461a      	mov	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3301      	adds	r3, #1
 8008452:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f7ff fa27 	bl	80078a8 <SWAPBYTE>
 800845a:	4603      	mov	r3, r0
 800845c:	461a      	mov	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	80da      	strh	r2, [r3, #6]
}
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008474:	2180      	movs	r1, #128	; 0x80
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fd12 	bl	8008ea0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800847c:	2100      	movs	r1, #0
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fd0e 	bl	8008ea0 <USBD_LL_StallEP>
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d036      	beq.n	8008510 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80084a6:	6938      	ldr	r0, [r7, #16]
 80084a8:	f000 f836 	bl	8008518 <USBD_GetLen>
 80084ac:	4603      	mov	r3, r0
 80084ae:	3301      	adds	r3, #1
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	4413      	add	r3, r2
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	7812      	ldrb	r2, [r2, #0]
 80084c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	3301      	adds	r3, #1
 80084ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	4413      	add	r3, r2
 80084d2:	2203      	movs	r2, #3
 80084d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	3301      	adds	r3, #1
 80084da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084dc:	e013      	b.n	8008506 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	4413      	add	r3, r2
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	7812      	ldrb	r2, [r2, #0]
 80084e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	3301      	adds	r3, #1
 80084ee:	613b      	str	r3, [r7, #16]
    idx++;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
 80084f2:	3301      	adds	r3, #1
 80084f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	4413      	add	r3, r2
 80084fc:	2200      	movs	r2, #0
 80084fe:	701a      	strb	r2, [r3, #0]
    idx++;
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	3301      	adds	r3, #1
 8008504:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e7      	bne.n	80084de <USBD_GetString+0x52>
 800850e:	e000      	b.n	8008512 <USBD_GetString+0x86>
    return;
 8008510:	bf00      	nop
  }
}
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008528:	e005      	b.n	8008536 <USBD_GetLen+0x1e>
  {
    len++;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
 800852c:	3301      	adds	r3, #1
 800852e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	3301      	adds	r3, #1
 8008534:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1f5      	bne.n	800852a <USBD_GetLen+0x12>
  }

  return len;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2202      	movs	r2, #2
 800855c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	2100      	movs	r1, #0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fd1d 	bl	8008fb2 <USBD_LL_Transmit>

  return USBD_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	2100      	movs	r1, #0
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 fd0c 	bl	8008fb2 <USBD_LL_Transmit>

  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2203      	movs	r2, #3
 80085b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	2100      	movs	r1, #0
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fd10 	bl	8008ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	2100      	movs	r1, #0
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fcff 	bl	8008ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2204      	movs	r2, #4
 800860c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008610:	2300      	movs	r3, #0
 8008612:	2200      	movs	r2, #0
 8008614:	2100      	movs	r1, #0
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fccb 	bl	8008fb2 <USBD_LL_Transmit>

  return USBD_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2205      	movs	r2, #5
 8008632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008636:	2300      	movs	r3, #0
 8008638:	2200      	movs	r2, #0
 800863a:	2100      	movs	r1, #0
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fcd9 	bl	8008ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008650:	2200      	movs	r2, #0
 8008652:	4912      	ldr	r1, [pc, #72]	; (800869c <MX_USB_DEVICE_Init+0x50>)
 8008654:	4812      	ldr	r0, [pc, #72]	; (80086a0 <MX_USB_DEVICE_Init+0x54>)
 8008656:	f7fe fd07 	bl	8007068 <USBD_Init>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008660:	f7f8 fbf4 	bl	8000e4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008664:	490f      	ldr	r1, [pc, #60]	; (80086a4 <MX_USB_DEVICE_Init+0x58>)
 8008666:	480e      	ldr	r0, [pc, #56]	; (80086a0 <MX_USB_DEVICE_Init+0x54>)
 8008668:	f7fe fd2e 	bl	80070c8 <USBD_RegisterClass>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008672:	f7f8 fbeb 	bl	8000e4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008676:	490c      	ldr	r1, [pc, #48]	; (80086a8 <MX_USB_DEVICE_Init+0x5c>)
 8008678:	4809      	ldr	r0, [pc, #36]	; (80086a0 <MX_USB_DEVICE_Init+0x54>)
 800867a:	f7fe fc1f 	bl	8006ebc <USBD_CDC_RegisterInterface>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008684:	f7f8 fbe2 	bl	8000e4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008688:	4805      	ldr	r0, [pc, #20]	; (80086a0 <MX_USB_DEVICE_Init+0x54>)
 800868a:	f7fe fd53 	bl	8007134 <USBD_Start>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008694:	f7f8 fbda 	bl	8000e4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008698:	bf00      	nop
 800869a:	bd80      	pop	{r7, pc}
 800869c:	200000d0 	.word	0x200000d0
 80086a0:	20000358 	.word	0x20000358
 80086a4:	2000003c 	.word	0x2000003c
 80086a8:	200000bc 	.word	0x200000bc

080086ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80086b0:	2200      	movs	r2, #0
 80086b2:	4905      	ldr	r1, [pc, #20]	; (80086c8 <CDC_Init_FS+0x1c>)
 80086b4:	4805      	ldr	r0, [pc, #20]	; (80086cc <CDC_Init_FS+0x20>)
 80086b6:	f7fe fc1b 	bl	8006ef0 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80086ba:	4905      	ldr	r1, [pc, #20]	; (80086d0 <CDC_Init_FS+0x24>)
 80086bc:	4803      	ldr	r0, [pc, #12]	; (80086cc <CDC_Init_FS+0x20>)
 80086be:	f7fe fc39 	bl	8006f34 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80086c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000e34 	.word	0x20000e34
 80086cc:	20000358 	.word	0x20000358
 80086d0:	20000634 	.word	0x20000634

080086d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80086d4:	b480      	push	{r7}
 80086d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 80086d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80086da:	4618      	mov	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	6039      	str	r1, [r7, #0]
 80086ee:	71fb      	strb	r3, [r7, #7]
 80086f0:	4613      	mov	r3, r2
 80086f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	2b23      	cmp	r3, #35	; 0x23
 80086f8:	d84a      	bhi.n	8008790 <CDC_Control_FS+0xac>
 80086fa:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <CDC_Control_FS+0x1c>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	08008791 	.word	0x08008791
 8008704:	08008791 	.word	0x08008791
 8008708:	08008791 	.word	0x08008791
 800870c:	08008791 	.word	0x08008791
 8008710:	08008791 	.word	0x08008791
 8008714:	08008791 	.word	0x08008791
 8008718:	08008791 	.word	0x08008791
 800871c:	08008791 	.word	0x08008791
 8008720:	08008791 	.word	0x08008791
 8008724:	08008791 	.word	0x08008791
 8008728:	08008791 	.word	0x08008791
 800872c:	08008791 	.word	0x08008791
 8008730:	08008791 	.word	0x08008791
 8008734:	08008791 	.word	0x08008791
 8008738:	08008791 	.word	0x08008791
 800873c:	08008791 	.word	0x08008791
 8008740:	08008791 	.word	0x08008791
 8008744:	08008791 	.word	0x08008791
 8008748:	08008791 	.word	0x08008791
 800874c:	08008791 	.word	0x08008791
 8008750:	08008791 	.word	0x08008791
 8008754:	08008791 	.word	0x08008791
 8008758:	08008791 	.word	0x08008791
 800875c:	08008791 	.word	0x08008791
 8008760:	08008791 	.word	0x08008791
 8008764:	08008791 	.word	0x08008791
 8008768:	08008791 	.word	0x08008791
 800876c:	08008791 	.word	0x08008791
 8008770:	08008791 	.word	0x08008791
 8008774:	08008791 	.word	0x08008791
 8008778:	08008791 	.word	0x08008791
 800877c:	08008791 	.word	0x08008791
 8008780:	08008791 	.word	0x08008791
 8008784:	08008791 	.word	0x08008791
 8008788:	08008791 	.word	0x08008791
 800878c:	08008791 	.word	0x08008791
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8008790:	bf00      	nop
	}

	return (USBD_OK);
 8008792:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	4822      	ldr	r0, [pc, #136]	; (8008838 <CDC_Receive_FS+0x98>)
 80087ae:	f7fe fbc1 	bl	8006f34 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80087b2:	4821      	ldr	r0, [pc, #132]	; (8008838 <CDC_Receive_FS+0x98>)
 80087b4:	f7fe fc22 	bl	8006ffc <USBD_CDC_ReceivePacket>

	for (uint8_t i = 0; i < CMD_NUM_COMMANDS; i++) { // Search command
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
 80087bc:	e033      	b.n	8008826 <CDC_Receive_FS+0x86>
		if (!memcmp(Buf, cmd[i].cmdIndex, sizeof(cmd[i].cmdIndex))) {
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	011b      	lsls	r3, r3, #4
 80087c2:	4a1e      	ldr	r2, [pc, #120]	; (800883c <CDC_Receive_FS+0x9c>)
 80087c4:	4413      	add	r3, r2
 80087c6:	2202      	movs	r2, #2
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fe32 	bl	8009434 <memcmp>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d124      	bne.n	8008820 <CDC_Receive_FS+0x80>
			free((void*) cmd[i].data);
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	4a18      	ldr	r2, [pc, #96]	; (800883c <CDC_Receive_FS+0x9c>)
 80087da:	011b      	lsls	r3, r3, #4
 80087dc:	4413      	add	r3, r2
 80087de:	3308      	adds	r3, #8
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fca4 	bl	8009130 <free>
			recieveData(Buf, &cmd[i]);
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	011b      	lsls	r3, r3, #4
 80087ec:	4a13      	ldr	r2, [pc, #76]	; (800883c <CDC_Receive_FS+0x9c>)
 80087ee:	4413      	add	r3, r2
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7f7 ff28 	bl	8000648 <recieveData>
			cmd[i].exec(cmd[i].command, cmd[i].data);
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	4a10      	ldr	r2, [pc, #64]	; (800883c <CDC_Receive_FS+0x9c>)
 80087fc:	011b      	lsls	r3, r3, #4
 80087fe:	4413      	add	r3, r2
 8008800:	330c      	adds	r3, #12
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	7bfa      	ldrb	r2, [r7, #15]
 8008806:	490d      	ldr	r1, [pc, #52]	; (800883c <CDC_Receive_FS+0x9c>)
 8008808:	0112      	lsls	r2, r2, #4
 800880a:	440a      	add	r2, r1
 800880c:	3202      	adds	r2, #2
 800880e:	7810      	ldrb	r0, [r2, #0]
 8008810:	7bfa      	ldrb	r2, [r7, #15]
 8008812:	490a      	ldr	r1, [pc, #40]	; (800883c <CDC_Receive_FS+0x9c>)
 8008814:	0112      	lsls	r2, r2, #4
 8008816:	440a      	add	r2, r1
 8008818:	3208      	adds	r2, #8
 800881a:	6812      	ldr	r2, [r2, #0]
 800881c:	4611      	mov	r1, r2
 800881e:	4798      	blx	r3
	for (uint8_t i = 0; i < CMD_NUM_COMMANDS; i++) { // Search command
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	3301      	adds	r3, #1
 8008824:	73fb      	strb	r3, [r7, #15]
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d9c8      	bls.n	80087be <CDC_Receive_FS+0x1e>
		}
	}
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	return (USBD_OK);
 800882c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000358 	.word	0x20000358
 800883c:	2000031c 	.word	0x2000031c

08008840 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8008850:	4b0d      	ldr	r3, [pc, #52]	; (8008888 <CDC_Transmit_FS+0x48>)
 8008852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008856:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800885e:	2b00      	cmp	r3, #0
 8008860:	d001      	beq.n	8008866 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8008862:	2301      	movs	r3, #1
 8008864:	e00b      	b.n	800887e <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008866:	887b      	ldrh	r3, [r7, #2]
 8008868:	461a      	mov	r2, r3
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	4806      	ldr	r0, [pc, #24]	; (8008888 <CDC_Transmit_FS+0x48>)
 800886e:	f7fe fb3f 	bl	8006ef0 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008872:	4805      	ldr	r0, [pc, #20]	; (8008888 <CDC_Transmit_FS+0x48>)
 8008874:	f7fe fb7c 	bl	8006f70 <USBD_CDC_TransmitPacket>
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 7 */
  return result;
 800887c:	7bfb      	ldrb	r3, [r7, #15]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000358 	.word	0x20000358

0800888c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800889e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
	...

080088b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	6039      	str	r1, [r7, #0]
 80088ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2212      	movs	r2, #18
 80088c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80088c2:	4b03      	ldr	r3, [pc, #12]	; (80088d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	200000ec 	.word	0x200000ec

080088d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	6039      	str	r1, [r7, #0]
 80088de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2204      	movs	r2, #4
 80088e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80088e6:	4b03      	ldr	r3, [pc, #12]	; (80088f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	20000100 	.word	0x20000100

080088f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	4603      	mov	r3, r0
 8008900:	6039      	str	r1, [r7, #0]
 8008902:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	4907      	ldr	r1, [pc, #28]	; (800892c <USBD_FS_ProductStrDescriptor+0x34>)
 800890e:	4808      	ldr	r0, [pc, #32]	; (8008930 <USBD_FS_ProductStrDescriptor+0x38>)
 8008910:	f7ff fdbc 	bl	800848c <USBD_GetString>
 8008914:	e004      	b.n	8008920 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	4904      	ldr	r1, [pc, #16]	; (800892c <USBD_FS_ProductStrDescriptor+0x34>)
 800891a:	4805      	ldr	r0, [pc, #20]	; (8008930 <USBD_FS_ProductStrDescriptor+0x38>)
 800891c:	f7ff fdb6 	bl	800848c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008920:	4b02      	ldr	r3, [pc, #8]	; (800892c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20001634 	.word	0x20001634
 8008930:	080095cc 	.word	0x080095cc

08008934 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	6039      	str	r1, [r7, #0]
 800893e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008940:	683a      	ldr	r2, [r7, #0]
 8008942:	4904      	ldr	r1, [pc, #16]	; (8008954 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008944:	4804      	ldr	r0, [pc, #16]	; (8008958 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008946:	f7ff fda1 	bl	800848c <USBD_GetString>
  return USBD_StrDesc;
 800894a:	4b02      	ldr	r3, [pc, #8]	; (8008954 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800894c:	4618      	mov	r0, r3
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	20001634 	.word	0x20001634
 8008958:	080095e0 	.word	0x080095e0

0800895c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	6039      	str	r1, [r7, #0]
 8008966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	221a      	movs	r2, #26
 800896c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800896e:	f000 f843 	bl	80089f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008972:	4b02      	ldr	r3, [pc, #8]	; (800897c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008974:	4618      	mov	r0, r3
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	20000104 	.word	0x20000104

08008980 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	6039      	str	r1, [r7, #0]
 800898a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d105      	bne.n	800899e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	4907      	ldr	r1, [pc, #28]	; (80089b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008996:	4808      	ldr	r0, [pc, #32]	; (80089b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008998:	f7ff fd78 	bl	800848c <USBD_GetString>
 800899c:	e004      	b.n	80089a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	4904      	ldr	r1, [pc, #16]	; (80089b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80089a2:	4805      	ldr	r0, [pc, #20]	; (80089b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089a4:	f7ff fd72 	bl	800848c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089a8:	4b02      	ldr	r3, [pc, #8]	; (80089b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	20001634 	.word	0x20001634
 80089b8:	080095f4 	.word	0x080095f4

080089bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	6039      	str	r1, [r7, #0]
 80089c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d105      	bne.n	80089da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	4907      	ldr	r1, [pc, #28]	; (80089f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089d2:	4808      	ldr	r0, [pc, #32]	; (80089f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089d4:	f7ff fd5a 	bl	800848c <USBD_GetString>
 80089d8:	e004      	b.n	80089e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	4904      	ldr	r1, [pc, #16]	; (80089f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089de:	4805      	ldr	r0, [pc, #20]	; (80089f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089e0:	f7ff fd54 	bl	800848c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20001634 	.word	0x20001634
 80089f4:	08009600 	.word	0x08009600

080089f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80089fe:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <Get_SerialNum+0x44>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a04:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <Get_SerialNum+0x48>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a0a:	4b0e      	ldr	r3, [pc, #56]	; (8008a44 <Get_SerialNum+0x4c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4413      	add	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d009      	beq.n	8008a32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a1e:	2208      	movs	r2, #8
 8008a20:	4909      	ldr	r1, [pc, #36]	; (8008a48 <Get_SerialNum+0x50>)
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 f814 	bl	8008a50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a28:	2204      	movs	r2, #4
 8008a2a:	4908      	ldr	r1, [pc, #32]	; (8008a4c <Get_SerialNum+0x54>)
 8008a2c:	68b8      	ldr	r0, [r7, #8]
 8008a2e:	f000 f80f 	bl	8008a50 <IntToUnicode>
  }
}
 8008a32:	bf00      	nop
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	1fff7a10 	.word	0x1fff7a10
 8008a40:	1fff7a14 	.word	0x1fff7a14
 8008a44:	1fff7a18 	.word	0x1fff7a18
 8008a48:	20000106 	.word	0x20000106
 8008a4c:	20000116 	.word	0x20000116

08008a50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]
 8008a66:	e027      	b.n	8008ab8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	0f1b      	lsrs	r3, r3, #28
 8008a6c:	2b09      	cmp	r3, #9
 8008a6e:	d80b      	bhi.n	8008a88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	0f1b      	lsrs	r3, r3, #28
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
 8008a78:	005b      	lsls	r3, r3, #1
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	440b      	add	r3, r1
 8008a80:	3230      	adds	r2, #48	; 0x30
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	e00a      	b.n	8008a9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	0f1b      	lsrs	r3, r3, #28
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	4619      	mov	r1, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	440b      	add	r3, r1
 8008a98:	3237      	adds	r2, #55	; 0x37
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	011b      	lsls	r3, r3, #4
 8008aa2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	4413      	add	r3, r2
 8008aae:	2200      	movs	r2, #0
 8008ab0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	75fb      	strb	r3, [r7, #23]
 8008ab8:	7dfa      	ldrb	r2, [r7, #23]
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d3d3      	bcc.n	8008a68 <IntToUnicode+0x18>
  }
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
	...

08008ad0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b08a      	sub	sp, #40	; 0x28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ad8:	f107 0314 	add.w	r3, r7, #20
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	605a      	str	r2, [r3, #4]
 8008ae2:	609a      	str	r2, [r3, #8]
 8008ae4:	60da      	str	r2, [r3, #12]
 8008ae6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008af0:	d13a      	bne.n	8008b68 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008af2:	2300      	movs	r3, #0
 8008af4:	613b      	str	r3, [r7, #16]
 8008af6:	4b1e      	ldr	r3, [pc, #120]	; (8008b70 <HAL_PCD_MspInit+0xa0>)
 8008af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afa:	4a1d      	ldr	r2, [pc, #116]	; (8008b70 <HAL_PCD_MspInit+0xa0>)
 8008afc:	f043 0301 	orr.w	r3, r3, #1
 8008b00:	6313      	str	r3, [r2, #48]	; 0x30
 8008b02:	4b1b      	ldr	r3, [pc, #108]	; (8008b70 <HAL_PCD_MspInit+0xa0>)
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b14:	2302      	movs	r3, #2
 8008b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b20:	230a      	movs	r3, #10
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b24:	f107 0314 	add.w	r3, r7, #20
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4812      	ldr	r0, [pc, #72]	; (8008b74 <HAL_PCD_MspInit+0xa4>)
 8008b2c:	f7f8 fdc8 	bl	80016c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b30:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <HAL_PCD_MspInit+0xa0>)
 8008b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b34:	4a0e      	ldr	r2, [pc, #56]	; (8008b70 <HAL_PCD_MspInit+0xa0>)
 8008b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3a:	6353      	str	r3, [r2, #52]	; 0x34
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <HAL_PCD_MspInit+0xa0>)
 8008b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b44:	4a0a      	ldr	r2, [pc, #40]	; (8008b70 <HAL_PCD_MspInit+0xa0>)
 8008b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b4a:	6453      	str	r3, [r2, #68]	; 0x44
 8008b4c:	4b08      	ldr	r3, [pc, #32]	; (8008b70 <HAL_PCD_MspInit+0xa0>)
 8008b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	2043      	movs	r0, #67	; 0x43
 8008b5e:	f7f8 fce6 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b62:	2043      	movs	r0, #67	; 0x43
 8008b64:	f7f8 fcff 	bl	8001566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b68:	bf00      	nop
 8008b6a:	3728      	adds	r7, #40	; 0x28
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	40023800 	.word	0x40023800
 8008b74:	40020000 	.word	0x40020000

08008b78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f7fe fb1d 	bl	80071ce <USBD_LL_SetupStage>
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008bae:	78fa      	ldrb	r2, [r7, #3]
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	00db      	lsls	r3, r3, #3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	440b      	add	r3, r1
 8008bbc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	f7fe fb57 	bl	8007278 <USBD_LL_DataOutStage>
}
 8008bca:	bf00      	nop
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008be4:	78fa      	ldrb	r2, [r7, #3]
 8008be6:	6879      	ldr	r1, [r7, #4]
 8008be8:	4613      	mov	r3, r2
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	4413      	add	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	440b      	add	r3, r1
 8008bf2:	334c      	adds	r3, #76	; 0x4c
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	78fb      	ldrb	r3, [r7, #3]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	f7fe fbf0 	bl	80073de <USBD_LL_DataInStage>
}
 8008bfe:	bf00      	nop
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fe fd24 	bl	8007662 <USBD_LL_SOF>
}
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b084      	sub	sp, #16
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d001      	beq.n	8008c3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008c36:	f7f8 f909 	bl	8000e4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c40:	7bfa      	ldrb	r2, [r7, #15]
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fe fcce 	bl	80075e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fe fc76 	bl	8007542 <USBD_LL_Reset>
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fcc9 	bl	8007606 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	6812      	ldr	r2, [r2, #0]
 8008c82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c86:	f043 0301 	orr.w	r3, r3, #1
 8008c8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c94:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <HAL_PCD_SuspendCallback+0x48>)
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	4a03      	ldr	r2, [pc, #12]	; (8008ca8 <HAL_PCD_SuspendCallback+0x48>)
 8008c9a:	f043 0306 	orr.w	r3, r3, #6
 8008c9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	e000ed00 	.word	0xe000ed00

08008cac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe fcb9 	bl	8007632 <USBD_LL_Resume>
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cda:	78fa      	ldrb	r2, [r7, #3]
 8008cdc:	4611      	mov	r1, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe fd11 	bl	8007706 <USBD_LL_IsoOUTIncomplete>
}
 8008ce4:	bf00      	nop
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	4611      	mov	r1, r2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe fccd 	bl	80076a2 <USBD_LL_IsoINIncomplete>
}
 8008d08:	bf00      	nop
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fd23 	bl	800776a <USBD_LL_DevConnected>
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fd20 	bl	8007780 <USBD_LL_DevDisconnected>
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d13c      	bne.n	8008dd2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008d58:	4a20      	ldr	r2, [pc, #128]	; (8008ddc <USBD_LL_Init+0x94>)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a1e      	ldr	r2, [pc, #120]	; (8008ddc <USBD_LL_Init+0x94>)
 8008d64:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d68:	4b1c      	ldr	r3, [pc, #112]	; (8008ddc <USBD_LL_Init+0x94>)
 8008d6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008d70:	4b1a      	ldr	r3, [pc, #104]	; (8008ddc <USBD_LL_Init+0x94>)
 8008d72:	2204      	movs	r2, #4
 8008d74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d76:	4b19      	ldr	r3, [pc, #100]	; (8008ddc <USBD_LL_Init+0x94>)
 8008d78:	2202      	movs	r2, #2
 8008d7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d7c:	4b17      	ldr	r3, [pc, #92]	; (8008ddc <USBD_LL_Init+0x94>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d82:	4b16      	ldr	r3, [pc, #88]	; (8008ddc <USBD_LL_Init+0x94>)
 8008d84:	2202      	movs	r2, #2
 8008d86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d88:	4b14      	ldr	r3, [pc, #80]	; (8008ddc <USBD_LL_Init+0x94>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d8e:	4b13      	ldr	r3, [pc, #76]	; (8008ddc <USBD_LL_Init+0x94>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d94:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <USBD_LL_Init+0x94>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d9a:	4b10      	ldr	r3, [pc, #64]	; (8008ddc <USBD_LL_Init+0x94>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008da0:	4b0e      	ldr	r3, [pc, #56]	; (8008ddc <USBD_LL_Init+0x94>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008da6:	480d      	ldr	r0, [pc, #52]	; (8008ddc <USBD_LL_Init+0x94>)
 8008da8:	f7f8 fe65 	bl	8001a76 <HAL_PCD_Init>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008db2:	f7f8 f84b 	bl	8000e4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008db6:	2180      	movs	r1, #128	; 0x80
 8008db8:	4808      	ldr	r0, [pc, #32]	; (8008ddc <USBD_LL_Init+0x94>)
 8008dba:	f7fa f8bc 	bl	8002f36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008dbe:	2240      	movs	r2, #64	; 0x40
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	4806      	ldr	r0, [pc, #24]	; (8008ddc <USBD_LL_Init+0x94>)
 8008dc4:	f7fa f870 	bl	8002ea8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008dc8:	2280      	movs	r2, #128	; 0x80
 8008dca:	2101      	movs	r1, #1
 8008dcc:	4803      	ldr	r0, [pc, #12]	; (8008ddc <USBD_LL_Init+0x94>)
 8008dce:	f7fa f86b 	bl	8002ea8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	20001834 	.word	0x20001834

08008de0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7f8 ff5a 	bl	8001cb0 <HAL_PCD_Start>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 f942 	bl	800908c <USBD_Get_USB_Status>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	4608      	mov	r0, r1
 8008e20:	4611      	mov	r1, r2
 8008e22:	461a      	mov	r2, r3
 8008e24:	4603      	mov	r3, r0
 8008e26:	70fb      	strb	r3, [r7, #3]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70bb      	strb	r3, [r7, #2]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e3e:	78bb      	ldrb	r3, [r7, #2]
 8008e40:	883a      	ldrh	r2, [r7, #0]
 8008e42:	78f9      	ldrb	r1, [r7, #3]
 8008e44:	f7f9 fc2b 	bl	800269e <HAL_PCD_EP_Open>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 f91c 	bl	800908c <USBD_Get_USB_Status>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e7c:	78fa      	ldrb	r2, [r7, #3]
 8008e7e:	4611      	mov	r1, r2
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7f9 fc74 	bl	800276e <HAL_PCD_EP_Close>
 8008e86:	4603      	mov	r3, r0
 8008e88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 f8fd 	bl	800908c <USBD_Get_USB_Status>
 8008e92:	4603      	mov	r3, r0
 8008e94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008eba:	78fa      	ldrb	r2, [r7, #3]
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7f9 fd4c 	bl	800295c <HAL_PCD_EP_SetStall>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 f8de 	bl	800908c <USBD_Get_USB_Status>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ef8:	78fa      	ldrb	r2, [r7, #3]
 8008efa:	4611      	mov	r1, r2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7f9 fd91 	bl	8002a24 <HAL_PCD_EP_ClrStall>
 8008f02:	4603      	mov	r3, r0
 8008f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 f8bf 	bl	800908c <USBD_Get_USB_Status>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	da0b      	bge.n	8008f50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f3e:	68f9      	ldr	r1, [r7, #12]
 8008f40:	4613      	mov	r3, r2
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	4413      	add	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	440b      	add	r3, r1
 8008f4a:	333e      	adds	r3, #62	; 0x3e
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	e00b      	b.n	8008f68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f56:	68f9      	ldr	r1, [r7, #12]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	440b      	add	r3, r1
 8008f62:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008f66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	4611      	mov	r1, r2
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7f9 fb5e 	bl	8002654 <HAL_PCD_SetAddress>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 f874 	bl	800908c <USBD_Get_USB_Status>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b086      	sub	sp, #24
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	603b      	str	r3, [r7, #0]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008fd0:	7af9      	ldrb	r1, [r7, #11]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	f7f9 fc77 	bl	80028c8 <HAL_PCD_EP_Transmit>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fde:	7dfb      	ldrb	r3, [r7, #23]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f853 	bl	800908c <USBD_Get_USB_Status>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fea:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	607a      	str	r2, [r7, #4]
 8008ffe:	603b      	str	r3, [r7, #0]
 8009000:	460b      	mov	r3, r1
 8009002:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009012:	7af9      	ldrb	r1, [r7, #11]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	f7f9 fbf3 	bl	8002802 <HAL_PCD_EP_Receive>
 800901c:	4603      	mov	r3, r0
 800901e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	4618      	mov	r0, r3
 8009024:	f000 f832 	bl	800908c <USBD_Get_USB_Status>
 8009028:	4603      	mov	r3, r0
 800902a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800902c:	7dbb      	ldrb	r3, [r7, #22]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3718      	adds	r7, #24
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	4611      	mov	r1, r2
 800904c:	4618      	mov	r0, r3
 800904e:	f7f9 fc23 	bl	8002898 <HAL_PCD_EP_GetRxCount>
 8009052:	4603      	mov	r3, r0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009064:	4b03      	ldr	r3, [pc, #12]	; (8009074 <USBD_static_malloc+0x18>)
}
 8009066:	4618      	mov	r0, r3
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	20001d40 	.word	0x20001d40

08009078 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]

}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	4603      	mov	r3, r0
 8009094:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	2b03      	cmp	r3, #3
 800909e:	d817      	bhi.n	80090d0 <USBD_Get_USB_Status+0x44>
 80090a0:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <USBD_Get_USB_Status+0x1c>)
 80090a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a6:	bf00      	nop
 80090a8:	080090b9 	.word	0x080090b9
 80090ac:	080090bf 	.word	0x080090bf
 80090b0:	080090c5 	.word	0x080090c5
 80090b4:	080090cb 	.word	0x080090cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
    break;
 80090bc:	e00b      	b.n	80090d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090be:	2303      	movs	r3, #3
 80090c0:	73fb      	strb	r3, [r7, #15]
    break;
 80090c2:	e008      	b.n	80090d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090c4:	2301      	movs	r3, #1
 80090c6:	73fb      	strb	r3, [r7, #15]
    break;
 80090c8:	e005      	b.n	80090d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090ca:	2303      	movs	r3, #3
 80090cc:	73fb      	strb	r3, [r7, #15]
    break;
 80090ce:	e002      	b.n	80090d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80090d0:	2303      	movs	r3, #3
 80090d2:	73fb      	strb	r3, [r7, #15]
    break;
 80090d4:	bf00      	nop
  }
  return usb_status;
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <atoi>:
 80090e4:	220a      	movs	r2, #10
 80090e6:	2100      	movs	r1, #0
 80090e8:	f000 b958 	b.w	800939c <strtol>

080090ec <__itoa>:
 80090ec:	1e93      	subs	r3, r2, #2
 80090ee:	2b22      	cmp	r3, #34	; 0x22
 80090f0:	b510      	push	{r4, lr}
 80090f2:	460c      	mov	r4, r1
 80090f4:	d904      	bls.n	8009100 <__itoa+0x14>
 80090f6:	2300      	movs	r3, #0
 80090f8:	700b      	strb	r3, [r1, #0]
 80090fa:	461c      	mov	r4, r3
 80090fc:	4620      	mov	r0, r4
 80090fe:	bd10      	pop	{r4, pc}
 8009100:	2a0a      	cmp	r2, #10
 8009102:	d109      	bne.n	8009118 <__itoa+0x2c>
 8009104:	2800      	cmp	r0, #0
 8009106:	da07      	bge.n	8009118 <__itoa+0x2c>
 8009108:	232d      	movs	r3, #45	; 0x2d
 800910a:	700b      	strb	r3, [r1, #0]
 800910c:	4240      	negs	r0, r0
 800910e:	2101      	movs	r1, #1
 8009110:	4421      	add	r1, r4
 8009112:	f000 f94d 	bl	80093b0 <__utoa>
 8009116:	e7f1      	b.n	80090fc <__itoa+0x10>
 8009118:	2100      	movs	r1, #0
 800911a:	e7f9      	b.n	8009110 <__itoa+0x24>

0800911c <itoa>:
 800911c:	f7ff bfe6 	b.w	80090ec <__itoa>

08009120 <malloc>:
 8009120:	4b02      	ldr	r3, [pc, #8]	; (800912c <malloc+0xc>)
 8009122:	4601      	mov	r1, r0
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	f000 b82b 	b.w	8009180 <_malloc_r>
 800912a:	bf00      	nop
 800912c:	2000016c 	.word	0x2000016c

08009130 <free>:
 8009130:	4b02      	ldr	r3, [pc, #8]	; (800913c <free+0xc>)
 8009132:	4601      	mov	r1, r0
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	f000 b9df 	b.w	80094f8 <_free_r>
 800913a:	bf00      	nop
 800913c:	2000016c 	.word	0x2000016c

08009140 <sbrk_aligned>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	4e0e      	ldr	r6, [pc, #56]	; (800917c <sbrk_aligned+0x3c>)
 8009144:	460c      	mov	r4, r1
 8009146:	6831      	ldr	r1, [r6, #0]
 8009148:	4605      	mov	r5, r0
 800914a:	b911      	cbnz	r1, 8009152 <sbrk_aligned+0x12>
 800914c:	f000 f98a 	bl	8009464 <_sbrk_r>
 8009150:	6030      	str	r0, [r6, #0]
 8009152:	4621      	mov	r1, r4
 8009154:	4628      	mov	r0, r5
 8009156:	f000 f985 	bl	8009464 <_sbrk_r>
 800915a:	1c43      	adds	r3, r0, #1
 800915c:	d00a      	beq.n	8009174 <sbrk_aligned+0x34>
 800915e:	1cc4      	adds	r4, r0, #3
 8009160:	f024 0403 	bic.w	r4, r4, #3
 8009164:	42a0      	cmp	r0, r4
 8009166:	d007      	beq.n	8009178 <sbrk_aligned+0x38>
 8009168:	1a21      	subs	r1, r4, r0
 800916a:	4628      	mov	r0, r5
 800916c:	f000 f97a 	bl	8009464 <_sbrk_r>
 8009170:	3001      	adds	r0, #1
 8009172:	d101      	bne.n	8009178 <sbrk_aligned+0x38>
 8009174:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009178:	4620      	mov	r0, r4
 800917a:	bd70      	pop	{r4, r5, r6, pc}
 800917c:	20001f64 	.word	0x20001f64

08009180 <_malloc_r>:
 8009180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009184:	1ccd      	adds	r5, r1, #3
 8009186:	f025 0503 	bic.w	r5, r5, #3
 800918a:	3508      	adds	r5, #8
 800918c:	2d0c      	cmp	r5, #12
 800918e:	bf38      	it	cc
 8009190:	250c      	movcc	r5, #12
 8009192:	2d00      	cmp	r5, #0
 8009194:	4607      	mov	r7, r0
 8009196:	db01      	blt.n	800919c <_malloc_r+0x1c>
 8009198:	42a9      	cmp	r1, r5
 800919a:	d905      	bls.n	80091a8 <_malloc_r+0x28>
 800919c:	230c      	movs	r3, #12
 800919e:	603b      	str	r3, [r7, #0]
 80091a0:	2600      	movs	r6, #0
 80091a2:	4630      	mov	r0, r6
 80091a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800927c <_malloc_r+0xfc>
 80091ac:	f000 f868 	bl	8009280 <__malloc_lock>
 80091b0:	f8d8 3000 	ldr.w	r3, [r8]
 80091b4:	461c      	mov	r4, r3
 80091b6:	bb5c      	cbnz	r4, 8009210 <_malloc_r+0x90>
 80091b8:	4629      	mov	r1, r5
 80091ba:	4638      	mov	r0, r7
 80091bc:	f7ff ffc0 	bl	8009140 <sbrk_aligned>
 80091c0:	1c43      	adds	r3, r0, #1
 80091c2:	4604      	mov	r4, r0
 80091c4:	d155      	bne.n	8009272 <_malloc_r+0xf2>
 80091c6:	f8d8 4000 	ldr.w	r4, [r8]
 80091ca:	4626      	mov	r6, r4
 80091cc:	2e00      	cmp	r6, #0
 80091ce:	d145      	bne.n	800925c <_malloc_r+0xdc>
 80091d0:	2c00      	cmp	r4, #0
 80091d2:	d048      	beq.n	8009266 <_malloc_r+0xe6>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	4631      	mov	r1, r6
 80091d8:	4638      	mov	r0, r7
 80091da:	eb04 0903 	add.w	r9, r4, r3
 80091de:	f000 f941 	bl	8009464 <_sbrk_r>
 80091e2:	4581      	cmp	r9, r0
 80091e4:	d13f      	bne.n	8009266 <_malloc_r+0xe6>
 80091e6:	6821      	ldr	r1, [r4, #0]
 80091e8:	1a6d      	subs	r5, r5, r1
 80091ea:	4629      	mov	r1, r5
 80091ec:	4638      	mov	r0, r7
 80091ee:	f7ff ffa7 	bl	8009140 <sbrk_aligned>
 80091f2:	3001      	adds	r0, #1
 80091f4:	d037      	beq.n	8009266 <_malloc_r+0xe6>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	442b      	add	r3, r5
 80091fa:	6023      	str	r3, [r4, #0]
 80091fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d038      	beq.n	8009276 <_malloc_r+0xf6>
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	42a2      	cmp	r2, r4
 8009208:	d12b      	bne.n	8009262 <_malloc_r+0xe2>
 800920a:	2200      	movs	r2, #0
 800920c:	605a      	str	r2, [r3, #4]
 800920e:	e00f      	b.n	8009230 <_malloc_r+0xb0>
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	1b52      	subs	r2, r2, r5
 8009214:	d41f      	bmi.n	8009256 <_malloc_r+0xd6>
 8009216:	2a0b      	cmp	r2, #11
 8009218:	d917      	bls.n	800924a <_malloc_r+0xca>
 800921a:	1961      	adds	r1, r4, r5
 800921c:	42a3      	cmp	r3, r4
 800921e:	6025      	str	r5, [r4, #0]
 8009220:	bf18      	it	ne
 8009222:	6059      	strne	r1, [r3, #4]
 8009224:	6863      	ldr	r3, [r4, #4]
 8009226:	bf08      	it	eq
 8009228:	f8c8 1000 	streq.w	r1, [r8]
 800922c:	5162      	str	r2, [r4, r5]
 800922e:	604b      	str	r3, [r1, #4]
 8009230:	4638      	mov	r0, r7
 8009232:	f104 060b 	add.w	r6, r4, #11
 8009236:	f000 f829 	bl	800928c <__malloc_unlock>
 800923a:	f026 0607 	bic.w	r6, r6, #7
 800923e:	1d23      	adds	r3, r4, #4
 8009240:	1af2      	subs	r2, r6, r3
 8009242:	d0ae      	beq.n	80091a2 <_malloc_r+0x22>
 8009244:	1b9b      	subs	r3, r3, r6
 8009246:	50a3      	str	r3, [r4, r2]
 8009248:	e7ab      	b.n	80091a2 <_malloc_r+0x22>
 800924a:	42a3      	cmp	r3, r4
 800924c:	6862      	ldr	r2, [r4, #4]
 800924e:	d1dd      	bne.n	800920c <_malloc_r+0x8c>
 8009250:	f8c8 2000 	str.w	r2, [r8]
 8009254:	e7ec      	b.n	8009230 <_malloc_r+0xb0>
 8009256:	4623      	mov	r3, r4
 8009258:	6864      	ldr	r4, [r4, #4]
 800925a:	e7ac      	b.n	80091b6 <_malloc_r+0x36>
 800925c:	4634      	mov	r4, r6
 800925e:	6876      	ldr	r6, [r6, #4]
 8009260:	e7b4      	b.n	80091cc <_malloc_r+0x4c>
 8009262:	4613      	mov	r3, r2
 8009264:	e7cc      	b.n	8009200 <_malloc_r+0x80>
 8009266:	230c      	movs	r3, #12
 8009268:	603b      	str	r3, [r7, #0]
 800926a:	4638      	mov	r0, r7
 800926c:	f000 f80e 	bl	800928c <__malloc_unlock>
 8009270:	e797      	b.n	80091a2 <_malloc_r+0x22>
 8009272:	6025      	str	r5, [r4, #0]
 8009274:	e7dc      	b.n	8009230 <_malloc_r+0xb0>
 8009276:	605b      	str	r3, [r3, #4]
 8009278:	deff      	udf	#255	; 0xff
 800927a:	bf00      	nop
 800927c:	20001f60 	.word	0x20001f60

08009280 <__malloc_lock>:
 8009280:	4801      	ldr	r0, [pc, #4]	; (8009288 <__malloc_lock+0x8>)
 8009282:	f000 b929 	b.w	80094d8 <__retarget_lock_acquire_recursive>
 8009286:	bf00      	nop
 8009288:	200020a0 	.word	0x200020a0

0800928c <__malloc_unlock>:
 800928c:	4801      	ldr	r0, [pc, #4]	; (8009294 <__malloc_unlock+0x8>)
 800928e:	f000 b924 	b.w	80094da <__retarget_lock_release_recursive>
 8009292:	bf00      	nop
 8009294:	200020a0 	.word	0x200020a0

08009298 <_strtol_l.constprop.0>:
 8009298:	2b01      	cmp	r3, #1
 800929a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800929e:	d001      	beq.n	80092a4 <_strtol_l.constprop.0+0xc>
 80092a0:	2b24      	cmp	r3, #36	; 0x24
 80092a2:	d906      	bls.n	80092b2 <_strtol_l.constprop.0+0x1a>
 80092a4:	f000 f8ee 	bl	8009484 <__errno>
 80092a8:	2316      	movs	r3, #22
 80092aa:	6003      	str	r3, [r0, #0]
 80092ac:	2000      	movs	r0, #0
 80092ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009398 <_strtol_l.constprop.0+0x100>
 80092b6:	460d      	mov	r5, r1
 80092b8:	462e      	mov	r6, r5
 80092ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092be:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80092c2:	f017 0708 	ands.w	r7, r7, #8
 80092c6:	d1f7      	bne.n	80092b8 <_strtol_l.constprop.0+0x20>
 80092c8:	2c2d      	cmp	r4, #45	; 0x2d
 80092ca:	d132      	bne.n	8009332 <_strtol_l.constprop.0+0x9a>
 80092cc:	782c      	ldrb	r4, [r5, #0]
 80092ce:	2701      	movs	r7, #1
 80092d0:	1cb5      	adds	r5, r6, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d05b      	beq.n	800938e <_strtol_l.constprop.0+0xf6>
 80092d6:	2b10      	cmp	r3, #16
 80092d8:	d109      	bne.n	80092ee <_strtol_l.constprop.0+0x56>
 80092da:	2c30      	cmp	r4, #48	; 0x30
 80092dc:	d107      	bne.n	80092ee <_strtol_l.constprop.0+0x56>
 80092de:	782c      	ldrb	r4, [r5, #0]
 80092e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80092e4:	2c58      	cmp	r4, #88	; 0x58
 80092e6:	d14d      	bne.n	8009384 <_strtol_l.constprop.0+0xec>
 80092e8:	786c      	ldrb	r4, [r5, #1]
 80092ea:	2310      	movs	r3, #16
 80092ec:	3502      	adds	r5, #2
 80092ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80092f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80092f6:	f04f 0e00 	mov.w	lr, #0
 80092fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80092fe:	4676      	mov	r6, lr
 8009300:	fb03 8a19 	mls	sl, r3, r9, r8
 8009304:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009308:	f1bc 0f09 	cmp.w	ip, #9
 800930c:	d816      	bhi.n	800933c <_strtol_l.constprop.0+0xa4>
 800930e:	4664      	mov	r4, ip
 8009310:	42a3      	cmp	r3, r4
 8009312:	dd24      	ble.n	800935e <_strtol_l.constprop.0+0xc6>
 8009314:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009318:	d008      	beq.n	800932c <_strtol_l.constprop.0+0x94>
 800931a:	45b1      	cmp	r9, r6
 800931c:	d31c      	bcc.n	8009358 <_strtol_l.constprop.0+0xc0>
 800931e:	d101      	bne.n	8009324 <_strtol_l.constprop.0+0x8c>
 8009320:	45a2      	cmp	sl, r4
 8009322:	db19      	blt.n	8009358 <_strtol_l.constprop.0+0xc0>
 8009324:	fb06 4603 	mla	r6, r6, r3, r4
 8009328:	f04f 0e01 	mov.w	lr, #1
 800932c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009330:	e7e8      	b.n	8009304 <_strtol_l.constprop.0+0x6c>
 8009332:	2c2b      	cmp	r4, #43	; 0x2b
 8009334:	bf04      	itt	eq
 8009336:	782c      	ldrbeq	r4, [r5, #0]
 8009338:	1cb5      	addeq	r5, r6, #2
 800933a:	e7ca      	b.n	80092d2 <_strtol_l.constprop.0+0x3a>
 800933c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009340:	f1bc 0f19 	cmp.w	ip, #25
 8009344:	d801      	bhi.n	800934a <_strtol_l.constprop.0+0xb2>
 8009346:	3c37      	subs	r4, #55	; 0x37
 8009348:	e7e2      	b.n	8009310 <_strtol_l.constprop.0+0x78>
 800934a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800934e:	f1bc 0f19 	cmp.w	ip, #25
 8009352:	d804      	bhi.n	800935e <_strtol_l.constprop.0+0xc6>
 8009354:	3c57      	subs	r4, #87	; 0x57
 8009356:	e7db      	b.n	8009310 <_strtol_l.constprop.0+0x78>
 8009358:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800935c:	e7e6      	b.n	800932c <_strtol_l.constprop.0+0x94>
 800935e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009362:	d105      	bne.n	8009370 <_strtol_l.constprop.0+0xd8>
 8009364:	2322      	movs	r3, #34	; 0x22
 8009366:	6003      	str	r3, [r0, #0]
 8009368:	4646      	mov	r6, r8
 800936a:	b942      	cbnz	r2, 800937e <_strtol_l.constprop.0+0xe6>
 800936c:	4630      	mov	r0, r6
 800936e:	e79e      	b.n	80092ae <_strtol_l.constprop.0+0x16>
 8009370:	b107      	cbz	r7, 8009374 <_strtol_l.constprop.0+0xdc>
 8009372:	4276      	negs	r6, r6
 8009374:	2a00      	cmp	r2, #0
 8009376:	d0f9      	beq.n	800936c <_strtol_l.constprop.0+0xd4>
 8009378:	f1be 0f00 	cmp.w	lr, #0
 800937c:	d000      	beq.n	8009380 <_strtol_l.constprop.0+0xe8>
 800937e:	1e69      	subs	r1, r5, #1
 8009380:	6011      	str	r1, [r2, #0]
 8009382:	e7f3      	b.n	800936c <_strtol_l.constprop.0+0xd4>
 8009384:	2430      	movs	r4, #48	; 0x30
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1b1      	bne.n	80092ee <_strtol_l.constprop.0+0x56>
 800938a:	2308      	movs	r3, #8
 800938c:	e7af      	b.n	80092ee <_strtol_l.constprop.0+0x56>
 800938e:	2c30      	cmp	r4, #48	; 0x30
 8009390:	d0a5      	beq.n	80092de <_strtol_l.constprop.0+0x46>
 8009392:	230a      	movs	r3, #10
 8009394:	e7ab      	b.n	80092ee <_strtol_l.constprop.0+0x56>
 8009396:	bf00      	nop
 8009398:	0800964e 	.word	0x0800964e

0800939c <strtol>:
 800939c:	4613      	mov	r3, r2
 800939e:	460a      	mov	r2, r1
 80093a0:	4601      	mov	r1, r0
 80093a2:	4802      	ldr	r0, [pc, #8]	; (80093ac <strtol+0x10>)
 80093a4:	6800      	ldr	r0, [r0, #0]
 80093a6:	f7ff bf77 	b.w	8009298 <_strtol_l.constprop.0>
 80093aa:	bf00      	nop
 80093ac:	2000016c 	.word	0x2000016c

080093b0 <__utoa>:
 80093b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b2:	4c1f      	ldr	r4, [pc, #124]	; (8009430 <__utoa+0x80>)
 80093b4:	b08b      	sub	sp, #44	; 0x2c
 80093b6:	4605      	mov	r5, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	466e      	mov	r6, sp
 80093bc:	f104 0c20 	add.w	ip, r4, #32
 80093c0:	6820      	ldr	r0, [r4, #0]
 80093c2:	6861      	ldr	r1, [r4, #4]
 80093c4:	4637      	mov	r7, r6
 80093c6:	c703      	stmia	r7!, {r0, r1}
 80093c8:	3408      	adds	r4, #8
 80093ca:	4564      	cmp	r4, ip
 80093cc:	463e      	mov	r6, r7
 80093ce:	d1f7      	bne.n	80093c0 <__utoa+0x10>
 80093d0:	7921      	ldrb	r1, [r4, #4]
 80093d2:	7139      	strb	r1, [r7, #4]
 80093d4:	1e91      	subs	r1, r2, #2
 80093d6:	6820      	ldr	r0, [r4, #0]
 80093d8:	6038      	str	r0, [r7, #0]
 80093da:	2922      	cmp	r1, #34	; 0x22
 80093dc:	f04f 0100 	mov.w	r1, #0
 80093e0:	d904      	bls.n	80093ec <__utoa+0x3c>
 80093e2:	7019      	strb	r1, [r3, #0]
 80093e4:	460b      	mov	r3, r1
 80093e6:	4618      	mov	r0, r3
 80093e8:	b00b      	add	sp, #44	; 0x2c
 80093ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ec:	1e58      	subs	r0, r3, #1
 80093ee:	4684      	mov	ip, r0
 80093f0:	fbb5 f7f2 	udiv	r7, r5, r2
 80093f4:	fb02 5617 	mls	r6, r2, r7, r5
 80093f8:	3628      	adds	r6, #40	; 0x28
 80093fa:	446e      	add	r6, sp
 80093fc:	460c      	mov	r4, r1
 80093fe:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009402:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009406:	462e      	mov	r6, r5
 8009408:	42b2      	cmp	r2, r6
 800940a:	f101 0101 	add.w	r1, r1, #1
 800940e:	463d      	mov	r5, r7
 8009410:	d9ee      	bls.n	80093f0 <__utoa+0x40>
 8009412:	2200      	movs	r2, #0
 8009414:	545a      	strb	r2, [r3, r1]
 8009416:	1919      	adds	r1, r3, r4
 8009418:	1aa5      	subs	r5, r4, r2
 800941a:	42aa      	cmp	r2, r5
 800941c:	dae3      	bge.n	80093e6 <__utoa+0x36>
 800941e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009422:	780e      	ldrb	r6, [r1, #0]
 8009424:	7006      	strb	r6, [r0, #0]
 8009426:	3201      	adds	r2, #1
 8009428:	f801 5901 	strb.w	r5, [r1], #-1
 800942c:	e7f4      	b.n	8009418 <__utoa+0x68>
 800942e:	bf00      	nop
 8009430:	08009628 	.word	0x08009628

08009434 <memcmp>:
 8009434:	b510      	push	{r4, lr}
 8009436:	3901      	subs	r1, #1
 8009438:	4402      	add	r2, r0
 800943a:	4290      	cmp	r0, r2
 800943c:	d101      	bne.n	8009442 <memcmp+0xe>
 800943e:	2000      	movs	r0, #0
 8009440:	e005      	b.n	800944e <memcmp+0x1a>
 8009442:	7803      	ldrb	r3, [r0, #0]
 8009444:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009448:	42a3      	cmp	r3, r4
 800944a:	d001      	beq.n	8009450 <memcmp+0x1c>
 800944c:	1b18      	subs	r0, r3, r4
 800944e:	bd10      	pop	{r4, pc}
 8009450:	3001      	adds	r0, #1
 8009452:	e7f2      	b.n	800943a <memcmp+0x6>

08009454 <memset>:
 8009454:	4402      	add	r2, r0
 8009456:	4603      	mov	r3, r0
 8009458:	4293      	cmp	r3, r2
 800945a:	d100      	bne.n	800945e <memset+0xa>
 800945c:	4770      	bx	lr
 800945e:	f803 1b01 	strb.w	r1, [r3], #1
 8009462:	e7f9      	b.n	8009458 <memset+0x4>

08009464 <_sbrk_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d06      	ldr	r5, [pc, #24]	; (8009480 <_sbrk_r+0x1c>)
 8009468:	2300      	movs	r3, #0
 800946a:	4604      	mov	r4, r0
 800946c:	4608      	mov	r0, r1
 800946e:	602b      	str	r3, [r5, #0]
 8009470:	f7f7 fe7a 	bl	8001168 <_sbrk>
 8009474:	1c43      	adds	r3, r0, #1
 8009476:	d102      	bne.n	800947e <_sbrk_r+0x1a>
 8009478:	682b      	ldr	r3, [r5, #0]
 800947a:	b103      	cbz	r3, 800947e <_sbrk_r+0x1a>
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	200020a4 	.word	0x200020a4

08009484 <__errno>:
 8009484:	4b01      	ldr	r3, [pc, #4]	; (800948c <__errno+0x8>)
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	2000016c 	.word	0x2000016c

08009490 <__libc_init_array>:
 8009490:	b570      	push	{r4, r5, r6, lr}
 8009492:	4d0d      	ldr	r5, [pc, #52]	; (80094c8 <__libc_init_array+0x38>)
 8009494:	4c0d      	ldr	r4, [pc, #52]	; (80094cc <__libc_init_array+0x3c>)
 8009496:	1b64      	subs	r4, r4, r5
 8009498:	10a4      	asrs	r4, r4, #2
 800949a:	2600      	movs	r6, #0
 800949c:	42a6      	cmp	r6, r4
 800949e:	d109      	bne.n	80094b4 <__libc_init_array+0x24>
 80094a0:	4d0b      	ldr	r5, [pc, #44]	; (80094d0 <__libc_init_array+0x40>)
 80094a2:	4c0c      	ldr	r4, [pc, #48]	; (80094d4 <__libc_init_array+0x44>)
 80094a4:	f000 f874 	bl	8009590 <_init>
 80094a8:	1b64      	subs	r4, r4, r5
 80094aa:	10a4      	asrs	r4, r4, #2
 80094ac:	2600      	movs	r6, #0
 80094ae:	42a6      	cmp	r6, r4
 80094b0:	d105      	bne.n	80094be <__libc_init_array+0x2e>
 80094b2:	bd70      	pop	{r4, r5, r6, pc}
 80094b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b8:	4798      	blx	r3
 80094ba:	3601      	adds	r6, #1
 80094bc:	e7ee      	b.n	800949c <__libc_init_array+0xc>
 80094be:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c2:	4798      	blx	r3
 80094c4:	3601      	adds	r6, #1
 80094c6:	e7f2      	b.n	80094ae <__libc_init_array+0x1e>
 80094c8:	08009758 	.word	0x08009758
 80094cc:	08009758 	.word	0x08009758
 80094d0:	08009758 	.word	0x08009758
 80094d4:	0800975c 	.word	0x0800975c

080094d8 <__retarget_lock_acquire_recursive>:
 80094d8:	4770      	bx	lr

080094da <__retarget_lock_release_recursive>:
 80094da:	4770      	bx	lr

080094dc <memcpy>:
 80094dc:	440a      	add	r2, r1
 80094de:	4291      	cmp	r1, r2
 80094e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80094e4:	d100      	bne.n	80094e8 <memcpy+0xc>
 80094e6:	4770      	bx	lr
 80094e8:	b510      	push	{r4, lr}
 80094ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f2:	4291      	cmp	r1, r2
 80094f4:	d1f9      	bne.n	80094ea <memcpy+0xe>
 80094f6:	bd10      	pop	{r4, pc}

080094f8 <_free_r>:
 80094f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094fa:	2900      	cmp	r1, #0
 80094fc:	d044      	beq.n	8009588 <_free_r+0x90>
 80094fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009502:	9001      	str	r0, [sp, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	f1a1 0404 	sub.w	r4, r1, #4
 800950a:	bfb8      	it	lt
 800950c:	18e4      	addlt	r4, r4, r3
 800950e:	f7ff feb7 	bl	8009280 <__malloc_lock>
 8009512:	4a1e      	ldr	r2, [pc, #120]	; (800958c <_free_r+0x94>)
 8009514:	9801      	ldr	r0, [sp, #4]
 8009516:	6813      	ldr	r3, [r2, #0]
 8009518:	b933      	cbnz	r3, 8009528 <_free_r+0x30>
 800951a:	6063      	str	r3, [r4, #4]
 800951c:	6014      	str	r4, [r2, #0]
 800951e:	b003      	add	sp, #12
 8009520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009524:	f7ff beb2 	b.w	800928c <__malloc_unlock>
 8009528:	42a3      	cmp	r3, r4
 800952a:	d908      	bls.n	800953e <_free_r+0x46>
 800952c:	6825      	ldr	r5, [r4, #0]
 800952e:	1961      	adds	r1, r4, r5
 8009530:	428b      	cmp	r3, r1
 8009532:	bf01      	itttt	eq
 8009534:	6819      	ldreq	r1, [r3, #0]
 8009536:	685b      	ldreq	r3, [r3, #4]
 8009538:	1949      	addeq	r1, r1, r5
 800953a:	6021      	streq	r1, [r4, #0]
 800953c:	e7ed      	b.n	800951a <_free_r+0x22>
 800953e:	461a      	mov	r2, r3
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	b10b      	cbz	r3, 8009548 <_free_r+0x50>
 8009544:	42a3      	cmp	r3, r4
 8009546:	d9fa      	bls.n	800953e <_free_r+0x46>
 8009548:	6811      	ldr	r1, [r2, #0]
 800954a:	1855      	adds	r5, r2, r1
 800954c:	42a5      	cmp	r5, r4
 800954e:	d10b      	bne.n	8009568 <_free_r+0x70>
 8009550:	6824      	ldr	r4, [r4, #0]
 8009552:	4421      	add	r1, r4
 8009554:	1854      	adds	r4, r2, r1
 8009556:	42a3      	cmp	r3, r4
 8009558:	6011      	str	r1, [r2, #0]
 800955a:	d1e0      	bne.n	800951e <_free_r+0x26>
 800955c:	681c      	ldr	r4, [r3, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	6053      	str	r3, [r2, #4]
 8009562:	440c      	add	r4, r1
 8009564:	6014      	str	r4, [r2, #0]
 8009566:	e7da      	b.n	800951e <_free_r+0x26>
 8009568:	d902      	bls.n	8009570 <_free_r+0x78>
 800956a:	230c      	movs	r3, #12
 800956c:	6003      	str	r3, [r0, #0]
 800956e:	e7d6      	b.n	800951e <_free_r+0x26>
 8009570:	6825      	ldr	r5, [r4, #0]
 8009572:	1961      	adds	r1, r4, r5
 8009574:	428b      	cmp	r3, r1
 8009576:	bf04      	itt	eq
 8009578:	6819      	ldreq	r1, [r3, #0]
 800957a:	685b      	ldreq	r3, [r3, #4]
 800957c:	6063      	str	r3, [r4, #4]
 800957e:	bf04      	itt	eq
 8009580:	1949      	addeq	r1, r1, r5
 8009582:	6021      	streq	r1, [r4, #0]
 8009584:	6054      	str	r4, [r2, #4]
 8009586:	e7ca      	b.n	800951e <_free_r+0x26>
 8009588:	b003      	add	sp, #12
 800958a:	bd30      	pop	{r4, r5, pc}
 800958c:	20001f60 	.word	0x20001f60

08009590 <_init>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	bf00      	nop
 8009594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009596:	bc08      	pop	{r3}
 8009598:	469e      	mov	lr, r3
 800959a:	4770      	bx	lr

0800959c <_fini>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr
